[
  [
    "UseContainerItem [classic|retail]",
    "\nDescription: Uses an item from a bag.",
    "undefined--@arg i: bag Index/n--@arg z: slot/nfunction/nBANETO_UseContainerItem/n(/n,/n)/n"
  ],
  [
    "GetSpellCooldown [classic|retail]",
    "\nDescription: Get a spell's cooldown in seconds.",
    "undefined--@arg spellid: number/n--@return: duration/nfunction/nBANETO_GetSpellCooldown/n(/n)/n"
  ],
  [
    "StartPetAttackWarlock [classic]",
    "\nDescription: Instruct your Warlock pet to attack.",
    "undefinedfunction/nBANETO_StartPetAttackWarlock/n(/n)/n"
  ],
  [
    "StartPetAttack [classic]",
    "\nDescription: Instruct your pet to attack.",
    "undefinedfunction/nBANETO_StartPetAttack/n(/n)/n"
  ],
  [
    "DelayStateTick [classic|retail]",
    "\nDescription: Delay the next state tick by seconds.",
    "undefined--@arg seconds: number/nfunction/nBANETO_DelayStateTick/n(/n)/n"
  ],
  [
    "HunterStopShot [classic]",
    "\nDescription: Stop auto casting spells.",
    "undefined--@arg name: string: name of spell to stop/nfunction/nBANETO_HunterStopShot/n(/n)/n"
  ],
  [
    "GetBanetoProfileType [classic]",
    "\nDescription: Returns the type of the currently loaded profile.",
    "undefined--@return: string/nfunction/nGetBanetoProfileType/n(/n)/n"
  ],
  [
    "PrintPlugin [classic|retail]",
    "\nDescription: Print something to the chat frame denoting a plugin.",
    "undefined--@arg message: string/nfunction/nBANETO_PrintPlugin/n(/n)/n"
  ],
  [
    "GetSessionTime [classic|retail]",
    "\nDescription: Returns the number of seconds the bot has been loaded.",
    "undefined--@return: number/nfunction/nBANETO_GetSessionTime/n(/n)/n"
  ],
  [
    "reloadUi [classic|retail]",
    "\nDescription: Reload the UI.",
    "undefinedfunction/nreloadUi/n(/n)/n"
  ],
  [
    "LoadOfficialPaid [classic|retail]",
    "\nDescription: Load an official (paid) profile",
    "undefined--@arg packName: string/n--@arg profile: string/nfunction/nBANETO_LoadOfficialPaid/n(/n,/n)/n"
  ],
  [
    "GetPlayerCorpsePosition [classic|retail]",
    "\nDescription: Get the player's corpse position",
    "undefined--@return: x number the x coordinate of the player's corpse/nfunction/nBANETO_GetPlayerCorpsePosition/n(/n)/n"
  ],
  [
    "GetState [classic|retail]",
    "\nDescription: Returns the state the bot is currently in.",
    "undefined--@return: string/nfunction/nBANETO_GetState/n(/n)/n"
  ],
  [
    "IsFlyingAscendNeeded [classic|retail]",
    "\nDescription: Checks if ascending flight is required for the player's current position.",
    "undefined--@return: boolean: Returns true if ascending flight is needed, false otherwise./nfunction/nBANETO_IsFlyingAscendNeeded/n(/n)/n"
  ],
  [
    "GetZoneId [classic|retail]",
    "\nDescription: Return the zone's ID.",
    "undefined--@return: number/nfunction/nBANETO_GetZoneId/n(/n)/n"
  ],
  [
    "GetMapId [classic|retail]",
    "\nDescription: Return the map's ID.",
    "undefined--@return: ID number the map ID/nfunction/nBANETO_GetMapId/n(/n)/n"
  ],
  [
    "StopMovementWithoutDeletingPath [classic|retail]",
    "\nDescription: Stop movement but keep the path available.",
    "undefinedfunction/nBANETO_StopMovementWithoutDeletingPath/n(/n)/n"
  ],
  [
    "CanUseRepairBotInsideDungeon [classic]",
    "\nDescription: Check if the bot can use a repair bot inside a dungeon.",
    "undefined--@return: boolean/nfunction/nBANETO_CanUseRepairBotInsideDungeon/n(/n)/n"
  ],
  [
    "HasRepBotItem [classic]",
    "\nDescription: Check to see if the player has a repair bot item.",
    "undefined--@return: boolean/nfunction/nBANETO_HasRepBotItem/n(/n)/n"
  ],
  [
    "FindRepBot [classic]",
    "\nDescription: Finds the closest repair bot to the player",
    "undefined--@return: object/nfunction/nBANETO_FindRepBot/n(/n)/n"
  ],
  [
    "SetBanetoTarget [classic|retail]",
    "\nDescription: Set the BANETO_TARGET variable, anytime you change targets (@see UnlockedTargetUnit) you should call this function.",
    "undefined--@arg unit: string/nfunction/nBANETO_SetBanetoTarget/n(/n)/n"
  ],
  [
    "StopMovement [classic|retail]",
    "\nDescription: Stop all movement and clear path.",
    "undefinedfunction/nBANETO_StopMovement/n(/n)/n"
  ],
  [
    "LoadCustomTravelProfile [classic|retail]",
    "\nDescription: Load a custom travel profile",
    "undefined--@arg profileName: string/nfunction/nBANETO_LoadCustomTravelProfile/n(/n)/n"
  ],
  [
    "IsPackQuester [classic|retail]",
    "\nDescription: Is the packName a Quest pack.",
    "undefined--@arg packName: string/n--@return: boolean/nfunction/nBANETO_IsPackQuester/n(/n)/n"
  ],
  [
    "GetFirstProfileOfPack [classic|retail]",
    "\nDescription: Get the first profile of a given pack.",
    "undefined--@arg packName: string/n--@return: string/nfunction/nBANETO_GetFirstProfileOfPack/n(/n)/n"
  ],
  [
    "GetTarget [classic|retail]",
    "\nDescription: Return the current baneto internal target, do not confuse it with your wow target.",
    "undefined--@return: object/nfunction/nBANETO_GetTarget/n(/n)/n"
  ],
  [
    "IsPaidPackInstalled [classic|retail]",
    "\nDescription: Is a paid pack already installed?",
    "undefined--@arg packName: string/n--@return: boolean/nfunction/nBANETO_IsPaidPackInstalled/n(/n)/n"
  ],
  [
    "InstallPaidPack [classic|retail]",
    "\nDescription: Install a paid pack",
    "undefined--@arg packName: string/nfunction/nBANETO_InstallPaidPack/n(/n)/n"
  ],
  [
    "LoadTravelProfile [classic|retail]",
    "\nDescription: Load a predefined travel profile.",
    "undefined--@arg name: string/nfunction/nBANETO_LoadTravelProfile/n(/n)/n"
  ],
  [
    "GameObjectType [classic|retail]",
    "\nDescription: Get a gameObject's type",
    "undefined--@arg gameObject: GameObject/n--@return: number/nfunction/nBANETO_GameObjectType/n(/n)/n"
  ],
  [
    "LoadBgProfile [classic|retail]",
    "\nDescription: Load a battleground profile.",
    "undefined--@arg name: string/nfunction/nBANETO_LoadBgProfile/n(/n)/n"
  ],
  [
    "IsTrainStateRequired [classic|retail]",
    "\nDescription: Check if the character should visit a class trainer.",
    "undefined--@return: boolean/nfunction/nBANETO_IsTrainStateRequired/n(/n)/n"
  ],
  [
    "IsProfTrainStateRequired [classic|retail]",
    "\nDescription: Check if the character should visit a profession trainer.",
    "undefined--@return: boolean/nfunction/nBANETO_IsProfTrainStateRequired/n(/n)/n"
  ],
  [
    "AreWeDazed [classic|retail]",
    "\nDescription: Check if the character is dazed.",
    "undefined--@return: boolean/nfunction/nBANETO_AreWeDazed/n(/n)/n"
  ],
  [
    "IsReviveSecure [classic|retail]",
    "\nDescription: Check if it's safe to revive.",
    "undefined--@return: boolean/nfunction/nBANETO_IsReviveSecure/n(/n)/n"
  ],
  [
    "GetRandomPointOnCircleNEW [classic|retail]",
    "\nDescription: Get a random point on a specified circle",
    "undefined--@arg centerX: number/n--@arg centerY: number/n--@arg centerZ: number/n--@arg radius: number/n--@return: x number the x coordinate of the generated point/nfunction/nBANETO_GetRandomPointOnCircleNEW/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetRandomPointInCircleNEW [classic|retail]",
    "\nDescription: Get a random point in a specified circle",
    "undefined--@arg centerX: number/n--@arg centerY: number/n--@arg centerZ: number/n--@arg radius: number/n--@return: x number the x coordinate of the generated point/nfunction/nBANETO_GetRandomPointInCircleNEW/n(/n,/n,/n,/n)/n"
  ],
  [
    "DebugProfessionSkills [classic]",
    "\nDescription: Outputs debugging information related to the player's professions.",
    "undefinedfunction/nBANETO_DebugProfessionSkills/n(/n)/n"
  ],
  [
    "DistanceToProfileIsOkay [classic]",
    "\nDescription: Checks if the current player's distance to the set profile is within an acceptable range.",
    "undefined--@return: boolean: Returns true if the distance is acceptable, false otherwise./nfunction/nBANETO_DistanceToProfileIsOkay/n(/n)/n"
  ],
  [
    "StartStop [classic|retail]",
    "\nDescription: Toggle Baneto operation, starting or stopping as required.",
    "undefinedfunction/nBANETO_StartStop/n(/n)/n"
  ],
  [
    "GetCurrentCenterIndex [classic|retail]",
    "\nDescription: Get the index of the currently active spot in the profile.",
    "undefined--@return: number: The index of the current spot./nfunction/nBANETO_GetCurrentCenterIndex/n(/n)/n"
  ],
  [
    "Start [classic|retail]",
    "\nDescription: Start Baneto bot.",
    "undefinedfunction/nBANETO_Start/n(/n)/n"
  ],
  [
    "IsLastProfileATaskInTaskmanager [classic|retail]",
    "\nDescription: Check if the last loaded profile was part of a task in the task manager.",
    "undefined--@return: boolean: Returns true if the last profile was a task, false otherwise./nfunction/nBANETO_IsLastProfileATaskInTaskmanager/n(/n)/n"
  ],
  [
    "StartTaskmanager [classic|retail]",
    "\nDescription: Initiate task manager.",
    "undefinedfunction/nBANETO_StartTaskmanager/n(/n)/n"
  ],
  [
    "GetCurrentTaskmanagerProfile [classic|retail]",
    "\nDescription: Get the name of the currently active task manager profile.",
    "undefined--@return: string: The name of the current task manager profile./nfunction/nBANETO_GetCurrentTaskmanagerProfile/n(/n)/n"
  ],
  [
    "RemoveTaskByIndex [classic|retail]",
    "\nDescription: Remove a task from the task manager by its index.",
    "undefined--@arg index: number: The index of the task to be removed./nfunction/nBANETO_RemoveTaskByIndex/n(/n)/n"
  ],
  [
    "VisualizeTask [classic|retail]",
    "\nDescription: Visualize a task for a specified duration.",
    "undefined--@arg name: string: The name of the task to visualize./n--@arg duration: number: The duration for which to visualize the task (in seconds)./nfunction/nBANETO_VisualizeTask/n(/n,/n)/n"
  ],
  [
    "AddTask [classic|retail]",
    "\nDescription: Add a task to the task manager.",
    "undefined--@arg taskType: string: The type of the task./n--@arg taskDuration: number: The duration of the task (in seconds)./n--@arg fileName: string: The name of the task file./n--@arg isLocal: boolean: If true, the task file is local. If false, it's remote./nfunction/nBANETO_AddTask/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetCenterIndexInFlyingPath [classic|retail]",
    "\nDescription: Get the index of the center in the current flying path.",
    "undefined--@arg path: table: The flying path as an array of coordinates./n--@return: number: The index of the center in the flying path./nfunction/nBANETO_GetCenterIndexInFlyingPath/n(/n)/n"
  ],
  [
    "GetCenterIndexInPath [classic|retail]",
    "\nDescription: Get the index of the center in the current path.",
    "undefined--@arg path: table: The path as an array of coordinates./n--@return: number: The index of the center in the path./nfunction/nBANETO_GetCenterIndexInPath/n(/n)/n"
  ],
  [
    "GetCenterIndexForPath [classic|retail]",
    "\nDescription: Get the index of the center for the specified path type.",
    "undefined--@arg type: string: The type of path./n--@return: number: The index of the center for the specified path./nfunction/nBANETO_GetCenterIndexForPath/n(/n)/n"
  ],
  [
    "GetClosestPathIndex [classic|retail]",
    "\nDescription: Get the closest index of the path to the player's current position.",
    "undefined--@return: number: The closest index of the path./nfunction/nBANETO_GetClosestPathIndex/n(/n)/n"
  ],
  [
    "GetCenterIndexForGrinder [classic|retail]",
    "\nDescription: Get the index of the center for the current grinder.",
    "undefined--@return: number: The index of the center for the grinder./nfunction/nBANETO_GetCenterIndexForGrinder/n(/n)/n"
  ],
  [
    "FlyingPathDeleter [classic|retail]",
    "\nDescription: Delete the current flying path.",
    "undefinedfunction/nBANETO_FlyingPathDeleter/n(/n)/n"
  ],
  [
    "GroundPathDeleter [classic|retail]",
    "\nDescription: Delete the current ground path.",
    "undefinedfunction/nBANETO_GroundPathDeleter/n(/n)/n"
  ],
  [
    "TurnStop [classic|retail]",
    "\nDescription: Stop turning.",
    "undefinedfunction/nBANETO_TurnStop/n(/n)/n"
  ],
  [
    "ResetFlyingPath [classic]",
    "\nDescription: Reset the current flying path.",
    "undefinedfunction/nBANETO_ResetFlyingPath/n(/n)/n"
  ],
  [
    "Stop [classic|retail]",
    "\nDescription: Stop Baneto operation.",
    "undefinedfunction/nBANETO_Stop/n(/n)/n"
  ],
  [
    "GetWorstEnemyInBg [classic|retail]",
    "\nDescription: Get the favorable enemy in the battleground.",
    "undefined--@return: string: The name of the favorable enemy./nfunction/nBANETO_GetWorstEnemyInBg/n(/n)/n"
  ],
  [
    "GetBestFriendInBg [classic|retail]",
    "\nDescription: Get the most favorable friend in the battleground.",
    "undefined--@return: string: The name of the most favorable friend./nfunction/nBANETO_GetBestFriendInBg/n(/n)/n"
  ],
  [
    "IsLastProfileBattleground [classic|retail]",
    "\nDescription: Check if the last loaded profile was for a battleground.",
    "undefined--@return: boolean: Returns true if the last profile was for a battleground, false otherwise./nfunction/nBANETO_IsLastProfileBattleground/n(/n)/n"
  ],
  [
    "IsLastProfileDungeon [classic|retail]",
    "\nDescription: Check if the last loaded profile was for a dungeon.",
    "undefined--@return: boolean: Returns true if the last profile was for a dungeon, false otherwise./nfunction/nBANETO_IsLastProfileDungeon/n(/n)/n"
  ],
  [
    "IsLastProfileQuesting [classic|retail]",
    "\nDescription: Check if the last loaded profile was for questing.",
    "undefined--@return: boolean: Returns true if the last profile was for questing, false otherwise./nfunction/nBANETO_IsLastProfileQuesting/n(/n)/n"
  ],
  [
    "IsLastProfileEternal [classic|retail]",
    "\nDescription: Check if the last loaded profile was for an eternal event.",
    "undefined--@return: boolean: Returns true if the last profile was for an eternal event, false otherwise./nfunction/nBANETO_IsLastProfileEternal/n(/n)/n"
  ],
  [
    "IsLastProfileGathering [classic|retail]",
    "\nDescription: Check if the last loaded profile was for gathering.",
    "undefined--@return: boolean: Returns true if the last profile was for gathering, false otherwise./nfunction/nBANETO_IsLastProfileGathering/n(/n)/n"
  ],
  [
    "IsLastProfileTraveling [classic|retail]",
    "\nDescription: Check if the last loaded profile was for traveling.",
    "undefined--@return: boolean: Returns true if the last profile was for traveling, false otherwise./nfunction/nBANETO_IsLastProfileTraveling/n(/n)/n"
  ],
  [
    "IsLastProfileGold [classic|retail]",
    "\nDescription: Check if the last loaded profile was for gold farming.",
    "undefined--@return: boolean: Returns true if the last profile was for gold farming, false otherwise./nfunction/nBANETO_IsLastProfileGold/n(/n)/n"
  ],
  [
    "IsNearQuestSpots [classic]",
    "\nDescription: Check if the player is near quest spots.",
    "undefined--@return: boolean: Returns true if the player is near quest spots, false otherwise./nfunction/nBANETO_IsNearQuestSpots/n(/n)/n"
  ],
  [
    "GetLastProfile [classic|retail]",
    "\nDescription: Get the last loaded profile.",
    "undefined--@return: string: The name of the last loaded profile./nfunction/nBANETO_GetLastProfile/n(/n)/n"
  ],
  [
    "ReloadLastProfile [classic|retail]",
    "\nDescription: Reload the last loaded profile.",
    "undefinedfunction/nBANETO_ReloadLastProfile/n(/n)/n"
  ],
  [
    "ReloadAndStartLastProfile [classic|retail]",
    "\nDescription: Reload and start the last loaded profile.",
    "undefinedfunction/nBANETO_ReloadAndStartLastProfile/n(/n)/n"
  ],
  [
    "Customer [classic|retail]",
    "\nDescription: Return the Baneto username.",
    "undefined--@return: string: The username of the Baneto customer./nfunction/nBANETO_Customer/n(/n)/n"
  ],
  [
    "AddItemToNeverSell [classic|retail]",
    "\nDescription: Add an item to the list that should never be sold.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToNeverSell/n(/n)/n"
  ],
  [
    "IsItemInUsageList [classic|retail]",
    "\nDescription: Check if the specified item is in the usage list.",
    "undefined--@arg itemname: string: The name of the item./n--@return: boolean: Returns true if the item is in the usage list, false otherwise./nfunction/nBANETO_IsItemInUsageList/n(/n)/n"
  ],
  [
    "RemoveItemFromUsageList [classic|retail]",
    "\nDescription: Remove an item from the usage list.",
    "undefined--@arg itemname: string: The name of the item to be removed./nfunction/nBANETO_RemoveItemFromUsageList/n(/n)/n"
  ],
  [
    "VisualizeUsageList [classic|retail]",
    "\nDescription: Display the items in the usage list.",
    "undefinedfunction/nBANETO_VisualizeUsageList/n(/n)/n"
  ],
  [
    "AddItemToUsageList [classic|retail]",
    "\nDescription: Add an item to the usage list.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToUsageList/n(/n)/n"
  ],
  [
    "AddItemToDeleteList [classic|retail]",
    "\nDescription: Add an item to the list that should automatically be deleted.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToDeleteList/n(/n)/n"
  ],
  [
    "AddItemToNeverDisenchant [classic|retail]",
    "\nDescription: Add an item to the list that should never be disenchanted.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToNeverDisenchant/n(/n)/n"
  ],
  [
    "AddItemToAlwaysMail [classic|retail]",
    "\nDescription: Add an item to the list that should always be mailed.",
    "undefined--@arg itemname: string/nfunction/nBANETO_AddItemToAlwaysMail/n(/n)/n"
  ],
  [
    "AddItemToNeverMail [classic|retail]",
    "\nDescription: Add an item to the list that should never be mailed.",
    "undefined--@arg itemname: string/nfunction/nBANETO_AddItemToNeverMail/n(/n)/n"
  ],
  [
    "IsEntryInGlobalBlacklist [classic|retail]",
    "\nDescription: Checks whether an ID is in the global blacklist from the user's blacklist tab.",
    "undefined--@arg id: <value>/n--@return: boolean/nfunction/nBANETO_IsEntryInGlobalBlacklist/n(/n)/n"
  ],
  [
    "RemoveItemFromNeverSell [classic|retail]",
    "\nDescription: Remove an item from the list that should never be sold.",
    "undefined--@arg itemname: string/nfunction/nBANETO_RemoveItemFromNeverSell/n(/n)/n"
  ],
  [
    "RemoveItemFromDeleteList [classic|retail]",
    "\nDescription: Remove an item from the list that should be deleted.",
    "undefined--@arg itemname: string/nfunction/nBANETO_RemoveItemFromDeleteList/n(/n)/n"
  ],
  [
    "RemoveItemFromNeverDisenchant [classic|retail]",
    "\nDescription: Remove an item from the list that should never be disenchanted.",
    "undefined--@arg itemname: string/nfunction/nBANETO_RemoveItemFromNeverDisenchant/n(/n)/n"
  ],
  [
    "IsEntryInGlobalObjectlist [classic|retail]",
    "\nDescription: Check if an entry exists in the global object list.",
    "undefined--@arg id: number: The ID of the entry to be checked./n--@return: boolean: Returns true if the entry exists in the global object list, false otherwise./nfunction/nBANETO_IsEntryInGlobalObjectlist/n(/n)/n"
  ],
  [
    "VisualizeGlobalObjectList [classic|retail]",
    "\nDescription: Display the global object list.",
    "undefinedfunction/nBANETO_VisualizeGlobalObjectList/n(/n)/n"
  ],
  [
    "RemoveCustomObjectIDGlobal [classic|retail]",
    "\nDescription: Remove a custom object ID from the global list.",
    "undefined--@arg id: number: The ID of the object to be removed./nfunction/nBANETO_RemoveCustomObjectIDGlobal/n(/n)/n"
  ],
  [
    "DefineCustomObjectIDGlobal [classic|retail]",
    "\nDescription: Add a custom object ID to the global list.",
    "undefined--@arg id: number: The ID of the object to be added./nfunction/nBANETO_DefineCustomObjectIDGlobal/n(/n)/n"
  ],
  [
    "RemoveEntryFromGlobalMobIdBlacklist [classic|retail]",
    "\nDescription: Remove an entry from the global mob ID blocklist.",
    "undefined--@arg id: number: The ID of the mob to be removed from the blocklist./nfunction/nBANETO_RemoveEntryFromGlobalMobIdBlacklist/n(/n)/n"
  ],
  [
    "RemoveItemFromNeverMail [classic|retail]",
    "\nDescription: Remove an item from the list that should never be mailed.",
    "undefined--@arg itemname: string: The name of the item to be removed./nfunction/nBANETO_RemoveItemFromNeverMail/n(/n)/n"
  ],
  [
    "RemoveItemFromAlwaysMail [classic|retail]",
    "\nDescription: Remove an item from the list that should always be mailed.",
    "undefined--@arg itemname: string: The name of the item to be removed./nfunction/nBANETO_RemoveItemFromAlwaysMail/n(/n)/n"
  ],
  [
    "ClearUserList [classic|retail]",
    "\nDescription: Clear a user list.",
    "undefined--@arg listname: string: The name of the list to be cleared./n--@arg force: boolean: Whether to force clear the list./nfunction/nBANETO_ClearUserList/n(/n,/n)/n"
  ],
  [
    "VisualizeGlobalMobIdBlacklist [classic|retail]",
    "\nDescription: Display the global mob ID blacklist.",
    "undefinedfunction/nBANETO_VisualizeGlobalMobIdBlacklist/n(/n)/n"
  ],
  [
    "VisualizeDoNotSellList [classic|retail]",
    "\nDescription: Display the \"Do Not Sell\" list.",
    "undefinedfunction/nBANETO_VisualizeDoNotSellList/n(/n)/n"
  ],
  [
    "VisualizeDeleteList [classic|retail]",
    "\nDescription: Display the delete list.",
    "undefinedfunction/nBANETO_VisualizeDeleteList/n(/n)/n"
  ],
  [
    "VisualizeDoNotDisenchantList [classic|retail]",
    "\nDescription: Display the \"Do Not Disenchant\" list.",
    "undefinedfunction/nBANETO_VisualizeDoNotDisenchantList/n(/n)/n"
  ],
  [
    "VisualizeDoNotMailList [classic|retail]",
    "\nDescription: Display the \"Do Not Mail\" list.",
    "undefinedfunction/nBANETO_VisualizeDoNotMailList/n(/n)/n"
  ],
  [
    "VisualizeAlwaysMailList [classic|retail]",
    "\nDescription: Display the \"Always Mail\" list.",
    "undefinedfunction/nBANETO_VisualizeAlwaysMailList/n(/n)/n"
  ],
  [
    "SpellbookDebug [classic|retail]",
    "\nDescription: Output debugging information for the spellbook.",
    "undefinedfunction/nBANETO_SpellbookDebug/n(/n)/n"
  ],
  [
    "CastSpellOnGround [classic|retail]",
    "\nDescription: Cast a spell on the ground near a specified unit.",
    "undefined--@arg spellid: number: The ID of the spell to be cast./n--@arg unit: unit: The unit near which to cast the spell./nfunction/nBANETO_CastSpellOnGround/n(/n,/n)/n"
  ],
  [
    "IsSpellKnownNoSettingsCheck [classic]",
    "\nDescription: Check if a spell is known by the character without checking the settings.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is known, false otherwise./nfunction/nBANETO_IsSpellKnownNoSettingsCheck/n(/n)/n"
  ],
  [
    "IsSpellKnown [classic|retail]",
    "\nDescription: Check if a spell is known by the character.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is known, false otherwise./nfunction/nBANETO_IsSpellKnown/n(/n)/n"
  ],
  [
    "IsSpellUsableNoSettingsCheck [classic]",
    "\nDescription: Check if a spell is usable without checking the settings.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is usable, false otherwise./nfunction/nBANETO_IsSpellUsableNoSettingsCheck/n(/n)/n"
  ],
  [
    "BlockSpellTemp [classic]",
    "\nDescription: Temporarily block a spell.",
    "undefined--@arg spellid: number: The ID of the spell to be blocked./n--@arg seconds: number: The duration for which the spell should be blocked./nfunction/nBANETO_BlockSpellTemp/n(/n,/n)/n"
  ],
  [
    "IsSpellUsable [classic|retail]",
    "\nDescription: Check if a spell is usable.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is usable, false otherwise./nfunction/nBANETO_IsSpellUsable/n(/n)/n"
  ],
  [
    "CanIBuffThisUnit [classic]",
    "\nDescription: Check if a specified unit can be buffed by the player.",
    "undefined--@arg unit: unit: The unit to be checked./n--@return: boolean: Returns true if the unit can be buffed, false otherwise./nfunction/nBANETO_CanIBuffThisUnit/n(/n)/n"
  ],
  [
    "FriendNeedsBuffScanner [classic]",
    "\nDescription: Scans whether a friend character needs buffing",
    "undefined--@return: boolean/nfunction/nBANETO_FriendNeedsBuffScanner/n(/n)/n"
  ],
  [
    "IsFriendGettingAttackedDungeon [classic]",
    "\nDescription: Checks if a friend is being attacked within a dungeon",
    "undefined--@return: boolean/nfunction/nBANETO_IsFriendGettingAttackedDungeon/n(/n)/n"
  ],
  [
    "SelectFriendLowHpDungeon [classic]",
    "\nDescription: Selects a friend with low HP within a dungeon",
    "undefined--@return: boolean/nfunction/nBANETO_SelectFriendLowHpDungeon/n(/n)/n"
  ],
  [
    "PlayerHasMana [classic]",
    "\nDescription: Checks if the player has sufficient mana",
    "undefined--@return: boolean/nfunction/nBANETO_PlayerHasMana/n(/n)/n"
  ],
  [
    "IsPlayerRooted [classic|retail]",
    "\nDescription: Checks if the player is rooted or unable to move",
    "undefined--@return: boolean/nfunction/nBANETO_IsPlayerRooted/n(/n)/n"
  ],
  [
    "UbrsThrowPull [classic]",
    "\nDescription: Initiates a ranged pull in UBRS at the specified coordinates within a certain radius",
    "undefined--@arg x: number/n--@arg y: number/n--@arg z: number/n--@arg radius: number/nfunction/nBANETO_UbrsThrowPull/n(/n,/n,/n,/n)/n"
  ],
  [
    "RangePullThrow [classic]",
    "\nDescription: Initiates a ranged pull throw",
    "undefinedfunction/nBANETO_RangePullThrow/n(/n)/n"
  ],
  [
    "NumAvailableRunesDk [classic|retail]",
    "\nDescription: Returns the number of available runes of a specific type for a Death Knight",
    "undefined--@arg runeType: string/n--@return: number/nfunction/nBANETO_NumAvailableRunesDk/n(/n)/n"
  ],
  [
    "GetCombatRange [classic|retail]",
    "\nDescription: Returns the combat range of the player",
    "undefined--@return: number/nfunction/nBANETO_GetCombatRange/n(/n)/n"
  ],
  [
    "ClearGuidBlacklist [classic|retail]",
    "\nDescription: Clears the GUID blacklist",
    "undefinedfunction/nBANETO_ClearGuidBlacklist/n(/n)/n"
  ],
  [
    "ClearGuidEngagedlist [classic|retail]",
    "\nDescription: Clears the GUID engaged list",
    "undefinedfunction/nBANETO_ClearGuidEngagedlist/n(/n)/n"
  ],
  [
    "AddMobToGuidBlacklist [classic|retail]",
    "\nDescription: Adds the specified unit to the GUID blacklist",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToGuidBlacklist/n(/n)/n"
  ],
  [
    "AddMobToPolymorphList [classic|retail]",
    "\nDescription: Adds the specified unit to the list of mobs to be polymorphed",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToPolymorphList/n(/n)/n"
  ],
  [
    "AddMobToPriestPainedList [classic|retail]",
    "\nDescription: Adds the specified unit to a list of pained units for a priest",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToPriestPainedList/n(/n)/n"
  ],
  [
    "AddMobToGuidGatheredList [classic|retail]",
    "\nDescription: Adds the specified unit to the GUID gathered list",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToGuidGatheredList/n(/n)/n"
  ],
  [
    "IsGuidContainedInGuidGatherlist [classic|retail]",
    "\nDescription: Checks if a GUID is in the gathered list",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInGuidGatherlist/n(/n)/n"
  ],
  [
    "DeleteEntryInGuidBlacklist [classic|retail]",
    "\nDescription: Deletes an entry in the GUID blacklist using the provided GUID",
    "undefined--@arg guid: string/nfunction/nBANETO_DeleteEntryInGuidBlacklist/n(/n)/n"
  ],
  [
    "IsGuidContainedInGuidBlacklist [classic|retail]",
    "\nDescription: Checks if a GUID is in the GUID blacklist",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInGuidBlacklist/n(/n)/n"
  ],
  [
    "IsGuidContainedInEngagedList [classic|retail]",
    "\nDescription: Checks if a GUID is in the engaged list",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInEngagedList/n(/n)/n"
  ],
  [
    "IsMobContainedInPolymorphedList [classic|retail]",
    "\nDescription: Checks if a mob is in the polymorphed list using its GUID",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsMobContainedInPolymorphedList/n(/n)/n"
  ],
  [
    "IsGuidContainedInPainedList [classic|retail]",
    "\nDescription: Checks if a GUID is in the pained list",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInPainedList/n(/n)/n"
  ],
  [
    "SetActiveCenterIndexDungeon [classic]",
    "\nDescription: Sets the active center index for a dungeon",
    "undefined--@arg arg: number/nfunction/nBANETO_SetActiveCenterIndexDungeon/n(/n)/n"
  ],
  [
    "GetActiveCenterIndexDungeon [classic]",
    "\nDescription: Gets the active center index for a dungeon",
    "undefined--@return: number/nfunction/nBANETO_GetActiveCenterIndexDungeon/n(/n)/n"
  ],
  [
    "GetActiveCenterIndex [classic|retail]",
    "\nDescription: Gets the active center index",
    "undefined--@return: number/nfunction/nBANETO_GetActiveCenterIndex/n(/n)/n"
  ],
  [
    "HasKeyInKeyRing [classic]",
    "\nDescription: Checks if a key exists in the keyring using its item ID",
    "undefined--@arg itemid: number/n--@return: boolean/nfunction/nBANETO_HasKeyInKeyRing/n(/n)/n"
  ],
  [
    "DeleteItemInKeyRing [classic]",
    "\nDescription: Deletes an item in the keyring using its item ID",
    "undefined--@arg itemid: number/nfunction/nBANETO_DeleteItemInKeyRing/n(/n)/n"
  ],
  [
    "DeleteItem [classic|retail]",
    "\nDescription: Deletes an item using its item ID",
    "undefined--@arg itemid: number/nfunction/nBANETO_DeleteItem/n(/n)/n"
  ],
  [
    "CustomUsageItems [classic|retail]",
    "\nDescription: Handles custom item usage",
    "undefinedfunction/nBANETO_CustomUsageItems/n(/n)/n"
  ],
  [
    "GetItemCooldown [classic|retail]",
    "\nDescription: Gets the cooldown of an item using its index",
    "undefined--@arg i: number/n--@return: number/nfunction/nGetItemCooldown/n(/n)/n"
  ],
  [
    "GetContainerItemLink [classic|retail]",
    "\nDescription: Gets the item link of an item in a container using the container and item indices",
    "undefined--@arg i: number/n--@arg z: number/n--@return: string/nfunction/nGetContainerItemLink/n(/n,/n)/n"
  ],
  [
    "GetContainerNumSlots [classic|retail]",
    "\nDescription: Gets the number of slots in a container using its index",
    "undefined--@arg i: number/n--@return: number/nfunction/nGetContainerNumSlots/n(/n)/n"
  ],
  [
    "GetContainerItemID [classic|retail]",
    "\nDescription: Gets the item ID of an item in a container using the container and item indices",
    "undefined--@arg i: number/n--@arg z: number/n--@return: number/nfunction/nGetContainerItemID/n(/n,/n)/n"
  ],
  [
    "GetContainerNumFreeSlots [classic|retail]",
    "\nDescription: Gets the number of free slots in a container using its index",
    "undefined--@arg i: number/n--@return: number/nfunction/nGetContainerNumFreeSlots/n(/n)/n"
  ],
  [
    "GetContainerItemInfo [classic|retail]",
    "\nDescription: Gets information about an item in a container using the container and item indices",
    "undefined--@arg i: number/n--@arg z: number/n--@return: table/nfunction/nGetContainerItemInfo/n(/n,/n)/n"
  ],
  [
    "DeleteCursorItem [classic|retail]",
    "\nDescription: Deletes the item currently on the cursor",
    "undefinedfunction/nBANETO_DeleteCursorItem/n(/n)/n"
  ],
  [
    "DeleteItems [classic|retail]",
    "\nDescription: Deletes items based on predefined rules",
    "undefinedfunction/nBANETO_DeleteItems/n(/n)/n"
  ],
  [
    "SetSettingString [classic|retail]",
    "\nDescription: Sets a setting string to a specific value. Can be found in player settings .lua file in settings folders.",
    "undefined--@arg settingname: string/n--@arg value: string/nfunction/nBANETO_SetSettingString/n(/n,/n)/n"
  ],
  [
    "IsSomeoneTargetingUs [classic|retail]",
    "\nDescription: Checks if the player is being targeted by someone",
    "undefined--@return: boolean/nfunction/nBANETO_IsSomeoneTargetingUs/n(/n)/n"
  ],
  [
    "SecondsUntilWowClose [classic|retail]",
    "\nDescription: Gets the time in seconds until the WoW client is closed",
    "undefined--@return: number/nfunction/nBANETO_SecondsUntilWowClose/n(/n)/n"
  ],
  [
    "IsFullyLoaded [classic|retail]",
    "\nDescription: Checks if the WoW client is fully loaded",
    "undefined--@return: boolean/nfunction/nBANETO_IsFullyLoaded/n(/n)/n"
  ],
  [
    "SetSettingBool [classic|retail]",
    "\nDescription: Sets a setting boolean to a specific value",
    "undefined--@arg settingname: string/n--@arg value: boolean/nfunction/nBANETO_SetSettingBool/n(/n,/n)/n"
  ],
  [
    "IsFaultySkinMob [classic]",
    "\nDescription: Checks if the mob is actually a gather mob instead of skinnable.",
    "undefined--@arg mobid: object/n--@return: boolean/nfunction/nBANETO_IsFaultySkinMob/n(/n)/n"
  ],
  [
    "PestilenceCheck [classic]",
    "\nDescription: Checks if Pestilence is active.",
    "undefined--@return: boolean/nfunction/nBANETO_PestilenceCheck/n(/n)/n"
  ],
  [
    "GetQuestStepProgression [classic|retail]",
    "\nDescription: Gets the progression of a specific step of a quest.",
    "undefined--@arg questId: number/n--@arg step: number/n--@return: progression/nfunction/nBANETO_GetQuestStepProgression/n(/n,/n)/n"
  ],
  [
    "FindClosestBatlemaster [classic]",
    "\nDescription: Finds the closest battle master.",
    "undefined--@arg isMultiQueue: boolean/n--@return: batlemaster/nfunction/nBANETO_FindClosestBatlemaster/n(/n)/n"
  ],
  [
    "MillOrProspect [classic]",
    "\nDescription: Mills or prospects an item.",
    "undefined--@arg whichOne: string/n--@arg item: string/n--@return: void/nfunction/nBANETO_MillOrProspect/n(/n,/n)/n"
  ],
  [
    "IsProspectingItem [classic]",
    "\nDescription: Checks if an item is prospectable.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsProspectingItem/n(/n)/n"
  ],
  [
    "IsMillingItem [classic]",
    "\nDescription: Checks if an item is millable.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsMillingItem/n(/n)/n"
  ],
  [
    "IsMillOrProspectItemBlacklisted [classic]",
    "\nDescription: Checks if an item is blacklisted for milling or prospecting.",
    "undefined--@arg itemid: number/n--@return: boolean/nfunction/nBANETO_IsMillOrProspectItemBlacklisted/n(/n)/n"
  ],
  [
    "CanMillOrProspect [classic]",
    "\nDescription: Checks if the current state allows milling or prospecting.",
    "undefined--@return: boolean/nfunction/nBANETO_CanMillOrProspect/n(/n)/n"
  ],
  [
    "IsCraftingStateNeeded [classic]",
    "\nDescription: Checks if crafting state is needed.",
    "undefined--@return: boolean/nfunction/nBANETO_IsCraftingStateNeeded/n(/n)/n"
  ],
  [
    "IsMovementSlowedByDebuff [classic]",
    "\nDescription: Checks if movement is slowed by debuff.",
    "undefined--@return: boolean/nfunction/nBANETO_IsMovementSlowedByDebuff/n(/n)/n"
  ],
  [
    "LoadSettings [classic|retail]",
    "\nDescription: Loads settings.",
    "undefined--@return: void/nfunction/nBANETO_LoadSettings/n(/n)/n"
  ],
  [
    "DefineMailRecipient [classic|retail]",
    "\nDescription: Defines the recipient of a mail.",
    "undefined--@arg name: string/n--@return: void/nfunction/nBANETO_DefineMailRecipient/n(/n)/n"
  ],
  [
    "GetMailRecipient [classic|retail]",
    "\nDescription: Gets the mail recipient.",
    "undefined--@return: string/nfunction/nBANETO_GetMailRecipient/n(/n)/n"
  ],
  [
    "LoadDungeonProfileFromBackend [classic]",
    "\nDescription: Loads a Dungeon profile from backend.",
    "undefined--@arg profilename: string/n--@return: void/nfunction/nBANETO_LoadDungeonProfileFromBackend/n(/n)/n"
  ],
  [
    "ExecuteCustomDungeonPulse [classic]",
    "\nDescription: Executes custom Dungeon pulse.",
    "undefined--@return: void/nfunction/nBANETO_ExecuteCustomDungeonPulse/n(/n)/n"
  ],
  [
    "ExportItemDeletionList [classic]",
    "\nDescription: Exports the list of items to be deleted.",
    "undefined--@return: table/nfunction/nBANETO_ExportItemDeletionList/n(/n)/n"
  ],
  [
    "ExportSellingBlacklists [classic]",
    "\nDescription: Exports the blacklists for selling items.",
    "undefined--@return: table/nfunction/nBANETO_ExportSellingBlacklists/n(/n)/n"
  ],
  [
    "ExportIdBlacklists [classic]",
    "\nDescription: Exports the blacklists of item IDs.",
    "undefined--@return: table/nfunction/nBANETO_ExportIdBlacklists/n(/n)/n"
  ],
  [
    "ExportCustomWorldObjects [classic|retail]",
    "\nDescription: Exports the list of custom World Objects.",
    "undefined--@return: table/nfunction/nBANETO_ExportCustomWorldObjects/n(/n)/n"
  ],
  [
    "ExportNeverMailList [classic|retail]",
    "\nDescription: Exports the list of items never to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ExportNeverMailList/n(/n)/n"
  ],
  [
    "ExportAlwaysMailList [classic|retail]",
    "\nDescription: Exports the list of items always to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ExportAlwaysMailList/n(/n)/n"
  ],
  [
    "ExportNeverDisenchant [classic|retail]",
    "\nDescription: Exports the list of items never to be disenchanted.",
    "undefined--@return: table/nfunction/nBANETO_ExportNeverDisenchant/n(/n)/n"
  ],
  [
    "ExportUsageItems [classic|retail]",
    "\nDescription: Exports the list of items for usage.",
    "undefined--@return: table/nfunction/nBANETO_ExportUsageItems/n(/n)/n"
  ],
  [
    "ExportGuildbankItems [classic|retail]",
    "\nDescription: Exports the list of items for the guild bank.",
    "undefined--@return: table/nfunction/nBANETO_ExportGuildbankItems/n(/n)/n"
  ],
  [
    "ExportAreaBlacklists [classic|retail]",
    "\nDescription: Exports the blacklist of areas.",
    "undefined--@return: table/nfunction/nBANETO_ExportAreaBlacklists/n(/n)/n"
  ],
  [
    "ExportTravelpoints [classic|retail]",
    "\nDescription: Exports the list of travel points.",
    "undefined--@return: table/nfunction/nBANETO_ExportTravelpoints/n(/n)/n"
  ],
  [
    "ImportItemDeletionList [classic]",
    "\nDescription: Imports the list of items to be deleted.",
    "undefined--@return: table/nfunction/nBANETO_ImportItemDeletionList/n(/n)/n"
  ],
  [
    "ImportSellingBlacklists [classic|retail]",
    "\nDescription: Imports the blacklists for selling items.",
    "undefined--@return: table/nfunction/nBANETO_ImportSellingBlacklists/n(/n)/n"
  ],
  [
    "ExportUnstuckRoutes [classic|retail]",
    "\nDescription: Exports the unstuck routes.",
    "undefined--@return: table/nfunction/nBANETO_ExportUnstuckRoutes/n(/n)/n"
  ],
  [
    "ImportUnstuckRoutes [classic|retail]",
    "\nDescription: Imports the unstuck routes.",
    "undefined--@return: table/nfunction/nBANETO_ImportUnstuckRoutes/n(/n)/n"
  ],
  [
    "ImportUnstuckRoute [classic|retail]",
    "\nDescription: Imports an unstuck route with specified coordinates and trigger radius.",
    "undefined--@arg index: number/n--@arg x: number/n--@arg y: number/n--@arg z: number/n--@arg radiusTrigger: number/n--@return: void/nfunction/nBANETO_ImportUnstuckRoute/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "ImportIdBlacklists [classic|retail]",
    "\nDescription: Imports the blacklists of item IDs.",
    "undefined--@return: table/nfunction/nBANETO_ImportIdBlacklists/n(/n)/n"
  ],
  [
    "ImportAreaBlacklists [classic|retail]",
    "\nDescription: Imports the blacklist of areas.",
    "undefined--@return: table/nfunction/nBANETO_ImportAreaBlacklists/n(/n)/n"
  ],
  [
    "ImportTravelpoints [classic|retail]",
    "\nDescription: Imports the list of travel points.",
    "undefined--@return: table/nfunction/nBANETO_ImportTravelpoints/n(/n)/n"
  ],
  [
    "ImportCustomWorldObjects [classic|retail]",
    "\nDescription: Imports the list of custom World Objects.",
    "undefined--@return: table/nfunction/nBANETO_ImportCustomWorldObjects/n(/n)/n"
  ],
  [
    "ImportNeverMail [classic|retail]",
    "\nDescription: Imports the list of items never to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ImportNeverMail/n(/n)/n"
  ],
  [
    "ImportAlwaysMail [classic|retail]",
    "\nDescription: Imports the list of items always to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ImportAlwaysMail/n(/n)/n"
  ],
  [
    "ImportNeverDisenchant [classic|retail]",
    "\nDescription: Imports the list of items never to be disenchanted.",
    "undefined--@return: table/nfunction/nBANETO_ImportNeverDisenchant/n(/n)/n"
  ],
  [
    "ImportUsageItems [classic|retail]",
    "\nDescription: Imports the list of items for usage.",
    "undefined--@return: table/nfunction/nBANETO_ImportUsageItems/n(/n)/n"
  ],
  [
    "ImportGuilbankItems [classic|retail]",
    "\nDescription: Imports the list of items for the guild bank.",
    "undefined--@return: table/nfunction/nBANETO_ImportGuilbankItems/n(/n)/n"
  ],
  [
    "SCAN_FISHINGSWARMS [classic|retail]",
    "\nDescription: Scans for fishing swarms.",
    "undefined--@return: void/nfunction/nBANETO_SCAN_FISHINGSWARMS/n(/n)/n"
  ],
  [
    "GetCountGatherNode [classic|retail]",
    "\nDescription: Returns the count of gathered nodes.",
    "undefined--@return: number/nfunction/nBANETO_GetCountGatherNode/n(/n)/n"
  ],
  [
    "MissionControlInvString [classic|retail]",
    "\nDescription: Returns the inventory string from the Mission Control.",
    "undefined--@return: string/nfunction/nBANETO_MissionControlInvString/n(/n)/n"
  ],
  [
    "SendChatMessage [classic|retail]",
    "\nDescription: Sends a chat message through a specified channel in a certain language to a particular recipient.",
    "undefined--@arg chatmessage: string _ The message to send./n--@arg channel: string _ The chat channel to send the message to./n--@arg language: string _ The language in which to send the message./n--@arg recipient: string _ The recipient of the message./n--@return: None/nfunction/nBANETO_SendChatMessage/n(/n,/n,/n,/n)/n"
  ],
  [
    "McAction [classic|retail]",
    "\nDescription: Executes an action with the given argument in the game's mission control.",
    "undefined--@arg action: string _ The action to execute./n--@arg actionArg: string _ The argument for the action./n--@return: None/nfunction/nBANETO_McAction/n(/n,/n)/n"
  ],
  [
    "AddRecipientToFl [classic|retail]",
    "\nDescription: Adds a recipient to a friend list.",
    "undefined--@return: None/nfunction/nBANETO_AddRecipientToFl/n(/n)/n"
  ],
  [
    "FindBestSwarmLanding [classic|retail]",
    "\nDescription: Finds the best landing spot within the given swarm.",
    "undefined--@arg swarm: table _ The swarm to search./n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_FindBestSwarmLanding/n(/n)/n"
  ],
  [
    "IsFishingSwarm [classic|retail]",
    "\nDescription: Checks if the given ID corresponds to a fishing swarm.",
    "undefined--@arg id: number _ The ID to check./n--@return: boolean _ Whether the ID corresponds to a fishing swarm./nfunction/nBANETO_IsFishingSwarm/n(/n)/n"
  ],
  [
    "CheckNinjaGather [classic]",
    "\nDescription: Checks if a ninja gather attempt should be made.",
    "undefined--@return: boolean _ Whether a ninja gather should be attempted./nfunction/nBANETO_CheckNinjaGather/n(/n)/n"
  ],
  [
    "UnitCastingInfo [classic|retail]",
    "\nDescription: Retrieves information about a unit's casting status.",
    "undefined--@arg unit: string _ The unit or object/n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_UnitCastingInfo/n(/n)/n"
  ],
  [
    "UnitChannelInfo [classic|retail]",
    "\nDescription: Retrieves information about a unit's channeling status.",
    "undefined--@arg unit: string _ The unit or object/n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_UnitChannelInfo/n(/n)/n"
  ],
  [
    "DefineMailbox [classic]",
    "\nDescription: Defines a mailbox.",
    "undefined--@return: None/nfunction/nBANETO_DefineMailbox/n(/n)/n"
  ],
  [
    "SettingsCorrupted [classic|retail]",
    "\nDescription: Checks if the settings are corrupted.",
    "undefined--@return: boolean _ Whether the settings are corrupted./nfunction/nBANETO_SettingsCorrupted/n(/n)/n"
  ],
  [
    "CreateLfgListing [classic|retail]",
    "\nDescription: Creates an LFG listing with the given parameters.",
    "undefined--@arg activityID: number _ The ID of the activity./n--@arg itemLevel: number _ The minimum required item level./n--@arg honorLevel: number _ The minimum required honor level./n--@arg autoAccept: boolean _ Whether to automatically accept join requests./n--@arg privateGroup: boolean _ Whether the group is private./n--@arg questID: number _ The ID of the quest associated with the group./n--@return: None/nfunction/nBANETO_CreateLfgListing/n(/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "GetSetting [classic|retail]",
    "\nDescription: Retrieves a setting's value from the character's config file.",
    "undefined--@arg settingname: string _ The name of the setting to retrieve./n--@return: Unknown _ The value of the setting./nfunction/nBANETO_GetSetting/n(/n)/n"
  ],
  [
    "CacheSettings [classic|retail]",
    "\nDescription: Caches settings to a specified path.",
    "undefined--@arg path: string _ The path to cache the settings to./n--@arg string: string _ The settings to cache./n--@arg append: boolean _ Whether to append the settings or overwrite existing ones./n--@return: None/nfunction/nBANETO_CacheSettings/n(/n,/n,/n)/n"
  ],
  [
    "IsInsideNode [classic|retail]",
    "\nDescription: Checks if an object is inside a node.",
    "undefined--@arg object: string _ The ID of the object to check./n--@return: boolean _ Whether the object is inside a node./nfunction/nBANETO_IsInsideNode/n(/n)/n"
  ],
  [
    "SaveSettings [classic|retail]",
    "\nDescription: Saves the settings.",
    "undefined--@return: None/nfunction/nBANETO_SaveSettings/n(/n)/n"
  ],
  [
    "IsFightBlockedByQuester [classic|retail]",
    "\nDescription: Checks if a fight is blocked by a quester.",
    "undefined--@return: boolean _ Whether the fight is blocked./nfunction/nBANETO_IsFightBlockedByQuester/n(/n)/n"
  ],
  [
    "IsFleeNeeded [classic|retail]",
    "\nDescription: Checks if the character needs to flee.",
    "undefined--@return: boolean _ Whether the character needs to flee./nfunction/nBANETO_IsFleeNeeded/n(/n)/n"
  ],
  [
    "DkPvpBurst [classic]",
    "\nDescription: Executes a burst of PvP actions for a Death Knight.",
    "undefined--@return: None/nfunction/nDkPvpBurst/n(/n)/n"
  ],
  [
    "CastSpell [classic|retail]",
    "\nDescription: Casts a spell with the given ID, with the option to cast it while moving and on a specific target.",
    "undefined--@arg spellid: number _ The ID of the spell to cast./n--@arg canMove: boolean _ Whether the spell can be cast while moving./n--@arg target: string _ The ID of the target to cast the spell on./n--@return: None/nfunction/nBANETO_CastSpell/n(/n,/n,/n)/n"
  ],
  [
    "SurviveSpellsCast [classic|retail]",
    "\nDescription: Casts survival spells.",
    "undefined--@return: None/nfunction/nBANETO_SurviveSpellsCast/n(/n)/n"
  ],
  [
    "SurviveSpellsAllowed [classic|retail]",
    "\nDescription: Checks if survival spells are allowed.",
    "undefined--@return: boolean _ Whether survival spells are allowed./nfunction/nBANETO_SurviveSpellsAllowed/n(/n)/n"
  ],
  [
    "FishingLogic [classic]",
    "\nDescription: Executes the fishing logic.",
    "undefined--@return: None/nfunction/nBANETO_FishingLogic/n(/n)/n"
  ],
  [
    "DefineAllowSwarmFishing [classic]",
    "\nDescription: Defines whether swarm fishing is allowed.",
    "undefined--@arg bool: boolean _ Whether swarm fishing is allowed./n--@return: None/nfunction/nBANETO_DefineAllowSwarmFishing/n(/n)/n"
  ],
  [
    "DefineFishingSwarm [classic]",
    "\nDescription: Defines a fishing swarm.",
    "undefined--@arg id: number _ The ID of the swarm./n--@return: None/nfunction/nBANETO_DefineFishingSwarm/n(/n)/n"
  ],
  [
    "LoadFishy [classic|retail]",
    "\nDescription: Loads the fishing functionality for the given type of fish.",
    "undefined--@arg typeFish: string _ The type of fish to fish./n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_LoadFishy/n(/n)/n"
  ],
  [
    "IsStateBlockedDueToSlaveBusy [classic]",
    "\nDescription: Checks whether the current state is blocked due to the \"slave\" character being busy.",
    "undefined--@return: boolean _ Whether the current state is blocked./nfunction/nBANETO_IsStateBlockedDueToSlaveBusy/n(/n)/n"
  ],
  [
    "Interact [classic|retail]",
    "\nDescription: Interacts with the given unit.",
    "undefined--@arg unit: string _ The ID of the unit to interact with./n--@return: None/nfunction/nBANETO_Interact/n(/n)/n"
  ],
  [
    "InteractNoDelay [classic|retail]",
    "\nDescription: Interacts with the given unit, without any delay.",
    "undefined--@arg unit: string _ The ID of the unit to interact with./n--@return: None/nfunction/nBANETO_InteractNoDelay/n(/n)/n"
  ],
  [
    "WMB_BobberCheck [classic|retail]",
    "\nDescription: Checks whether the given object is a bobber.",
    "undefined--@arg object: string _ The ID of the object to check./n--@return: boolean _ Whether the object is a bobber./nfunction/nBANETO_WMB_BobberCheck/n(/n)/n"
  ],
  [
    "SlopeJumper [classic|retail]",
    "\nDescription: Activates the slope jumping feature.",
    "undefined--@return: None/nfunction/nBANETO_SlopeJumper/n(/n)/n"
  ],
  [
    "GetObjctsTkr [classic|retail]",
    "\nDescription: Retrieves the objects tracker.",
    "undefined--@return: table of objects/nfunction/nBANETO_GetObjctsTkr/n(/n)/n"
  ],
  [
    "InteractWithBobber [classic|retail]",
    "\nDescription: Interacts with the bobber.",
    "undefined--@return: None/nfunction/nBANETO_InteractWithBobber/n(/n)/n"
  ],
  [
    "GetBobberPosition [classic|retail]",
    "\nDescription: Retrieves the position of the bobber.",
    "undefined--@return: table _ The position of the bobber (x, y, z)./nfunction/nBANETO_GetBobberPosition/n(/n)/n"
  ],
  [
    "GetBobberState [classic|retail]",
    "\nDescription: Retrieves the state of the bobber.",
    "undefined--@return: true if its splashing, false if its not ready yet/nfunction/nBANETO_GetBobberState/n(/n)/n"
  ],
  [
    "AttemptCombatLooting [classic|retail]",
    "\nDescription: Attempts to loot during combat.",
    "undefined--@return: None/nfunction/nBANETO_AttemptCombatLooting/n(/n)/n"
  ],
  [
    "SetSettingInt [classic|retail]",
    "\nDescription: Sets a setting boolean to a specific value. Can be found in player settings .lua file in settings folders.",
    "undefined--@arg settingname: string _ The name of the setting./n--@arg value: number _ The new value for the setting./n--@return: None/nfunction/nBANETO_SetSettingInt/n(/n,/n)/n"
  ],
  [
    "CancelBuffIceBlock [classic]",
    "\nDescription: Cancels the Ice Block buff.",
    "undefined--@return: None/nfunction/nCancelBuffIceBlock/n(/n)/n"
  ],
  [
    "StartCancelAllBuffs [classic]",
    "\nDescription: Starts the process of canceling all buffs.",
    "undefined--@return: None/nfunction/nStartCancelAllBuffs/n(/n)/n"
  ],
  [
    "CancelBuff [classic]",
    "\nDescription: Cancels a buff with the given ID.",
    "undefined--@arg id: number _ The ID of the buff to cancel./n--@return: None/nfunction/nCancelBuff/n(/n)/n"
  ],
  [
    "DisableMeshCheckNn [classic|retail]",
    "\nDescription: Disables the check for mesh (navigation mesh).",
    "undefined--@return: None/nfunction/nBANETO_DisableMeshCheckNn/n(/n)/n"
  ],
  [
    "CheckMeshNn [classic]",
    "\nDescription: Checks the mesh (navigation mesh).",
    "undefined--@return: boolean _ Whether the check was successful./nfunction/nBANETO_CheckMeshNn/n(/n)/n"
  ],
  [
    "UsePoison [classic|retail]",
    "\nDescription: Uses a poison with the given ID.",
    "undefined--@arg itemid: number _ The ID of the poison to use./n--@return: None/nfunction/nBANETO_UsePoison/n(/n)/n"
  ],
  [
    "UsePetFeedItem [classic|retail]",
    "\nDescription: Uses a pet feed item.",
    "undefined--@return: None/nfunction/nBANETO_UsePetFeedItem/n(/n)/n"
  ],
  [
    "GetTargetId [classic|retail]",
    "\nDescription: Retrieves the ID of the current target.",
    "undefined--@return: string _ The ID of the current target./nfunction/nBANETO_GetTargetId/n(/n)/n"
  ],
  [
    "ObjectCreator [classic|retail]",
    "\nDescription: Returns the creator or summoner of the object",
    "undefined--@arg obj: string _ The object to check who summoned it./n--@return: object or nil/nfunction/nBANETO_ObjectCreator/n(/n)/n"
  ],
  [
    "IsPetLuabox [classic|retail]",
    "\nDescription: Checks whether the given unit ID corresponds to a pet.",
    "undefined--@arg unitId: object/n--@return: boolean _ Whether the unit is a pet./nfunction/nBANETO_IsPetLuabox/n(/n)/n"
  ],
  [
    "MageConeAngleCheck [classic]",
    "\nDescription: Performs a check related to the cone angle for a mage character.",
    "undefined--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_MageConeAngleCheck/n(/n)/n"
  ],
  [
    "HasPetFeedItem [classic|retail]",
    "\nDescription: Checks whether the character's pet has a feed item.",
    "undefined--@return: boolean _ Whether the pet has a feed item./nfunction/nBANETO_HasPetFeedItem/n(/n)/n"
  ],
  [
    "HideInterface [classic|retail]",
    "\nDescription: Hides the game interface.",
    "undefined--@return: None/nfunction/nBANETO_HideInterface/n(/n)/n"
  ],
  [
    "ShowInterface [classic|retail]",
    "\nDescription: Shows the game interface.",
    "undefined--@return: None/nfunction/nBANETO_ShowInterface/n(/n)/n"
  ],
  [
    "UseItem [classic|retail]",
    "\nDescription: Uses an item, with an optional dismount.",
    "undefined--@arg itemid: number _ The ID of the item to use./n--@arg needsdismount: boolean _ Whether to dismount before using the item./n--@return: None/nfunction/nBANETO_UseItem/n(/n,/n)/n"
  ],
  [
    "GetProfessionSkill [classic|retail]",
    "\nDescription: Gets the skill level of a given profession.",
    "undefined--@arg name: string _ The name of the profession to check./n--@return: number _ The skill level of the profession./nfunction/nBANETO_GetProfessionSkill/n(/n)/n"
  ],
  [
    "FindFlyMountInBags [classic]",
    "\nDescription: Searches for a flying mount in the player's bags.",
    "undefined--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_FindFlyMountInBags/n(/n)/n"
  ],
  [
    "FindMountInBags [classic|retail]",
    "\nDescription: Searches for a mount in the player's bags.",
    "undefined--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_FindMountInBags/n(/n)/n"
  ],
  [
    "ClearUnstuckTriggerCache [classic|retail]",
    "\nDescription: Clears the cache of unstuck triggers.",
    "undefined--@return: None/nfunction/nBANETO_ClearUnstuckTriggerCache/n(/n)/n"
  ],
  [
    "CheckUnstuckTriggers [classic|retail]",
    "\nDescription: Checks the unstuck triggers.",
    "undefined--@return: None/nfunction/nBANETO_CheckUnstuckTriggers/n(/n)/n"
  ],
  [
    "CancelRecordingUnstuckRoute [classic|retail]",
    "\nDescription: Cancels the recording of an unstuck route.",
    "undefined--@return: None/nfunction/nBANETO_CancelRecordingUnstuckRoute/n(/n)/n"
  ],
  [
    "SaveUnstuckRoute [classic|retail]",
    "\nDescription: Saves the recorded unstuck route.",
    "undefined--@return: None/nfunction/nBANETO_SaveUnstuckRoute/n(/n)/n"
  ],
  [
    "DeleteLastUnstuckSpot [classic|retail]",
    "\nDescription: Deletes the last recorded unstuck spot.",
    "undefined--@return: None/nfunction/nBANETO_DeleteLastUnstuckSpot/n(/n)/n"
  ],
  [
    "DefineProfileUnstuck [classic|retail]",
    "\nDescription: Defines a new unstuck location for a profile.",
    "undefined--@arg unstuckid: number _ Identifier for the unstuck location./n--@arg x: number _ The x_coordinate for the unstuck location./n--@arg y: number _ The y_coordinate for the unstuck location./n--@arg z: number _ The z_coordinate for the unstuck location./n--@arg radiusTrigger: number _ The radius in which the unstuck location triggers./n--@return: None/nfunction/nBANETO_DefineProfileUnstuck/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "DefineUnstuck [classic|retail]",
    "\nDescription: Defines a new unstuck location.",
    "undefined--@arg unstuckid: number _ Identifier for the unstuck location./n--@arg x: number _ The x_coordinate for the unstuck location./n--@arg y: number _ The y_coordinate for the unstuck location./n--@arg z: number _ The z_coordinate for the unstuck location./n--@arg radiusTrigger: number _ The radius in which the unstuck location triggers./n--@return: None/nfunction/nBANETO_DefineUnstuck/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "RecordNewUnstuckSpot [classic|retail]",
    "\nDescription: Records a new unstuck spot at the current player's location.",
    "undefined--@return: None/nfunction/nBANETO_RecordNewUnstuckSpot/n(/n)/n"
  ],
  [
    "DeleteLastUnstuckRoute [classic|retail]",
    "\nDescription: Deletes the last recorded unstuck route.",
    "undefined--@return: None/nfunction/nBANETO_DeleteLastUnstuckRoute/n(/n)/n"
  ],
  [
    "RecordNewUnstuckRoute [classic|retail]",
    "\nDescription: Records a new unstuck route based on the player's current movement.",
    "undefined--@return: None/nfunction/nBANETO_RecordNewUnstuckRoute/n(/n)/n"
  ],
  [
    "lerp [classic|retail]",
    "\nDescription: Returns a number between two numbers at a specific increment.",
    "undefined--@arg a: number _ Starting number./n--@arg b: number _ Ending number./n--@arg x: number _ The increment./n--@return: number _ The interpolated value./nfunction/nlerp/n(/n,/n,/n)/n"
  ],
  [
    "lerp2 [classic|retail]",
    "\nDescription: Returns a number between two numbers at a specific increment, within a certain range.",
    "undefined--@arg t: number _ Starting number./n--@arg b: number _ Ending number./n--@arg c: number _ The increment./n--@arg d: number _ The range within which to interpolate./n--@return: number _ The interpolated value./nfunction/nlerp2/n(/n,/n,/n,/n)/n"
  ],
  [
    "FaceDirectionSmooth [classic|retail]",
    "\nDescription: Makes the player character smoothly turn to a specified angle.",
    "undefined--@arg angle: number _ The angle to turn to, in degrees./n--@return: None/nfunction/nBANETO_FaceDirectionSmooth/n(/n)/n"
  ],
  [
    "FaceDirection [classic|retail]",
    "\nDescription: Makes the player character turn to a specified angle.",
    "undefined--@arg angle: number _ The angle to turn to, in degrees./n--@arg bool: boolean _ Whether to turn smoothly or not./n--@return: None/nfunction/nFaceDirection/n(/n,/n)/n"
  ],
  [
    "ObjectExists [classic|retail]",
    "\nDescription: Checks whether the specified object exists.",
    "undefined--@arg obj: string _ The ID of the object to check./n--@return: boolean _ Whether the object exists./nfunction/nBANETO_ObjectExists/n(/n)/n"
  ],
  [
    "GePlayerAngle [classic|retail]",
    "\nDescription: Gets the player's current angle, in radians.",
    "undefined--@return: number _ The player's current angle, in radians./nfunction/nBANETO_GePlayerAngle/n(/n)/n"
  ],
  [
    "BlockSmoothTurn [classic|retail]",
    "\nDescription: Blocks the player character from turning smoothly for a specified duration.",
    "undefined--@arg seconds: number _ The number of seconds to block smooth turning./n--@return: None/nfunction/nBANETO_BlockSmoothTurn/n(/n)/n"
  ],
  [
    "SetPlayerAnglesLuabox [classic|retail]",
    "\nDescription: Sets the player character's angle to a specified value.",
    "undefined--@arg angle: number _ The angle to set, in radians./n--@return: None/nfunction/nBANETO_SetPlayerAnglesLuabox/n(/n)/n"
  ],
  [
    "RunMacro [classic|retail]",
    "\nDescription: Runs a specified macro.",
    "undefined--@arg macroname: string _ The name of the macro to run./n--@return: None/nfunction/nBANETO_RunMacro/n(/n)/n"
  ],
  [
    "RunMacroText [classic|retail]",
    "\nDescription: Executes the macro defined by the given text.",
    "undefined--@arg text: string _ The macro text to execute./n--@return: None/nfunction/nBANETO_RunMacroText/n(/n)/n"
  ],
  [
    "lbrs_jumpOnLedge [classic]",
    "\nDescription: Executes a specific jumping sequence for lbrs on ledge.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_jumpOnLedge/n(/n)/n"
  ],
  [
    "lbrs_jumpOnSpike [classic]",
    "\nDescription: Executes a specific jumping sequence for lbrs on spike.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_jumpOnSpike/n(/n)/n"
  ],
  [
    "lbrs_activate [classic]",
    "\nDescription: Activates a certain token in lbrs.",
    "undefined--@arg token: string _ The token to activate./n--@return: None/nfunction/nBANETO_lbrs_activate/n(/n)/n"
  ],
  [
    "SitStandOrDescendStart [classic|retail]",
    "\nDescription: Toggles between sitting, standing, and descending based on the provided info.",
    "undefined--@arg info: string _ The action to execute (sit, stand, descend)./n--@return: None/nfunction/nBANETO_SitStandOrDescendStart/n(/n)/n"
  ],
  [
    "MoveBackwardStart [classic|retail]",
    "\nDescription: Starts the character moving backward.",
    "undefined--@return: None/nfunction/nBANETO_MoveBackwardStart/n(/n)/n"
  ],
  [
    "MoveBackwardStop [classic|retail]",
    "\nDescription: Stops the character moving backward.",
    "undefined--@return: None/nfunction/nBANETO_MoveBackwardStop/n(/n)/n"
  ],
  [
    "AscendStop [classic|retail]",
    "\nDescription: Stops ascending.",
    "undefined--@return: None/nfunction/nBANETO_AscendStop/n(/n)/n"
  ],
  [
    "DescendStop [classic|retail]",
    "\nDescription: Stops descending.",
    "undefined--@return: None/nfunction/nBANETO_DescendStop/n(/n)/n"
  ],
  [
    "JumpOrAscendStart [classic|retail]",
    "\nDescription: Starts jumping or ascending based on the provided info.",
    "undefined--@arg info: string _ The action to execute (jump, ascend)./n--@return: None/nfunction/nBANETO_JumpOrAscendStart/n(/n)/n"
  ],
  [
    "lbrs_ManipulatePath [classic]",
    "\nDescription: Manipulates the path for lbrs.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_ManipulatePath/n(/n)/n"
  ],
  [
    "SetWaPathToNilAndBufferToNil [classic|retail]",
    "\nDescription: Sets both the WA path and the buffer to nil.",
    "undefined--@return: None/nfunction/nBANETO_SetWaPathToNilAndBufferToNil/n(/n)/n"
  ],
  [
    "SetCenterIndexTo1 [classic|retail]",
    "\nDescription: Sets the center index of the path to 1.",
    "undefined--@return: None/nfunction/nBANETO_SetCenterIndexTo1/n(/n)/n"
  ],
  [
    "SetWaPathNil [classic|retail]",
    "\nDescription: Sets the WA path to nil.",
    "undefined--@arg fromWhere: string _ Information about the source or reason for the path to be set to nil./n--@return: None/nfunction/nBANETO_SetWaPathNil/n(/n)/n"
  ],
  [
    "lbrs_EnterPortal [classic]",
    "\nDescription: Triggers the sequence to enter the portal in LBRS.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_EnterPortal/n(/n)/n"
  ],
  [
    "lbrs_LeavePortal [classic]",
    "\nDescription: Triggers the sequence to leave the portal in LBRS.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_LeavePortal/n(/n)/n"
  ],
  [
    "TestPathProblem [classic]",
    "\nDescription: Runs a test to identify any issues with the current path.",
    "undefined--@return: None/nfunction/nBANETO_TestPathProblem/n(/n)/n"
  ],
  [
    "TestPathProblem2 [classic]",
    "\nDescription: Runs a second test to identify any issues with the current path.",
    "undefined--@return: None/nfunction/nBANETO_TestPathProblem2/n(/n)/n"
  ],
  [
    "BrickMovement [classic]",
    "\nDescription: Stops the player character's movement, forcing them to stay in place.",
    "undefined--@return: None/nfunction/nBANETO_BrickMovement/n(/n)/n"
  ],
  [
    "Logout [classic|retail]",
    "\nDescription: Logs out the player character from the game.",
    "undefined--@return: None/nfunction/nBANETO_Logout/n(/n)/n"
  ],
  [
    "UnitTarget [classic|retail]",
    "\nDescription: Returns the target of the specified unit.",
    "undefined--@arg obj: the object of which we want to know the target/n--@return: object (the target of obj)/nfunction/nBANETO_UnitTarget/n(/n)/n"
  ],
  [
    "TappedTest [classic]",
    "\nDescription: Checks if the current target is tapped.",
    "undefined--@return: boolean _ True if the target is tapped, false otherwise./nfunction/nBANETO_TappedTest/n(/n)/n"
  ],
  [
    "TappedCheck [classic|retail]",
    "\nDescription: Checks and returns if the current target is tapped by the player or their group.",
    "undefined--@return: boolean _ True if the target is tapped by the player or their group, false otherwise./nfunction/nBANETO_TappedCheck/n(/n)/n"
  ],
  [
    "SetCurrentCenterIndex [classic|retail]",
    "\nDescription: Sets the current index for a certain center UI element (like action bars).",
    "undefined--@arg arg: number _ The index to set./n--@return: None/nfunction/nBANETO_SetCurrentCenterIndex/n(/n)/n"
  ],
  [
    "BodypullCheck [classic|retail]",
    "\nDescription: Checks if the player's body is pulled by a mob.",
    "undefined--@return: boolean _ True if body is being pulled, false otherwise./nfunction/nBANETO_BodypullCheck/n(/n)/n"
  ],
  [
    "JsonEncode [classic|retail]",
    "\nDescription: Converts a LUA table or value into a JSON_encoded string.",
    "undefined--@arg obj: table or value _ The LUA table or value to encode./n--@return: string _ The JSON_encoded string./nfunction/nBANETO_JsonEncode/n(/n)/n"
  ],
  [
    "JsonDecode [classic|retail]",
    "\nDescription: Decodes a JSON_encoded string into a LUA table.",
    "undefined--@arg string: string _ The JSON_encoded string to decode./n--@return: table _ The LUA table decoded from the JSON string./nfunction/nBANETO_JsonDecode/n(/n)/n"
  ],
  [
    "UnitExists [classic|retail]",
    "\nDescription: Checks if the given unit exists.",
    "undefined--@arg obj: unitId string _ The UnitID of the unit to check./n--@return: boolean _ True if the unit exists, false otherwise./nfunction/nBANETO_UnitExists/n(/n)/n"
  ],
  [
    "TargetNearest [classic|retail]",
    "\nDescription: Targets the nearest unit to the player.",
    "undefined--@return: None/nfunction/nBANETO_TargetNearest/n(/n)/n"
  ],
  [
    "UseAction [classic|retail]",
    "\nDescription: Performs the action associated with the specified action slot.",
    "undefined--@arg act: number _ The action slot number./n--@return: None/nfunction/nBANETO_UseAction/n(/n)/n"
  ],
  [
    "BlockPathAvoidance [classic|retail]",
    "\nDescription: Enables or disables path avoidance.",
    "undefined--@arg bool: boolean _ True to enable path avoidance, false to disable it./n--@return: None/nfunction/nBANETO_BlockPathAvoidance/n(/n)/n"
  ],
  [
    "GetAnglesBetweenPositions [classic|retail]",
    "\nDescription: Gets the angles between two positions in the 3D world.",
    "undefined--@return: number _ The angle in radians between the two positions./nfunction/nBANETO_GetAnglesBetweenPositions/n(/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "MeshTo [classic|retail]",
    "\nDescription: Moves the player to the specified coordinates using pathfinding.",
    "undefined--@return: None/nfunction/nBANETO_MeshTo/n(/n,/n,/n)/n"
  ],
  [
    "RunString [classic|retail]",
    "\nDescription: Executes the specified LUA code.",
    "undefined--@arg string: string _ The LUA code to execute./n--@return: Various _ The results of the executed LUA code./nfunction/nBANETO_RunString/n(/n)/n"
  ],
  [
    "DelayGroundUnstucking [classic|retail]",
    "\nDescription: Delays the ground unstucking method by the specified amount of seconds.",
    "undefined--@arg seconds: number _ The number of seconds to delay the unstucking method./n--@return: None/nfunction/nBANETO_DelayGroundUnstucking/n(/n)/n"
  ],
  [
    "CallFullStuckMethod [classic|retail]",
    "\nDescription: Calls the full method for unstucking the player character.",
    "undefined--@return: None/nfunction/nBANETO_CallFullStuckMethod/n(/n)/n"
  ],
  [
    "GetPath [classic|retail]",
    "\nDescription: Retrieves the current path of the player character.",
    "undefined--@return: table _ The current path as a table of coordinates./nfunction/nBANETO_GetPath/n(/n)/n"
  ],
  [
    "ObjectFlags1 [classic|retail]",
    "\nDescription: Retrieves the first set of flags for the specified object.",
    "undefined--@arg obj: Object _ The object to retrieve the flags for./n--@return: number _ The first set of flags for the object./nfunction/nBANETO_ObjectFlags1/n(/n)/n"
  ],
  [
    "ObjectFlags2 [classic|retail]",
    "\nDescription: Retrieves the second set of flags for the specified object.",
    "undefined--@arg obj: Object _ The object to retrieve the flags for./n--@return: number _ The second set of flags for the object./nfunction/nBANETO_ObjectFlags2/n(/n)/n"
  ],
  [
    "UnitIsSkinnable [classic|retail]",
    "\nDescription: Checks if the specified unit can be skinned.",
    "undefined--@arg obj: unitId string _ The UnitID of the unit to check./n--@return: boolean _ True if the unit can be skinned, false otherwise./nfunction/nBANETO_UnitIsSkinnable/n(/n)/n"
  ],
  [
    "UnitIsLooting [classic|retail]",
    "\nDescription: Checks if the specified unit is currently looting.",
    "undefined--@arg obj: unitId string _ The UnitID of the unit to check./n--@return: boolean _ True if the unit is currently looting, false otherwise./nfunction/nBANETO_UnitIsLooting/n(/n)/n"
  ],
  [
    "UnitFeignDeathed [classic|retail]",
    "\nDescription: Checks whether a unit is feigning death.",
    "undefined--@arg obj: string _ The unit to check./n--@return: Boolean indicating whether the unit is feigning death./nfunction/nBANETO_UnitFeignDeathed/n(/n)/n"
  ],
  [
    "IsWaterBelowUs [classic]",
    "\nDescription: Checks whether there is water below us.",
    "undefined--@return: Boolean indicating whether there is water below./nfunction/nBANETO_IsWaterBelowUs/n(/n)/n"
  ],
  [
    "FlyingRaycastBlock [classic]",
    "\nDescription: Performs a raycast to detect obstacles while flying.",
    "undefined--@return: Boolean indicating whether there is an obstacle./nfunction/nBANETO_FlyingRaycastBlock/n(/n)/n"
  ],
  [
    "FlyingRaycast [classic|retail]",
    "\nDescription: Performs a raycast while flying.",
    "undefined--@return: Raycast result./nfunction/nBANETO_FlyingRaycast/n(/n)/n"
  ],
  [
    "FlyingRaycastClose [classic|retail]",
    "\nDescription: Performs a close proximity raycast while flying.",
    "undefined--@return: Raycast result./nfunction/nBANETO_FlyingRaycastClose/n(/n)/n"
  ],
  [
    "IsFlyingStuck [classic|retail]",
    "\nDescription: Checks whether the flying unit is stuck.",
    "undefined--@return: Boolean indicating whether the flying unit is stuck./nfunction/nBANETO_IsFlyingStuck/n(/n)/n"
  ],
  [
    "StrafeLeftStart [classic|retail]",
    "\nDescription: Starts strafing to the left.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeLeftStart/n(/n)/n"
  ],
  [
    "StrafeLeftStop [classic|retail]",
    "\nDescription: Stops strafing to the left.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeLeftStop/n(/n)/n"
  ],
  [
    "StrafeRightStart [classic|retail]",
    "\nDescription: Starts strafing to the right.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeRightStart/n(/n)/n"
  ],
  [
    "StrafeRightStop [classic|retail]",
    "\nDescription: Stops strafing to the right.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeRightStop/n(/n)/n"
  ],
  [
    "FlyingUnstucker [classic|retail]",
    "\nDescription: Unstucks the flying unit.",
    "undefined--@return: Unstuck result./nfunction/nBANETO_FlyingUnstucker/n(/n)/n"
  ],
  [
    "SetFlyingPitch [classic|retail]",
    "\nDescription: Sets the flying pitch.",
    "undefined--@arg val: number _ The value to set the pitch to./n--@return: The result of setting the pitch./nfunction/nBANETO_SetFlyingPitch/n(/n)/n"
  ],
  [
    "GetFlyingPitch [classic|retail]",
    "\nDescription: Gets the current flying pitch.",
    "undefined--@return: The current flying pitch./nfunction/nBANETO_GetFlyingPitch/n(/n)/n"
  ],
  [
    "SetToOldFlyingNav [classic|retail]",
    "\nDescription: Sets the navigation to old flying.",
    "undefined--@return: Result of the setting./nfunction/nBANETO_SetToOldFlyingNav/n(/n)/n"
  ],
  [
    "FlyingNavigator [classic|retail]",
    "\nDescription: Executes the flying navigator.",
    "undefined--@return: Flying navigator result./nfunction/nBANETO_FlyingNavigator/n(/n)/n"
  ],
  [
    "FaceDirection [classic]",
    "\nDescription: Faces a specified direction.",
    "undefined--@arg dir: string _ The direction to face./n--@return: The result of facing the direction./nfunction/nBANETO_FaceDirection/n(/n)/n"
  ],
  [
    "IsRunning [classic|retail]",
    "\nDescription: Checks whether the unit is running.",
    "undefined--@return: Boolean indicating whether the unit is running./nfunction/nBANETO_IsRunning/n(/n)/n"
  ],
  [
    "FlyAscendExecute [classic|retail]",
    "\nDescription: Executes the fly ascend action.",
    "undefined--@return: The result of the fly ascend action./nfunction/nBANETO_FlyAscendExecute/n(/n)/n"
  ],
  [
    "Dismount [classic|retail]",
    "\nDescription: Dismounts the unit.",
    "undefined--@arg msg: string _ The message to send on dismount./n--@return: The result of the dismount action./nfunction/nBANETO_Dismount/n(/n)/n"
  ],
  [
    "PathHandlerNn [classic|retail]",
    "\nDescription: Handles the given path.",
    "undefined--@arg path: string _ The path to handle./n--@return: The result of the path handling./nfunction/nBANETO_PathHandlerNn/n(/n)/n"
  ],
  [
    "DelayOM [classic]",
    "\nDescription: Delays the object manager.",
    "undefined--@arg seconds: number _ The number of seconds to delay./n--@return: The result of the delay./nfunction/nBANETO_DelayOM/n(/n)/n"
  ],
  [
    "GetObjectFacing [classic|retail]",
    "\nDescription: Gets the facing direction of an object.",
    "undefined--@arg object: string _ The object to get the facing direction of./n--@return: The facing direction of the object./nfunction/nBANETO_GetObjectFacing/n(/n)/n"
  ],
  [
    "UpdateGotoPositionWa [classic|retail]",
    "\nDescription: Updates the goto position with WorldAnchor.",
    "undefined--@return: The result of the update./nfunction/nUpdateGotoPositionWa/n(/n)/n"
  ],
  [
    "FlyMount [classic|retail]",
    "\nDescription: Mounts the unit for flying.",
    "undefined--@return: The result of the mount action./nfunction/nBANETO_FlyMount/n(/n)/n"
  ],
  [
    "Mount [classic]",
    "\nDescription: Mounts the unit.",
    "undefined--@return: The result of the mount action./nfunction/nBANETO_Mount/n(/n)/n"
  ],
  [
    "GetClosestKnownTaxi [classic|retail]",
    "\nDescription: Gets the closest known taxi.",
    "undefined--@return: The closest known taxi./nfunction/nBANETO_GetClosestKnownTaxi/n(/n)/n"
  ],
  [
    "ProfileSetHomeMailbox [classic|retail]",
    "\nDescription: Sets the home mailbox with specified coordinates and ID.",
    "undefined--@arg x: number _ The x coordinate./n--@arg y: number _ The y coordinate./n--@arg z: number _ The z coordinate./n--@arg id: string _ The ID of the mailbox./n--@return: The result of the set action./nfunction/nBANETO_ProfileSetHomeMailbox/n(/n,/n,/n,/n)/n"
  ],
  [
    "SetHomeMailbox [classic|retail]",
    "\nDescription: Sets the home mailbox.",
    "undefined--@return: The result of the set action./nfunction/nBANETO_SetHomeMailbox/n(/n)/n"
  ],
  [
    "CheckHomeMailbox [classic|retail]",
    "\nDescription: Checks the home mailbox.",
    "undefined--@return: The result of the check./nfunction/nBANETO_CheckHomeMailbox/n(/n)/n"
  ],
  [
    "GetClosestMailbox [classic|retail]",
    "\nDescription: Gets the closest mailbox.",
    "undefined--@return: The closest mailbox./nfunction/nBANETO_GetClosestMailbox/n(/n)/n"
  ],
  [
    "GetClosestClassTrainer [classic|retail]",
    "\nDescription: Gets the closest class trainer of a specified class.",
    "undefined--@arg classEnglishName: string _ The English name of the class./n--@return: The closest class trainer of the specified class./nfunction/nBANETO_GetClosestClassTrainer/n(/n)/n"
  ],
  [
    "GetClosestProfTrainer [classic|retail]",
    "\nDescription: Gets the closest profession trainer of a specified profession.",
    "undefined--@arg profEnglishName: string _ The English name of the profession./n--@return: The closest profession trainer of the specified profession./nfunction/nBANETO_GetClosestProfTrainer/n(/n)/n"
  ],
  [
    "GetClosestTaxiExit [classic|retail]",
    "\nDescription: Gets the closest taxi exit.",
    "undefined--@return: The closest taxi exit./nfunction/nBANETO_GetClosestTaxiExit/n(/n)/n"
  ],
  [
    "GetClosestTaxiEntry [classic|retail]",
    "\nDescription: Gets the closest taxi entry.",
    "undefined--@return: The closest taxi entry./nfunction/nBANETO_GetClosestTaxiEntry/n(/n)/n"
  ],
  [
    "IsFlightmasterOnMyContinent [classic|retail]",
    "\nDescription: Checks whether the flight master is on the same continent.",
    "undefined--@arg id: string _ The ID of the flight master./n--@return: Boolean indicating whether the flight master is on the same continent./nfunction/nBANETO_IsFlightmasterOnMyContinent/n(/n)/n"
  ],
  [
    "GetLuaBoxDestination [classic|retail]",
    "\nDescription: Retrieves the destination from Lua Box.",
    "undefined--@return: Destination coordinates or object./nfunction/nBANETO_GetLuaBoxDestination/n(/n)/n"
  ],
  [
    "GetEwtDestination [classic|retail]",
    "\nDescription: Retrieves the destination from Ewt.",
    "undefined--@return: Destination coordinates or object./nfunction/nBANETO_GetEwtDestination/n(/n)/n"
  ],
  [
    "IsKickNeededUnitCheck [classic|retail]",
    "\nDescription: Checks whether a kick is needed for the specified unit.",
    "undefined--@arg unit: string _ The unit to check./n--@return: Boolean indicating whether a kick is needed./nfunction/nBANETO_IsKickNeededUnitCheck/n(/n)/n"
  ],
  [
    "IsKickNeeded [classic|retail]",
    "\nDescription: Checks whether a kick is needed.",
    "undefined--@return: Boolean indicating whether a kick is needed./nfunction/nBANETO_IsKickNeeded/n(/n)/n"
  ],
  [
    "IsTaxiNeeded [classic|retail]",
    "\nDescription: Checks whether a taxi is needed.",
    "undefined--@return: Boolean indicating whether a taxi is needed./nfunction/nBANETO_IsTaxiNeeded/n(/n)/n"
  ],
  [
    "IsOnCustomVendorPath [classic]",
    "\nDescription: Checks whether the player is on a custom vendor path.",
    "undefined--@return: Boolean indicating whether the player is on a custom vendor path./nfunction/nBANETO_IsOnCustomVendorPath/n(/n)/n"
  ],
  [
    "GetExecuteFlyAscend [classic]",
    "\nDescription: Executes a fly ascend.",
    "undefined--@return: Result of the execution./nfunction/nBANETO_GetExecuteFlyAscend/n(/n)/n"
  ],
  [
    "IsMountNeeded [classic|retail]",
    "\nDescription: Checks whether a mount is needed.",
    "undefined--@return: Boolean indicating whether a mount is needed./nfunction/nBANETO_IsMountNeeded/n(/n)/n"
  ],
  [
    "HasMount [classic|retail]",
    "\nDescription: Checks whether the player has a mount.",
    "undefined--@return: Boolean indicating whether the player has a mount./nfunction/nBANETO_HasMount/n(/n)/n"
  ],
  [
    "HasMountItem [classic|retail]",
    "\nDescription: Checks whether the player has a mount item.",
    "undefined--@return: Boolean indicating whether the player has a mount item./nfunction/nBANETO_HasMountItem/n(/n)/n"
  ],
  [
    "GetPlayerPointer [classic|retail]",
    "\nDescription: Retrieves the player's pointer.",
    "undefined--@return: Player's pointer./nfunction/nBANETO_GetPlayerPointer/n(/n)/n"
  ],
  [
    "IsAnEnemyPolymorphedNovaCheck [classic|retail]",
    "\nDescription: Checks whether an enemy is polymorphed and ready for Nova.",
    "undefined--@return: Boolean indicating whether an enemy is polymorphed and ready for Nova./nfunction/nBANETO_IsAnEnemyPolymorphedNovaCheck/n(/n)/n"
  ],
  [
    "IsLootStateNeededV2 [classic|retail]",
    "\nDescription: Checks whether the loot state is needed (version 2).",
    "undefined--@return: Boolean indicating whether the loot state is needed./nfunction/nBANETO_IsLootStateNeededV2/n(/n)/n"
  ],
  [
    "SelectNextMultidotTarget [classic|retail]",
    "\nDescription: Selects the next target to apply multiple damage over time spells.",
    "undefined--@return: Target selection result./nfunction/nBANETO_SelectNextMultidotTarget/n(/n)/n"
  ],
  [
    "CountItemTypeInBagsForDisc [classic|retail]",
    "\nDescription: Counts the given item type in the player's bags for Discord.",
    "undefined--@arg itemTypeC: string _ The item type to count./n--@return: Number of items of the given type./nfunction/nBANETO_CountItemTypeInBagsForDisc/n(/n)/n"
  ],
  [
    "DiscordSendWhisperOutgoing [classic|retail]",
    "\nDescription: Sends an outgoing whisper to Discord.",
    "undefined--@arg msg: string _ The message to send./nfunction/nBANETO_DiscordSendWhisperOutgoing/n(/n)/n"
  ],
  [
    "DiscordSendWhisper [classic|retail]",
    "\nDescription: Sends a whisper to a sender via Discord.",
    "undefined--@arg sender: string _ The sender to whisper to./n--@arg msg: string _ The message to send./nfunction/nBANETO_DiscordSendWhisper/n(/n,/n)/n"
  ],
  [
    "DiscordSendProfileInfo [classic]",
    "\nDescription: Sends the profile information to Discord.",
    "undefinedfunction/nBANETO_DiscordSendProfileInfo/n(/n)/n"
  ],
  [
    "DiscordSendPluginCustomText [classic|retail]",
    "\nDescription: Sends a custom text to Discord from the plugin.",
    "undefined--@arg text: string _ The custom text to send./nfunction/nBANETO_DiscordSendPluginCustomText/n(/n)/n"
  ],
  [
    "DiscordSendTargeted [classic|retail]",
    "\nDescription: Sends a targeted name to Discord.",
    "undefined--@arg name: string _ The name of the target to send./nfunction/nBANETO_DiscordSendTargeted/n(/n)/n"
  ],
  [
    "DiscordSendPluginMobFound [classic|retail]",
    "\nDescription: Sends a message to Discord when a Mob is found by the plugin.",
    "undefined--@arg id: number _ The ID of the Mob that was found./nfunction/nBANETO_DiscordSendPluginMobFound/n(/n)/n"
  ],
  [
    "DiscordSendStuck [classic|retail]",
    "\nDescription: Sends a message to Discord when the character is stuck.",
    "undefinedfunction/nBANETO_DiscordSendStuck/n(/n)/n"
  ],
  [
    "DiscordSendBgStart [classic|retail]",
    "\nDescription: Sends a message to Discord when the battleground starts.",
    "undefinedfunction/nBANETO_DiscordSendBgStart/n(/n)/n"
  ],
  [
    "DiscordSendDeath [classic|retail]",
    "\nDescription: Sends a message to Discord when the character dies.",
    "undefinedfunction/nBANETO_DiscordSendDeath/n(/n)/n"
  ],
  [
    "DiscordSendPluginItemFound [classic|retail]",
    "\nDescription: Sends a message to Discord when the plugin finds an item.",
    "undefinedfunction/nBANETO_DiscordSendPluginItemFound/n(/n)/n"
  ],
  [
    "DiscordSendTest [classic|retail]",
    "\nDescription: Sends a test message to Discord.",
    "undefinedfunction/nBANETO_DiscordSendTest/n(/n)/n"
  ],
  [
    "GetXpPercent [classic|retail]",
    "\nDescription: Retrieves the percentage of the current experience.",
    "undefined--@return: number _ The current experience percentage./nfunction/nBANETO_GetXpPercent/n(/n)/n"
  ],
  [
    "DiscordSendStatus [classic|retail]",
    "\nDescription: Sends the status to Discord.",
    "undefinedfunction/nBANETO_DiscordSendStatus/n(/n)/n"
  ],
  [
    "SelectNextMultidotTargetPriest [classic]",
    "\nDescription: Selects the next target to apply multiple damage over time spells as a priest.",
    "undefinedfunction/nBANETO_SelectNextMultidotTargetPriest/n(/n)/n"
  ],
  [
    "IsFightBlockedByMageMultipull [classic|retail]",
    "\nDescription: Checks whether the fight is blocked by a mage multipull.",
    "undefined--@return: boolean _ true if the fight is blocked, false otherwise./nfunction/nBANETO_IsFightBlockedByMageMultipull/n(/n)/n"
  ],
  [
    "IsAnEnemyNotFullMultidotted [classic|retail]",
    "\nDescription: Checks whether an enemy is not fully affected by multiple damage over time spells.",
    "undefined--@return: boolean _ true if the enemy is not fully affected, false otherwise./nfunction/nBANETO_IsAnEnemyNotFullMultidotted/n(/n)/n"
  ],
  [
    "IsAnEnemyPlaguedPriest [classic]",
    "\nDescription: Checks if a specified enemy unit is a Plagued Priest.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAnEnemyPlaguedPriest/n(/n)/n"
  ],
  [
    "IsAnEnemyNotFullMultidottedPriest [classic]",
    "\nDescription: Checks if a specified enemy Priest unit is not fully multidotted.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAnEnemyNotFullMultidottedPriest/n(/n)/n"
  ],
  [
    "IsAnEnemyPolymorphed [classic|retail]",
    "\nDescription: Checks if a specified enemy unit is polymorphed.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAnEnemyPolymorphed/n(/n)/n"
  ],
  [
    "SwingTimerTest [classic]",
    "\nDescription: Tests the swing timer of the player character.",
    "undefined--@return: number (the time remaining until the next auto_attack)/nfunction/nBANETO_SwingTimerTest/n(/n)/n"
  ],
  [
    "SwingTimer [classic]",
    "\nDescription: Returns the player's swing timer.",
    "undefined--@return: number (the time remaining until the next auto_attack)/nfunction/nBANETO_SwingTimer/n(/n)/n"
  ],
  [
    "SpellStopCasting [classic|retail]",
    "\nDescription: Stops the current spell being cast.",
    "undefinedfunction/nBANETO_SpellStopCasting/n(/n)/n"
  ],
  [
    "RetargetLowestHealthMob [classic|retail]",
    "\nDescription: Changes target to the enemy mob with the lowest health.",
    "undefinedfunction/nBANETO_RetargetLowestHealthMob/n(/n)/n"
  ],
  [
    "RetargetGoodMobAfterMultidot [classic|retail]",
    "\nDescription: Changes target to a good mob after multidot.",
    "undefinedfunction/nBANETO_RetargetGoodMobAfterMultidot/n(/n)/n"
  ],
  [
    "RetargetGoodMobAfterMultidotPriest [classic]",
    "\nDescription: Changes target to a good mob after multidot, with preference for Priests.",
    "undefinedfunction/nBANETO_RetargetGoodMobAfterMultidotPriest/n(/n)/n"
  ],
  [
    "RetargetGoodMobAfterPoly [classic|retail]",
    "\nDescription: Changes target to a good mob after a polymorph effect.",
    "undefinedfunction/nBANETO_RetargetGoodMobAfterPoly/n(/n)/n"
  ],
  [
    "TargetPolymorphedMob [classic|retail]",
    "\nDescription: Targets a polymorphed mob.",
    "undefinedfunction/nBANETO_TargetPolymorphedMob/n(/n)/n"
  ],
  [
    "TargetAndPolymorph [classic|retail]",
    "\nDescription: Targets and polymorphs a specified mob.",
    "undefinedfunction/nBANETO_TargetAndPolymorph/n(/n)/n"
  ],
  [
    "IsUnitMultidotted [classic|retail]",
    "\nDescription: Checks if a specified unit is multidotted.",
    "undefined--@arg unit: string (unit to be checked)/n--@return: boolean/nfunction/nBANETO_IsUnitMultidotted/n(/n)/n"
  ],
  [
    "IsUnitMultidottedPriest [classic]",
    "\nDescription: Checks if a specified unit is multidotted, with preference for Priests.",
    "undefined--@arg unit: string (unit to be checked)/n--@return: boolean/nfunction/nBANETO_IsUnitMultidottedPriest/n(/n)/n"
  ],
  [
    "IsUnitPolymorphed [classic|retail]",
    "\nDescription: Checks if a specified unit is polymorphed.",
    "undefined--@arg unit: string (unit to be checked)/n--@return: boolean/nfunction/nBANETO_IsUnitPolymorphed/n(/n)/n"
  ],
  [
    "Object [classic|retail]",
    "\nDescription: Creates a new Object with the given value.",
    "undefined--@arg arg: mixed/n--@return: Object/nfunction/nBANETO_Object/n(/n)/n"
  ],
  [
    "ClearTarget [classic|retail]",
    "\nDescription: Clears the current target.",
    "undefinedfunction/nBANETO_ClearTarget/n(/n)/n"
  ],
  [
    "SelectActiveEnemyAroundPlayer [classic|retail]",
    "\nDescription: Selects an active enemy within a certain radius around the player.",
    "undefined--@arg radius: number/n--@return: unitId (unit identifier of the selected enemy)/nfunction/nBANETO_SelectActiveEnemyAroundPlayer/n(/n)/n"
  ],
  [
    "CancelEnrageBuffing [classic]",
    "\nDescription: Cancels the enrage buffing state of the player character.",
    "undefinedfunction/nBANETO_CancelEnrageBuffing/n(/n)/n"
  ],
  [
    "GetNumEnemiesAroundUnit [classic|retail]",
    "\nDescription: Retrieves the number of enemy units around a specified unit.",
    "undefined--@arg unit: string (unit identifier)/n--@arg radius: number/n--@return: number/nfunction/nGetNumEnemiesAroundUnit/n(/n,/n)/n"
  ],
  [
    "SetRETAIL_WQUEST [classic|retail]",
    "\nDescription: Sets the value of the RETAIL_WQUEST variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetRETAIL_WQUEST/n(/n)/n"
  ],
  [
    "SetOZ_RAREFARM_QUESTSCAN [classic|retail]",
    "\nDescription: Sets the value of the OZ_RAREFARM_QUESTSCAN variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetOZ_RAREFARM_QUESTSCAN/n(/n)/n"
  ],
  [
    "UnitThreatSituation [classic|retail]",
    "\nDescription: Checks the threat level between two units.",
    "undefined--@arg unit1: string/n--@arg unit2: string/n--@return: number/nfunction/nBANETO_UnitThreatSituation/n(/n,/n)/n"
  ],
  [
    "SetBLOCKMOVING_REICHI [classic|retail]",
    "\nDescription: Sets the value of the BLOCKMOVING_REICHI variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetBLOCKMOVING_REICHI/n(/n)/n"
  ],
  [
    "SetBLACKLIST_SPOTS [classic|retail]",
    "\nDescription: Sets the value of the BLACKLIST_SPOTS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetBLACKLIST_SPOTS/n(/n)/n"
  ],
  [
    "SetDEFINED_TARGET_IDS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_TARGET_IDS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_TARGET_IDS/n(/n)/n"
  ],
  [
    "SetDEFINED_CENTERS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_CENTERS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_CENTERS/n(/n)/n"
  ],
  [
    "SetDEFINED_QUEST_IDS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_QUEST_IDS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_QUEST_IDS/n(/n)/n"
  ],
  [
    "SetDEFINED_QUEST_PICKUP_NPCS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_QUEST_PICKUP_NPCS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_QUEST_PICKUP_NPCS/n(/n)/n"
  ],
  [
    "SetQUEST_TURNIN_NPCS [classic|retail]",
    "\nDescription: Sets the value of the QUEST_TURNIN_NPCS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetQUEST_TURNIN_NPCS/n(/n)/n"
  ],
  [
    "SetDEFINED_QUESTSTEP_TYPES [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_QUESTSTEP_TYPES variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_QUESTSTEP_TYPES/n(/n)/n"
  ],
  [
    "SetDEFINED_VENDOR_GOODS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_VENDOR_GOODS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_VENDOR_GOODS/n(/n)/n"
  ],
  [
    "SetDEFINED_VENDOR_REPAIR [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_VENDOR_REPAIR variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_VENDOR_REPAIR/n(/n)/n"
  ],
  [
    "SetDEFINED_VENDOR_SELL [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_VENDOR_SELL variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_VENDOR_SELL/n(/n)/n"
  ],
  [
    "SetEATINGDRINKING_RETAIL_DELAY_AMOUNT [classic|retail]",
    "\nDescription: Sets the value of the EATINGDRINKING_RETAIL_DELAY_AMOUNT variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetEATINGDRINKING_RETAIL_DELAY_AMOUNT/n(/n)/n"
  ],
  [
    "SetSTOPFIGHT_EVADE [classic|retail]",
    "\nDescription: Blacklists the FIGHTING state until the specified timestamp expires. If you already are in FIGHTING state you need to call BANETO_SetSTOPFIGHT_EVADE(true) to leave it!",
    "undefined--@arg timestamp: Example would be GetTime()+10/nfunction/nBANETO_SetSTOPFIGHT_EVADE/n(/n)/n"
  ],
  [
    "SetBLOCKMOVING [classic|retail]",
    "\nDescription: Sets the value of the BLOCKMOVING variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetBLOCKMOVING/n(/n)/n"
  ],
  [
    "SetIsLocalQuester [classic|retail]",
    "\nDescription: Sets the value of the IsLocalQuester variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetIsLocalQuester/n(/n)/n"
  ],
  [
    "SetFIGHTING_EMERGENCY_LEAVE [classic|retail]",
    "\nDescription: Sets the value of the FIGHTING_EMERGENCY_LEAVE variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetFIGHTING_EMERGENCY_LEAVE/n(/n)/n"
  ],
  [
    "SetRETAIL_GOSSIP_QUEST [classic|retail]",
    "\nDescription: Sets the value of the RETAIL_GOSSIP_QUEST variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetRETAIL_GOSSIP_QUEST/n(/n)/n"
  ],
  [
    "SetSPELLONLOCATION_ID [classic|retail]",
    "\nDescription: Sets the value of the SPELLONLOCATION_ID variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetSPELLONLOCATION_ID/n(/n)/n"
  ],
  [
    "HasTotemActive [classic|retail]",
    "\nDescription: Checks if a specific totem with the given ID is active.",
    "undefined--@arg idTotem: number/n--@return: boolean/nfunction/nBANETO_HasTotemActive/n(/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundVectorNotInfight [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific position who are not currently in a fight",
    "undefined--@arg x: number _ The X coordinate of the position/n--@arg y: number _ The Y coordinate of the position/n--@arg z: number _ The Z coordinate of the position/n--@arg radius: number _ The radius within which to look for enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundVectorNotInfight/n(/n,/n,/n,/n)/n"
  ],
  [
    "FindNextAssistPositionNew [classic]",
    "\nDescription: Finds the next position to assist a player character",
    "undefined--@return: string _ The coordinates of the next assist position/nfunction/nBANETO_FindNextAssistPositionNew/n(/n)/n"
  ],
  [
    "FindNextAssistPosition [classic|retail]",
    "\nDescription: Finds the next position to assist a player character",
    "undefined--@return: string _ The coordinates of the next assist position/nfunction/nBANETO_FindNextAssistPosition/n(/n)/n"
  ],
  [
    "GetNumPlayersAroundUnit [classic|retail]",
    "\nDescription: Counts the number of players around a specific unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count players/n--@return: number _ The number of players found/nfunction/nGetNumPlayersAroundUnit/n(/n,/n)/n"
  ],
  [
    "GetNumFriendsAroundUnitPvp [classic|retail]",
    "\nDescription: Counts the number of friendly units around a specific unit in PvP",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count friendly units/n--@return: number _ The number of friendly units found/nfunction/nGetNumFriendsAroundUnitPvp/n(/n,/n)/n"
  ],
  [
    "CountPlayersAroundMe [classic|retail]",
    "\nDescription: Counts the number of players around the current player character",
    "undefined--@arg radius: number _ The radius within which to count players/n--@return: number _ The number of players found/nfunction/nCountPlayersAroundMe/n(/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundUnitPvp [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific unit in PvP",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count hostile enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundUnitPvp/n(/n,/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundUnitBlacklistFunc [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific unit, excluding those on a blacklist",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count hostile enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundUnitBlacklistFunc/n(/n,/n)/n"
  ],
  [
    "GetNumPossibleEnemiesAroundUnit [classic|retail]",
    "\nDescription: Counts the number of potential enemies around a specific unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count potential enemies/n--@return: number _ The number of potential enemies found/nfunction/nGetNumPossibleEnemiesAroundUnit/n(/n,/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundUnit [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count hostile enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundUnit/n(/n,/n)/n"
  ],
  [
    "Print [classic|retail]",
    "\nDescription: Prints a message to the console",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_Print/n(/n)/n"
  ],
  [
    "PrintError [classic|retail]",
    "\nDescription: Prints an error message to the console",
    "undefined--@arg message: string _ The error message to be printed/n--@return: nil/nfunction/nBANETO_PrintError/n(/n)/n"
  ],
  [
    "SetBamboLog [classic|retail]",
    "\nDescription: Toggles the logging functionality of the BANETO module",
    "undefined--@arg bool: boolean _ True to enable logging, false to disable it/n--@return: nil/nfunction/nBANETO_SetBamboLog/n(/n)/n"
  ],
  [
    "PrintPalaDebug [classic]",
    "\nDescription: Prints a debug message for the Paladin class",
    "undefined--@arg message: string _ The debug message to be printed/n--@return: nil/nfunction/nBANETO_PrintPalaDebug/n(/n)/n"
  ],
  [
    "PrintDungeonDebug [classic]",
    "\nDescription: Prints a debug message for dungeon activities",
    "undefined--@arg message: string _ The debug message to be printed/n--@return: nil/nfunction/nBANETO_PrintDungeonDebug/n(/n)/n"
  ],
  [
    "PrintBambo [classic|retail]",
    "\nDescription: Prints a message to the console with the prefix \"Bambo\"",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintBambo/n(/n)/n"
  ],
  [
    "PrintGatherLandingDebug [classic]",
    "\nDescription: Prints a debug message for the GatherLanding module",
    "undefined--@arg message: string _ The debug message to be printed/n--@return: nil/nfunction/nBANETO_PrintGatherLandingDebug/n(/n)/n"
  ],
  [
    "PrintWarning [classic|retail]",
    "\nDescription: Prints a warning message to the console",
    "undefined--@arg message: string _ The warning message to be printed/n--@return: nil/nfunction/nBANETO_PrintWarning/n(/n)/n"
  ],
  [
    "PrintSuccess [classic|retail]",
    "\nDescription: Prints a success message to the console",
    "undefined--@arg message: string _ The success message to be printed/n--@return: nil/nfunction/nBANETO_PrintSuccess/n(/n)/n"
  ],
  [
    "PrintFight [classic|retail]",
    "\nDescription: Prints a message related to fighting activities to the console",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintFight/n(/n)/n"
  ],
  [
    "PrintMeme [classic|retail]",
    "\nDescription: Prints a meme message to the console",
    "undefined--@arg message: string _ The meme message to be printed/n--@return: nil/nfunction/nBANETO_PrintMeme/n(/n)/n"
  ],
  [
    "PrintProfile [classic|retail]",
    "\nDescription: Prints a message related to profile activities to the console",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintProfile/n(/n)/n"
  ],
  [
    "PrintStateWithDelay [classic|retail]",
    "\nDescription: Prints a message with a delay",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintStateWithDelay/n(/n)/n"
  ],
  [
    "PrintState [classic|retail]",
    "\nDescription: Prints a message",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintState/n(/n)/n"
  ],
  [
    "PrintDev [classic|retail]",
    "\nDescription: Prints a message for development purposes",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintDev/n(/n)/n"
  ],
  [
    "GetVersion [classic|retail]",
    "\nDescription: Gets the version of the BANETO module",
    "undefined--@return: string _ The version of the BANETO module/nfunction/nBANETO_GetVersion/n(/n)/n"
  ],
  [
    "GetRawgoldPerHour [classic|retail]",
    "\nDescription: Gets the raw gold earnings per hour",
    "undefined--@return: number _ The raw gold earnings per hour/nfunction/nBANETO_GetRawgoldPerHour/n(/n)/n"
  ],
  [
    "GetXpPerHour [classic|retail]",
    "\nDescription: Gets the experience points gain rate per hour",
    "undefined--@return: number _ The experience points gain rate per hour/nfunction/nBANETO_GetXpPerHour/n(/n)/n"
  ],
  [
    "StashStatsValues [classic|retail]",
    "\nDescription: Stores the stats values",
    "undefined--@return: nil/nfunction/nBANETO_StashStatsValues/n(/n)/n"
  ],
  [
    "UseWand [classic|retail]",
    "\nDescription: Uses a wand",
    "undefined--@return: nil/nfunction/nUseWand/n(/n)/n"
  ],
  [
    "IsWandBlocked [classic]",
    "\nDescription: Checks if the use of wand is blocked",
    "undefined--@return: boolean _ Returns true if the use of wand is blocked, false otherwise/nfunction/nIsWandBlocked/n(/n)/n"
  ],
  [
    "testLos [classic|retail]",
    "\nDescription: Tests the line of sight",
    "undefined--@return: boolean _ Returns true if the line of sight is clear, false otherwise/nfunction/ntestLos/n(/n)/n"
  ],
  [
    "IsUnitInLos [classic|retail]",
    "\nDescription: Checks if a unit is in the line of sight",
    "undefined--@arg object: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit is in the line of sight, false otherwise/nfunction/nBANETO_IsUnitInLos/n(/n)/n"
  ],
  [
    "IsTargetInLos [classic|retail]",
    "\nDescription: Checks if the target is in the line of sight",
    "undefined--@return: boolean _ Returns true if the target is in the line of sight, false otherwise/nfunction/nBANETO_IsTargetInLos/n(/n)/n"
  ],
  [
    "GetTotalBagSlots [classic|retail]",
    "\nDescription: Gets the total number of bag slots",
    "undefined--@return: number _ The total number of bag slots/nfunction/nBANETO_GetTotalBagSlots/n(/n)/n"
  ],
  [
    "GetFreeBagSlots [classic|retail]",
    "\nDescription: Gets the number of free bag slots",
    "undefined--@return: number _ The number of free bag slots/nfunction/nBANETO_GetFreeBagSlots/n(/n)/n"
  ],
  [
    "CancelShapeshift [classic|retail]",
    "\nDescription: Cancels the shapeshift effect",
    "undefined--@return: nil/nfunction/nBANETO_CancelShapeshift/n(/n)/n"
  ],
  [
    "CancelShapeshift [classic|retail]",
    "\nDescription: Cancels the shapeshift effect",
    "undefined--@return: nil/nfunction/nCancelShapeshift/n(/n)/n"
  ],
  [
    "GetShapeshiftDruid [classic|retail]",
    "\nDescription: Gets the current shapeshift form for a druid",
    "undefined--@return: string _ The current shapeshift form for a druid/nfunction/nGetShapeshiftDruid/n(/n)/n"
  ],
  [
    "HasDebuffWithCount [classic|retail]",
    "\nDescription: Checks if a unit has a specific debuff with a count",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: number _ Returns the count of the specified debuff on the unit, 0 if the unit does not have the debuff/nfunction/nBANETO_HasDebuffWithCount/n(/n,/n,/n)/n"
  ],
  [
    "GetBuffCooldown [classic|retail]",
    "\nDescription: Gets the cooldown of a buff on a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: number _ Returns the cooldown of the buff in seconds/nfunction/nBANETO_GetBuffCooldown/n(/n,/n)/n"
  ],
  [
    "HasBuffWithCount [classic|retail]",
    "\nDescription: Checks if a unit has a specific buff with a count",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: number _ Returns the count of the specified buff on the unit, 0 if the unit does not have the buff/nfunction/nBANETO_HasBuffWithCount/n(/n,/n,/n)/n"
  ],
  [
    "HasBuff [classic|retail]",
    "\nDescription: Checks if a unit has a specific buff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: boolean _ Returns true if the unit has the specified buff, false otherwise/nfunction/nBANETO_HasBuff/n(/n,/n,/n)/n"
  ],
  [
    "GetUnitSpeed [classic|retail]",
    "\nDescription: Gets the speed of a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: number _ Returns the speed of the unit/nfunction/nBANETO_GetUnitSpeed/n(/n)/n"
  ],
  [
    "ShamanPoisonDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Shaman has a poison debuff",
    "undefined--@return: boolean _ Returns true if the Shaman has a poison debuff, false otherwise/nfunction/nBANETO_ShamanPoisonDebuffCheck/n(/n)/n"
  ],
  [
    "HasPoisonDebuffCheck [classic|retail]",
    "\nDescription: Checks if a unit has a poison debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a poison debuff, false otherwise/nfunction/nBANETO_HasPoisonDebuffCheck/n(/n)/n"
  ],
  [
    "HasMagicCheck [classic|retail]",
    "\nDescription: Checks if a unit has a magic debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a magic debuff, false otherwise/nfunction/nBANETO_HasMagicCheck/n(/n)/n"
  ],
  [
    "HasSicknessDebuffCheck [classic|retail]",
    "\nDescription: Checks if a unit has a sickness debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a sickness debuff, false otherwise/nfunction/nBANETO_HasSicknessDebuffCheck/n(/n)/n"
  ],
  [
    "HasCurseDebuffCheck [classic|retail]",
    "\nDescription: Checks if a unit has a curse debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a curse debuff, false otherwise/nfunction/nBANETO_HasCurseDebuffCheck/n(/n)/n"
  ],
  [
    "ShamanSicknessDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Shaman has a sickness debuff",
    "undefined--@return: boolean _ Returns true if the Shaman has a sickness debuff, false otherwise/nfunction/nBANETO_ShamanSicknessDebuffCheck/n(/n)/n"
  ],
  [
    "DelayMountingAndFlying [classic|retail]",
    "\nDescription: Delays mounting and flying for a specified time",
    "undefined--@arg seconds: number _ The delay in seconds/n--@return: nil/nfunction/nBANETO_DelayMountingAndFlying/n(/n)/n"
  ],
  [
    "DelayMeshPathing [classic|retail]",
    "\nDescription: Delays mesh pathing for a specified time",
    "undefined--@arg seconds: number _ The delay in seconds/n--@return: nil/nfunction/nBANETO_DelayMeshPathing/n(/n)/n"
  ],
  [
    "DelayTargeting [classic|retail]",
    "\nDescription: Delays targeting for a specified time",
    "undefined--@arg seconds: number _ The delay in seconds/n--@return: nil/nfunction/nBANETO_DelayTargeting/n(/n)/n"
  ],
  [
    "PaladinPurifyDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Paladin has a purify debuff",
    "undefined--@return: boolean _ Returns true if the Paladin has a purify debuff, false otherwise/nfunction/nBANETO_PaladinPurifyDebuffCheck/n(/n)/n"
  ],
  [
    "DruidCurseDebuffCheck [classic]",
    "\nDescription: Checks if the Druid has a curse debuff",
    "undefined--@return: boolean _ Returns true if the Druid has a curse debuff, false otherwise/nfunction/nBANETO_DruidCurseDebuffCheck/n(/n)/n"
  ],
  [
    "DruidPoisonDebuffCheck [classic]",
    "\nDescription: Checks if the Druid has a poison debuff",
    "undefined--@return: boolean _ Returns true if the Druid has a poison debuff, false otherwise/nfunction/nBANETO_DruidPoisonDebuffCheck/n(/n)/n"
  ],
  [
    "PriestCureDiseaseDebuffCheck [classic]",
    "\nDescription: Checks if the Priest can cure a disease debuff",
    "undefined--@return: boolean _ Returns true if the Priest can cure a disease debuff, false otherwise/nfunction/nBANETO_PriestCureDiseaseDebuffCheck/n(/n)/n"
  ],
  [
    "PaladinCleanseDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Paladin can cleanse a debuff",
    "undefined--@return: boolean _ Returns true if the Paladin can cleanse a debuff, false otherwise/nfunction/nBANETO_PaladinCleanseDebuffCheck/n(/n)/n"
  ],
  [
    "formatItemForHekili [classic|retail]",
    "\nDescription: Formats an item for Hekili",
    "undefined--@arg itemArg: string _ The item to be formatted/n--@return: string _ The formatted item/nfunction/nformatItemForHekili/n(/n)/n"
  ],
  [
    "isHekiliLoaded [classic|retail]",
    "\nDescription: Checks if Hekili is loaded",
    "undefined--@return: boolean _ Returns true if Hekili is loaded, false otherwise/nfunction/nisHekiliLoaded/n(/n)/n"
  ],
  [
    "Hekili [classic|retail]",
    "\nDescription: Returns the Hekili state",
    "undefined--@return: string _ Returns the Hekili state/nfunction/nBANETO_Hekili/n(/n)/n"
  ],
  [
    "GetBuffDuration [classic|retail]",
    "\nDescription: Gets the duration of a buff on a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: number _ Returns the duration of the buff in seconds/nfunction/nBANETO_GetBuffDuration/n(/n,/n)/n"
  ],
  [
    "GetDebuffDuration [classic|retail]",
    "\nDescription: Gets the duration of a debuff on a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: number _ Returns the duration of the debuff in seconds/nfunction/nBANETO_GetDebuffDuration/n(/n,/n)/n"
  ],
  [
    "HasStealableCheck [classic|retail]",
    "\nDescription: Checks if a unit has a stealable buff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a stealable buff, false otherwise/nfunction/nBANETO_HasStealableCheck/n(/n)/n"
  ],
  [
    "HasHelpfulMagicCheck [classic|retail]",
    "\nDescription: Checks if a unit has a helpful magic buff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a helpful magic buff, false otherwise/nfunction/nBANETO_HasHelpfulMagicCheck/n(/n)/n"
  ],
  [
    "HasEnrageCheck [classic|retail]",
    "\nDescription: Checks if a unit has an enrage effect",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has an enrage effect, false otherwise/nfunction/nBANETO_HasEnrageCheck/n(/n)/n"
  ],
  [
    "HasDebuffWithOwnerCheck [classic|retail]",
    "\nDescription: Checks if a unit has a specific debuff with a specific owner",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: boolean _ Returns true if the unit has the specified debuff with the specified owner, false otherwise/nfunction/nBANETO_HasDebuffWithOwnerCheck/n(/n,/n)/n"
  ],
  [
    "CountDebuffsAroundUnit [classic|retail]",
    "\nDescription: Counts the number of units around a specified unit with a specific debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg debuff: string _ The name of the debuff/n--@arg range: number _ The range to check for units with the debuff/n--@return: number _ Returns the number of units with the debuff within the specified range/nfunction/nBANETO_CountDebuffsAroundUnit/n(/n,/n,/n)/n"
  ],
  [
    "HasDebuff [classic|retail]",
    "\nDescription: Checks if a unit has a specific debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: boolean _ Returns true if the unit has the specified debuff, false otherwise/nfunction/nBANETO_HasDebuff/n(/n,/n,/n)/n"
  ],
  [
    "IsItemFood [classic|retail]",
    "\nDescription: Checks if an item is food",
    "undefined--@arg itemid: number _ The ID of the item/n--@return: boolean _ Returns true if the item is food, false otherwise/nfunction/nBANETO_IsItemFood/n(/n)/n"
  ],
  [
    "IsItemDrink [classic|retail]",
    "\nDescription: Checks if an item is drink",
    "undefined--@arg itemid: number _ The ID of the item/n--@return: boolean _ Returns true if the item is drink, false otherwise/nfunction/nBANETO_IsItemDrink/n(/n)/n"
  ],
  [
    "FindDrinkInBags [classic|retail]",
    "\nDescription: Finds drink in bags",
    "undefined--@return: bagID number bagID of the found drink, nil if not found/nfunction/nBANETO_FindDrinkInBags/n(/n)/n"
  ],
  [
    "IsWellFed [classic|retail]",
    "\nDescription: Checks if the player is well fed",
    "undefined--@return: boolean _ Returns true if the player is well fed, false otherwise/nfunction/nBANETO_IsWellFed/n(/n)/n"
  ],
  [
    "FindBuffFoodInBags [classic|retail]",
    "\nDescription: Finds buff food in bags",
    "undefined--@return: bagID number bagID of the found buff food, nil if not found/nfunction/nBANETO_FindBuffFoodInBags/n(/n)/n"
  ],
  [
    "ScanGraveyards [classic|retail]",
    "\nDescription: Scans for graveyards",
    "undefined--@return: table _ Returns a table of graveyard locations/nfunction/nBANETO_ScanGraveyards/n(/n)/n"
  ],
  [
    "GetClosestGraveyard [classic|retail]",
    "\nDescription: Gets the closest graveyard",
    "undefined--@return: string _ Returns the location of the closest graveyard/nfunction/nBANETO_GetClosestGraveyard/n(/n)/n"
  ],
  [
    "FindFoodInBags [classic|retail]",
    "\nDescription: Finds food in bags",
    "undefined--@return: bagID number bagID of the found food, nil if not found/nfunction/nBANETO_FindFoodInBags/n(/n)/n"
  ],
  [
    "GetFoodAmountInBags [classic|retail]",
    "\nDescription: Gets the amount of food in bags",
    "undefined--@return: number _ Returns the amount of food in bags/nfunction/nBANETO_GetFoodAmountInBags/n(/n)/n"
  ],
  [
    "HttpGETRequestCustom [classic|retail]",
    "\nDescription: Sends a HTTP GET request to a specified URL and handles the response with a specified callback handler",
    "undefined--@arg url: string _ The URL to send the request to/nfunction/n-- The callback handler to process the response/nreturn/n:/nnil/n]/n]/n--/nfunction/nHttpGETRequestCustom/n(/n,/n)/n"
  ],
  [
    "HttpGet [classic|retail]",
    "\nDescription: Sends a HTTP GET request to a specified URL and handles the response with a specified callback function",
    "undefined--@arg url1: string _ The URL to send the request to/nfunction/nreturn/n:/nnil/n]/n]/n--/nfunction/nBANETO_HttpGet/n(/n,/n)/n"
  ],
  [
    "HttpPost [classic|retail]",
    "\nDescription: Sends a HTTP POST request to a specified URL with a specified payload and handles the response with a specified callback function",
    "undefined--@arg url1: string _ The URL to send the request to/n--@arg payload: json _ The payload to send with the request/nfunction/nreturn/n:/nnil/n]/n]/n--/nfunction/nBANETO_HttpPost/n(/n,/n,/n)/n"
  ],
  [
    "HttpPut [classic|retail]",
    "\nDescription: Sends a HTTP PUT request to a specified URL with a specified payload and handles the response with a specified callback function",
    "undefined--@arg url1: string _ The URL to send the request to/n--@arg payload: json _ The payload to send with the request/nfunction/nreturn/n:/nnil/n]/n]/n--/nfunction/nBANETO_HttpPut/n(/n,/n,/n)/n"
  ],
  [
    "HttpRequestCustom [classic|retail]",
    "\nDescription: Sends a HTTP request to a specified URL",
    "undefined--@arg url: string _ The URL to send the request to/n--@return: string _ The response from the HTTP request/nfunction/nHttpRequestCustom/n(/n)/n"
  ],
  [
    "GoAnon [classic|retail]",
    "\nDescription: Hides characterspecific information so you can take screenshots or record videos without exposing your account to risk.",
    "undefined--@return: nil/nfunction/nBANETO_GoAnon/n(/n)/n"
  ],
  [
    "LoadOneZeroProfilelist [classic|retail]",
    "\nDescription: Loads the OneZero profile list",
    "undefined--@return: table _ Returns a table of the OneZero profiles/nfunction/nBANETO_LoadOneZeroProfilelist/n(/n)/n"
  ],
  [
    "IsOzDbAllowed [classic|retail]",
    "\nDescription: Checks if the Oz database is allowed",
    "undefined--@return: boolean _ Returns true if the Oz database is allowed, false otherwise/nfunction/nBANETO_IsOzDbAllowed/n(/n)/n"
  ],
  [
    "IsOzAllowed [classic|retail]",
    "\nDescription: Checks if Oz is allowed",
    "undefined--@return: boolean _ Returns true if Oz is allowed, false otherwise/nfunction/nBANETO_IsOzAllowed/n(/n)/n"
  ],
  [
    "LoadOneZeroDb [classic|retail]",
    "\nDescription: Loads the OneZero database",
    "undefined--@return: table _ Returns a table of the OneZero database/nfunction/nBANETO_LoadOneZeroDb/n(/n)/n"
  ],
  [
    "LoadOneZeroAuth [classic|retail]",
    "\nDescription: Loads the OneZero authentication",
    "undefined--@return: string _ Returns the OneZero authentication string/nfunction/nBANETO_LoadOneZeroAuth/n(/n)/n"
  ],
  [
    "GetDrinkAmountInBags [classic|retail]",
    "\nDescription: Retrieves the amount of drink items in bags.",
    "undefined--@return: number The number of drink items in bags./nfunction/nBANETO_GetDrinkAmountInBags/n(/n)/n"
  ],
  [
    "GetBestAmmoType [classic|retail]",
    "\nDescription: Determines the best ammo type available.",
    "undefined--@return: string The name of the best ammo type./nfunction/nBANETO_GetBestAmmoType/n(/n)/n"
  ],
  [
    "EquipBestAmmoType [classic|retail]",
    "\nDescription: Equips the best ammo type available.",
    "undefined--@return: nil/nfunction/nBANETO_EquipBestAmmoType/n(/n)/n"
  ],
  [
    "ForceQuit [classic|retail]",
    "\nDescription: Forces the game client to quit.",
    "undefined--@return: nil/nfunction/nBANETO_ForceQuit/n(/n)/n"
  ],
  [
    "GetAmmoAmountInBags [classic|retail]",
    "\nDescription: Retrieves the amount of ammo in bags.",
    "undefined--@return: number The number of ammo items in bags./nfunction/nBANETO_GetAmmoAmountInBags/n(/n)/n"
  ],
  [
    "UnitHealth [classic|retail]",
    "\nDescription: Retrieves the health of a specific unit in percentage.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The health of the unit./nfunction/nBANETO_UnitHealth/n(/n)/n"
  ],
  [
    "UnitHealthRaw [classic|retail]",
    "\nDescription: Retrieves the health of a specific unit.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The health of the unit./nfunction/nBANETO_UnitHealthRaw/n(/n)/n"
  ],
  [
    "UnitManaPercent [classic|retail]",
    "\nDescription: Retrieves the percentage of mana of a specific unit. Always returns 100 for class 1 and class 4.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The percentage of mana of the unit./nfunction/nBANETO_UnitManaPercent/n(/n)/n"
  ],
  [
    "UnitMana [classic|retail]",
    "\nDescription: Retrieves the mana of a specific unit in percentage.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The mana of the unit./nfunction/nBANETO_UnitMana/n(/n)/n"
  ],
  [
    "GetObjectWithCoordinates [classic|retail]",
    "\nDescription: Retrieves an object with specific coordinates.",
    "undefined--@arg x: number, The X_coordinate of the object./n--@arg y: number, The Y_coordinate of the object./n--@arg z: number, The Z_coordinate of the object./n--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithCoordinates/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetObjectWithIdTiny [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID in close proximity.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdTiny/n(/n)/n"
  ],
  [
    "GetObjectWithIdClose [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID in close proximity.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdClose/n(/n)/n"
  ],
  [
    "GetObjectWithIdMedium [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID in medium proximity.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdMedium/n(/n)/n"
  ],
  [
    "GetObjectWithIdIncludingBlacklistCheck [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID, includes blacklist check.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdIncludingBlacklistCheck/n(/n)/n"
  ],
  [
    "GetObjectWithId [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithId/n(/n)/n"
  ],
  [
    "CheckMammothSpammer [classic|retail]",
    "\nDescription: Checks for Mammoth spammers.",
    "undefined--@return: boolean True if a spammer is detected, otherwise false./nfunction/nBANETO_CheckMammothSpammer/n(/n)/n"
  ],
  [
    "IsInsideDungeon [classic]",
    "\nDescription: Checks if the player is inside a dungeon.",
    "undefined--@return: boolean True if the player is inside a dungeon, otherwise false./nfunction/nBANETO_IsInsideDungeon/n(/n)/n"
  ],
  [
    "TestHs [classic]",
    "\nDescription: Tests the hearthstone.",
    "undefined--@return: nil/nfunction/nBANETO_TestHs/n(/n)/n"
  ],
  [
    "MakesHsUsageSense [classic|retail]",
    "\nDescription: Checks if using hearthstone makes sense at the moment.",
    "undefined--@return: boolean True if using the hearthstone makes sense, otherwise false./nfunction/nBANETO_MakesHsUsageSense/n(/n)/n"
  ],
  [
    "GetObjectLocationWithId [classic|retail]",
    "\nDescription: Retrieves the location of an object with a specific ID.",
    "undefined--@arg id: string, The ID of the object./n--@return: x number The X_coordinate of the object./nfunction/nGetObjectLocationWithId/n(/n)/n"
  ],
  [
    "IsMailboxObject [classic|retail]",
    "\nDescription: Checks if an object is a mailbox.",
    "undefined--@arg id: string, The ID of the object./n--@return: boolean True if the object is a mailbox, otherwise false./nfunction/nBANETO_IsMailboxObject/n(/n)/n"
  ],
  [
    "MailboxInteract [classic|retail]",
    "\nDescription: Interacts with a mailbox.",
    "undefined--@return: nil/nfunction/nBANETO_MailboxInteract/n(/n)/n"
  ],
  [
    "GetSkillLineIndexWithTradeName [classic]",
    "\nDescription: Retrieves the index of a skill line with a specific trade name.",
    "undefined--@arg tradename: string, The name of the trade./n--@return: number The index of the skill line./nfunction/nBANETO_GetSkillLineIndexWithTradeName/n(/n)/n"
  ],
  [
    "GetSkillLineIndexWithItemId [classic|retail]",
    "\nDescription: Retrieves the index of a skill line with a specific item ID.",
    "undefined--@arg itemid: string, The ID of the item./n--@return: number The index of the skill line./nfunction/nBANETO_GetSkillLineIndexWithItemId/n(/n)/n"
  ],
  [
    "GetAcherusEtage [classic]",
    "\nDescription: Determines the current floor in Acherus.",
    "undefined--@return: number The current floor./nfunction/nBANETO_GetAcherusEtage/n(/n)/n"
  ],
  [
    "MoveAcherusEtage [classic]",
    "\nDescription: Moves between floors in Acherus.",
    "undefined--@arg upOrDown: string, Direction to move (\"up\" or \"down\")./n--@return: nil/nfunction/nBANETO_MoveAcherusEtage/n(/n)/n"
  ],
  [
    "Craft [classic|retail]",
    "\nDescription: Crafts an item with a specific index.",
    "undefined--@arg index: number, The index of the item to craft./n--@return: nil/nfunction/nBANETO_Craft/n(/n)/n"
  ],
  [
    "UseContainerItem [classic|retail]",
    "\nDescription: Uses an item from a bag.",
    "undefined--@arg i: bag Index/n--@arg z: slot/nfunction/nBANETO_UseContainerItem/n(/n,/n)/n"
  ],
  [
    "GetSpellCooldown [classic|retail]",
    "\nDescription: Get a spell's cooldown in seconds.",
    "undefined--@arg spellid: number/n--@return: duration/nfunction/nBANETO_GetSpellCooldown/n(/n)/n"
  ],
  [
    "StartPetAttackWarlock [classic]",
    "\nDescription: Instruct your Warlock pet to attack.",
    "undefinedfunction/nBANETO_StartPetAttackWarlock/n(/n)/n"
  ],
  [
    "StartPetAttack [classic]",
    "\nDescription: Instruct your pet to attack.",
    "undefinedfunction/nBANETO_StartPetAttack/n(/n)/n"
  ],
  [
    "DelayStateTick [classic|retail]",
    "\nDescription: Delay the next state tick by seconds.",
    "undefined--@arg seconds: number/nfunction/nBANETO_DelayStateTick/n(/n)/n"
  ],
  [
    "HunterStopShot [classic]",
    "\nDescription: Stop auto casting spells.",
    "undefined--@arg name: string: name of spell to stop/nfunction/nBANETO_HunterStopShot/n(/n)/n"
  ],
  [
    "GetBanetoProfileType [classic]",
    "\nDescription: Returns the type of the currently loaded profile.",
    "undefined--@return: string/nfunction/nGetBanetoProfileType/n(/n)/n"
  ],
  [
    "PrintPlugin [classic|retail]",
    "\nDescription: Print something to the chat frame denoting a plugin.",
    "undefined--@arg message: string/nfunction/nBANETO_PrintPlugin/n(/n)/n"
  ],
  [
    "GetSessionTime [classic|retail]",
    "\nDescription: Returns the number of seconds the bot has been loaded.",
    "undefined--@return: number/nfunction/nBANETO_GetSessionTime/n(/n)/n"
  ],
  [
    "reloadUi [classic|retail]",
    "\nDescription: Reload the UI.",
    "undefinedfunction/nreloadUi/n(/n)/n"
  ],
  [
    "LoadOfficialPaid [classic|retail]",
    "\nDescription: Load an official (paid) profile",
    "undefined--@arg packName: string/n--@arg profile: string/nfunction/nBANETO_LoadOfficialPaid/n(/n,/n)/n"
  ],
  [
    "GetPlayerCorpsePosition [classic|retail]",
    "\nDescription: Get the player's corpse position",
    "undefined--@return: x number the x coordinate of the player's corpse/nfunction/nBANETO_GetPlayerCorpsePosition/n(/n)/n"
  ],
  [
    "GetState [classic|retail]",
    "\nDescription: Returns the state the bot is currently in.",
    "undefined--@return: string/nfunction/nBANETO_GetState/n(/n)/n"
  ],
  [
    "IsFlyingAscendNeeded [classic|retail]",
    "\nDescription: Checks if ascending flight is required for the player's current position.",
    "undefined--@return: boolean: Returns true if ascending flight is needed, false otherwise./nfunction/nBANETO_IsFlyingAscendNeeded/n(/n)/n"
  ],
  [
    "GetZoneId [classic|retail]",
    "\nDescription: Return the zone's ID.",
    "undefined--@return: number/nfunction/nBANETO_GetZoneId/n(/n)/n"
  ],
  [
    "GetMapId [classic|retail]",
    "\nDescription: Return the map's ID.",
    "undefined--@return: ID number the map ID/nfunction/nBANETO_GetMapId/n(/n)/n"
  ],
  [
    "StopMovementWithoutDeletingPath [classic|retail]",
    "\nDescription: Stop movement but keep the path available.",
    "undefinedfunction/nBANETO_StopMovementWithoutDeletingPath/n(/n)/n"
  ],
  [
    "CanUseRepairBotInsideDungeon [classic]",
    "\nDescription: Check if the bot can use a repair bot inside a dungeon.",
    "undefined--@return: boolean/nfunction/nBANETO_CanUseRepairBotInsideDungeon/n(/n)/n"
  ],
  [
    "HasRepBotItem [classic]",
    "\nDescription: Check to see if the player has a repair bot item.",
    "undefined--@return: boolean/nfunction/nBANETO_HasRepBotItem/n(/n)/n"
  ],
  [
    "FindRepBot [classic]",
    "\nDescription: Finds the closest repair bot to the player",
    "undefined--@return: object/nfunction/nBANETO_FindRepBot/n(/n)/n"
  ],
  [
    "SetBanetoTarget [classic|retail]",
    "\nDescription: Set the BANETO_TARGET variable, anytime you change targets (@see UnlockedTargetUnit) you should call this function.",
    "undefined--@arg unit: string/nfunction/nBANETO_SetBanetoTarget/n(/n)/n"
  ],
  [
    "StopMovement [classic|retail]",
    "\nDescription: Stop all movement and clear path.",
    "undefinedfunction/nBANETO_StopMovement/n(/n)/n"
  ],
  [
    "LoadCustomTravelProfile [classic|retail]",
    "\nDescription: Load a custom travel profile",
    "undefined--@arg profileName: string/nfunction/nBANETO_LoadCustomTravelProfile/n(/n)/n"
  ],
  [
    "IsPackQuester [classic|retail]",
    "\nDescription: Is the packName a Quest pack.",
    "undefined--@arg packName: string/n--@return: boolean/nfunction/nBANETO_IsPackQuester/n(/n)/n"
  ],
  [
    "GetFirstProfileOfPack [classic|retail]",
    "\nDescription: Get the first profile of a given pack.",
    "undefined--@arg packName: string/n--@return: string/nfunction/nBANETO_GetFirstProfileOfPack/n(/n)/n"
  ],
  [
    "GetTarget [classic|retail]",
    "\nDescription: Return the current baneto internal target, do not confuse it with your wow target.",
    "undefined--@return: object/nfunction/nBANETO_GetTarget/n(/n)/n"
  ],
  [
    "IsPaidPackInstalled [classic|retail]",
    "\nDescription: Is a paid pack already installed?",
    "undefined--@arg packName: string/n--@return: boolean/nfunction/nBANETO_IsPaidPackInstalled/n(/n)/n"
  ],
  [
    "InstallPaidPack [classic|retail]",
    "\nDescription: Install a paid pack",
    "undefined--@arg packName: string/nfunction/nBANETO_InstallPaidPack/n(/n)/n"
  ],
  [
    "LoadTravelProfile [classic|retail]",
    "\nDescription: Load a predefined travel profile.",
    "undefined--@arg name: string/nfunction/nBANETO_LoadTravelProfile/n(/n)/n"
  ],
  [
    "GameObjectType [classic|retail]",
    "\nDescription: Get a gameObject's type",
    "undefined--@arg gameObject: GameObject/n--@return: number/nfunction/nBANETO_GameObjectType/n(/n)/n"
  ],
  [
    "LoadBgProfile [classic|retail]",
    "\nDescription: Load a battleground profile.",
    "undefined--@arg name: string/nfunction/nBANETO_LoadBgProfile/n(/n)/n"
  ],
  [
    "IsTrainStateRequired [classic|retail]",
    "\nDescription: Check if the character should visit a class trainer.",
    "undefined--@return: boolean/nfunction/nBANETO_IsTrainStateRequired/n(/n)/n"
  ],
  [
    "IsProfTrainStateRequired [classic|retail]",
    "\nDescription: Check if the character should visit a profession trainer.",
    "undefined--@return: boolean/nfunction/nBANETO_IsProfTrainStateRequired/n(/n)/n"
  ],
  [
    "AreWeDazed [classic|retail]",
    "\nDescription: Check if the character is dazed.",
    "undefined--@return: boolean/nfunction/nBANETO_AreWeDazed/n(/n)/n"
  ],
  [
    "IsReviveSecure [classic|retail]",
    "\nDescription: Check if it's safe to revive.",
    "undefined--@return: boolean/nfunction/nBANETO_IsReviveSecure/n(/n)/n"
  ],
  [
    "GetRandomPointOnCircleNEW [classic|retail]",
    "\nDescription: Get a random point on a specified circle",
    "undefined--@arg centerX: number/n--@arg centerY: number/n--@arg centerZ: number/n--@arg radius: number/n--@return: x number the x coordinate of the generated point/nfunction/nBANETO_GetRandomPointOnCircleNEW/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetRandomPointInCircleNEW [classic|retail]",
    "\nDescription: Get a random point in a specified circle",
    "undefined--@arg centerX: number/n--@arg centerY: number/n--@arg centerZ: number/n--@arg radius: number/n--@return: x number the x coordinate of the generated point/nfunction/nBANETO_GetRandomPointInCircleNEW/n(/n,/n,/n,/n)/n"
  ],
  [
    "DebugProfessionSkills [classic]",
    "\nDescription: Outputs debugging information related to the player's professions.",
    "undefinedfunction/nBANETO_DebugProfessionSkills/n(/n)/n"
  ],
  [
    "DistanceToProfileIsOkay [classic]",
    "\nDescription: Checks if the current player's distance to the set profile is within an acceptable range.",
    "undefined--@return: boolean: Returns true if the distance is acceptable, false otherwise./nfunction/nBANETO_DistanceToProfileIsOkay/n(/n)/n"
  ],
  [
    "StartStop [classic|retail]",
    "\nDescription: Toggle Baneto operation, starting or stopping as required.",
    "undefinedfunction/nBANETO_StartStop/n(/n)/n"
  ],
  [
    "GetCurrentCenterIndex [classic|retail]",
    "\nDescription: Get the index of the currently active spot in the profile.",
    "undefined--@return: number: The index of the current spot./nfunction/nBANETO_GetCurrentCenterIndex/n(/n)/n"
  ],
  [
    "Start [classic|retail]",
    "\nDescription: Start Baneto bot.",
    "undefinedfunction/nBANETO_Start/n(/n)/n"
  ],
  [
    "IsLastProfileATaskInTaskmanager [classic|retail]",
    "\nDescription: Check if the last loaded profile was part of a task in the task manager.",
    "undefined--@return: boolean: Returns true if the last profile was a task, false otherwise./nfunction/nBANETO_IsLastProfileATaskInTaskmanager/n(/n)/n"
  ],
  [
    "StartTaskmanager [classic|retail]",
    "\nDescription: Initiate task manager.",
    "undefinedfunction/nBANETO_StartTaskmanager/n(/n)/n"
  ],
  [
    "GetCurrentTaskmanagerProfile [classic|retail]",
    "\nDescription: Get the name of the currently active task manager profile.",
    "undefined--@return: string: The name of the current task manager profile./nfunction/nBANETO_GetCurrentTaskmanagerProfile/n(/n)/n"
  ],
  [
    "RemoveTaskByIndex [classic|retail]",
    "\nDescription: Remove a task from the task manager by its index.",
    "undefined--@arg index: number: The index of the task to be removed./nfunction/nBANETO_RemoveTaskByIndex/n(/n)/n"
  ],
  [
    "VisualizeTask [classic|retail]",
    "\nDescription: Visualize a task for a specified duration.",
    "undefined--@arg name: string: The name of the task to visualize./n--@arg duration: number: The duration for which to visualize the task (in seconds)./nfunction/nBANETO_VisualizeTask/n(/n,/n)/n"
  ],
  [
    "AddTask [classic|retail]",
    "\nDescription: Add a task to the task manager.",
    "undefined--@arg taskType: string: The type of the task./n--@arg taskDuration: number: The duration of the task (in seconds)./n--@arg fileName: string: The name of the task file./n--@arg isLocal: boolean: If true, the task file is local. If false, it's remote./nfunction/nBANETO_AddTask/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetCenterIndexInFlyingPath [classic|retail]",
    "\nDescription: Get the index of the center in the current flying path.",
    "undefined--@arg path: table: The flying path as an array of coordinates./n--@return: number: The index of the center in the flying path./nfunction/nBANETO_GetCenterIndexInFlyingPath/n(/n)/n"
  ],
  [
    "GetCenterIndexInPath [classic|retail]",
    "\nDescription: Get the index of the center in the current path.",
    "undefined--@arg path: table: The path as an array of coordinates./n--@return: number: The index of the center in the path./nfunction/nBANETO_GetCenterIndexInPath/n(/n)/n"
  ],
  [
    "GetCenterIndexForPath [classic|retail]",
    "\nDescription: Get the index of the center for the specified path type.",
    "undefined--@arg type: string: The type of path./n--@return: number: The index of the center for the specified path./nfunction/nBANETO_GetCenterIndexForPath/n(/n)/n"
  ],
  [
    "GetClosestPathIndex [classic|retail]",
    "\nDescription: Get the closest index of the path to the player's current position.",
    "undefined--@return: number: The closest index of the path./nfunction/nBANETO_GetClosestPathIndex/n(/n)/n"
  ],
  [
    "GetCenterIndexForGrinder [classic|retail]",
    "\nDescription: Get the index of the center for the current grinder.",
    "undefined--@return: number: The index of the center for the grinder./nfunction/nBANETO_GetCenterIndexForGrinder/n(/n)/n"
  ],
  [
    "FlyingPathDeleter [classic|retail]",
    "\nDescription: Delete the current flying path.",
    "undefinedfunction/nBANETO_FlyingPathDeleter/n(/n)/n"
  ],
  [
    "GroundPathDeleter [classic|retail]",
    "\nDescription: Delete the current ground path.",
    "undefinedfunction/nBANETO_GroundPathDeleter/n(/n)/n"
  ],
  [
    "TurnStop [classic|retail]",
    "\nDescription: Stop turning.",
    "undefinedfunction/nBANETO_TurnStop/n(/n)/n"
  ],
  [
    "ResetFlyingPath [classic]",
    "\nDescription: Reset the current flying path.",
    "undefinedfunction/nBANETO_ResetFlyingPath/n(/n)/n"
  ],
  [
    "Stop [classic|retail]",
    "\nDescription: Stop Baneto operation.",
    "undefinedfunction/nBANETO_Stop/n(/n)/n"
  ],
  [
    "GetWorstEnemyInBg [classic|retail]",
    "\nDescription: Get the favorable enemy in the battleground.",
    "undefined--@return: string: The name of the favorable enemy./nfunction/nBANETO_GetWorstEnemyInBg/n(/n)/n"
  ],
  [
    "GetBestFriendInBg [classic|retail]",
    "\nDescription: Get the most favorable friend in the battleground.",
    "undefined--@return: string: The name of the most favorable friend./nfunction/nBANETO_GetBestFriendInBg/n(/n)/n"
  ],
  [
    "IsLastProfileBattleground [classic|retail]",
    "\nDescription: Check if the last loaded profile was for a battleground.",
    "undefined--@return: boolean: Returns true if the last profile was for a battleground, false otherwise./nfunction/nBANETO_IsLastProfileBattleground/n(/n)/n"
  ],
  [
    "IsLastProfileDungeon [classic|retail]",
    "\nDescription: Check if the last loaded profile was for a dungeon.",
    "undefined--@return: boolean: Returns true if the last profile was for a dungeon, false otherwise./nfunction/nBANETO_IsLastProfileDungeon/n(/n)/n"
  ],
  [
    "IsLastProfileQuesting [classic|retail]",
    "\nDescription: Check if the last loaded profile was for questing.",
    "undefined--@return: boolean: Returns true if the last profile was for questing, false otherwise./nfunction/nBANETO_IsLastProfileQuesting/n(/n)/n"
  ],
  [
    "IsLastProfileEternal [classic|retail]",
    "\nDescription: Check if the last loaded profile was for an eternal event.",
    "undefined--@return: boolean: Returns true if the last profile was for an eternal event, false otherwise./nfunction/nBANETO_IsLastProfileEternal/n(/n)/n"
  ],
  [
    "IsLastProfileGathering [classic|retail]",
    "\nDescription: Check if the last loaded profile was for gathering.",
    "undefined--@return: boolean: Returns true if the last profile was for gathering, false otherwise./nfunction/nBANETO_IsLastProfileGathering/n(/n)/n"
  ],
  [
    "IsLastProfileTraveling [classic|retail]",
    "\nDescription: Check if the last loaded profile was for traveling.",
    "undefined--@return: boolean: Returns true if the last profile was for traveling, false otherwise./nfunction/nBANETO_IsLastProfileTraveling/n(/n)/n"
  ],
  [
    "IsLastProfileGold [classic|retail]",
    "\nDescription: Check if the last loaded profile was for gold farming.",
    "undefined--@return: boolean: Returns true if the last profile was for gold farming, false otherwise./nfunction/nBANETO_IsLastProfileGold/n(/n)/n"
  ],
  [
    "IsNearQuestSpots [classic]",
    "\nDescription: Check if the player is near quest spots.",
    "undefined--@return: boolean: Returns true if the player is near quest spots, false otherwise./nfunction/nBANETO_IsNearQuestSpots/n(/n)/n"
  ],
  [
    "GetLastProfile [classic|retail]",
    "\nDescription: Get the last loaded profile.",
    "undefined--@return: string: The name of the last loaded profile./nfunction/nBANETO_GetLastProfile/n(/n)/n"
  ],
  [
    "ReloadLastProfile [classic|retail]",
    "\nDescription: Reload the last loaded profile.",
    "undefinedfunction/nBANETO_ReloadLastProfile/n(/n)/n"
  ],
  [
    "ReloadAndStartLastProfile [classic|retail]",
    "\nDescription: Reload and start the last loaded profile.",
    "undefinedfunction/nBANETO_ReloadAndStartLastProfile/n(/n)/n"
  ],
  [
    "Customer [classic|retail]",
    "\nDescription: Return the Baneto username.",
    "undefined--@return: string: The username of the Baneto customer./nfunction/nBANETO_Customer/n(/n)/n"
  ],
  [
    "AddItemToNeverSell [classic|retail]",
    "\nDescription: Add an item to the list that should never be sold.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToNeverSell/n(/n)/n"
  ],
  [
    "IsItemInUsageList [classic|retail]",
    "\nDescription: Check if the specified item is in the usage list.",
    "undefined--@arg itemname: string: The name of the item./n--@return: boolean: Returns true if the item is in the usage list, false otherwise./nfunction/nBANETO_IsItemInUsageList/n(/n)/n"
  ],
  [
    "RemoveItemFromUsageList [classic|retail]",
    "\nDescription: Remove an item from the usage list.",
    "undefined--@arg itemname: string: The name of the item to be removed./nfunction/nBANETO_RemoveItemFromUsageList/n(/n)/n"
  ],
  [
    "VisualizeUsageList [classic|retail]",
    "\nDescription: Display the items in the usage list.",
    "undefinedfunction/nBANETO_VisualizeUsageList/n(/n)/n"
  ],
  [
    "AddItemToUsageList [classic|retail]",
    "\nDescription: Add an item to the usage list.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToUsageList/n(/n)/n"
  ],
  [
    "AddItemToDeleteList [classic|retail]",
    "\nDescription: Add an item to the list that should automatically be deleted.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToDeleteList/n(/n)/n"
  ],
  [
    "AddItemToNeverDisenchant [classic|retail]",
    "\nDescription: Add an item to the list that should never be disenchanted.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToNeverDisenchant/n(/n)/n"
  ],
  [
    "AddItemToAlwaysMail [classic|retail]",
    "\nDescription: Add an item to the list that should always be mailed.",
    "undefined--@arg itemname: string/nfunction/nBANETO_AddItemToAlwaysMail/n(/n)/n"
  ],
  [
    "AddItemToNeverMail [classic|retail]",
    "\nDescription: Add an item to the list that should never be mailed.",
    "undefined--@arg itemname: string/nfunction/nBANETO_AddItemToNeverMail/n(/n)/n"
  ],
  [
    "IsEntryInGlobalBlacklist [classic|retail]",
    "\nDescription: Checks whether an ID is in the global blacklist from the user's blacklist tab.",
    "undefined--@arg id: <value>/n--@return: boolean/nfunction/nBANETO_IsEntryInGlobalBlacklist/n(/n)/n"
  ],
  [
    "RemoveItemFromNeverSell [classic|retail]",
    "\nDescription: Remove an item from the list that should never be sold.",
    "undefined--@arg itemname: string/nfunction/nBANETO_RemoveItemFromNeverSell/n(/n)/n"
  ],
  [
    "RemoveItemFromDeleteList [classic|retail]",
    "\nDescription: Remove an item from the list that should be deleted.",
    "undefined--@arg itemname: string/nfunction/nBANETO_RemoveItemFromDeleteList/n(/n)/n"
  ],
  [
    "RemoveItemFromNeverDisenchant [classic|retail]",
    "\nDescription: Remove an item from the list that should never be disenchanted.",
    "undefined--@arg itemname: string/nfunction/nBANETO_RemoveItemFromNeverDisenchant/n(/n)/n"
  ],
  [
    "IsEntryInGlobalObjectlist [classic|retail]",
    "\nDescription: Check if an entry exists in the global object list.",
    "undefined--@arg id: number: The ID of the entry to be checked./n--@return: boolean: Returns true if the entry exists in the global object list, false otherwise./nfunction/nBANETO_IsEntryInGlobalObjectlist/n(/n)/n"
  ],
  [
    "VisualizeGlobalObjectList [classic|retail]",
    "\nDescription: Display the global object list.",
    "undefinedfunction/nBANETO_VisualizeGlobalObjectList/n(/n)/n"
  ],
  [
    "RemoveCustomObjectIDGlobal [classic|retail]",
    "\nDescription: Remove a custom object ID from the global list.",
    "undefined--@arg id: number: The ID of the object to be removed./nfunction/nBANETO_RemoveCustomObjectIDGlobal/n(/n)/n"
  ],
  [
    "DefineCustomObjectIDGlobal [classic|retail]",
    "\nDescription: Add a custom object ID to the global list.",
    "undefined--@arg id: number: The ID of the object to be added./nfunction/nBANETO_DefineCustomObjectIDGlobal/n(/n)/n"
  ],
  [
    "RemoveEntryFromGlobalMobIdBlacklist [classic|retail]",
    "\nDescription: Remove an entry from the global mob ID blocklist.",
    "undefined--@arg id: number: The ID of the mob to be removed from the blocklist./nfunction/nBANETO_RemoveEntryFromGlobalMobIdBlacklist/n(/n)/n"
  ],
  [
    "RemoveItemFromNeverMail [classic|retail]",
    "\nDescription: Remove an item from the list that should never be mailed.",
    "undefined--@arg itemname: string: The name of the item to be removed./nfunction/nBANETO_RemoveItemFromNeverMail/n(/n)/n"
  ],
  [
    "RemoveItemFromAlwaysMail [classic|retail]",
    "\nDescription: Remove an item from the list that should always be mailed.",
    "undefined--@arg itemname: string: The name of the item to be removed./nfunction/nBANETO_RemoveItemFromAlwaysMail/n(/n)/n"
  ],
  [
    "ClearUserList [classic|retail]",
    "\nDescription: Clear a user list.",
    "undefined--@arg listname: string: The name of the list to be cleared./n--@arg force: boolean: Whether to force clear the list./nfunction/nBANETO_ClearUserList/n(/n,/n)/n"
  ],
  [
    "VisualizeGlobalMobIdBlacklist [classic|retail]",
    "\nDescription: Display the global mob ID blacklist.",
    "undefinedfunction/nBANETO_VisualizeGlobalMobIdBlacklist/n(/n)/n"
  ],
  [
    "VisualizeDoNotSellList [classic|retail]",
    "\nDescription: Display the \"Do Not Sell\" list.",
    "undefinedfunction/nBANETO_VisualizeDoNotSellList/n(/n)/n"
  ],
  [
    "VisualizeDeleteList [classic|retail]",
    "\nDescription: Display the delete list.",
    "undefinedfunction/nBANETO_VisualizeDeleteList/n(/n)/n"
  ],
  [
    "VisualizeDoNotDisenchantList [classic|retail]",
    "\nDescription: Display the \"Do Not Disenchant\" list.",
    "undefinedfunction/nBANETO_VisualizeDoNotDisenchantList/n(/n)/n"
  ],
  [
    "VisualizeDoNotMailList [classic|retail]",
    "\nDescription: Display the \"Do Not Mail\" list.",
    "undefinedfunction/nBANETO_VisualizeDoNotMailList/n(/n)/n"
  ],
  [
    "VisualizeAlwaysMailList [classic|retail]",
    "\nDescription: Display the \"Always Mail\" list.",
    "undefinedfunction/nBANETO_VisualizeAlwaysMailList/n(/n)/n"
  ],
  [
    "SpellbookDebug [classic|retail]",
    "\nDescription: Output debugging information for the spellbook.",
    "undefinedfunction/nBANETO_SpellbookDebug/n(/n)/n"
  ],
  [
    "CastSpellOnGround [classic|retail]",
    "\nDescription: Cast a spell on the ground near a specified unit.",
    "undefined--@arg spellid: number: The ID of the spell to be cast./n--@arg unit: unit: The unit near which to cast the spell./nfunction/nBANETO_CastSpellOnGround/n(/n,/n)/n"
  ],
  [
    "IsSpellKnownNoSettingsCheck [classic]",
    "\nDescription: Check if a spell is known by the character without checking the settings.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is known, false otherwise./nfunction/nBANETO_IsSpellKnownNoSettingsCheck/n(/n)/n"
  ],
  [
    "IsSpellKnown [classic|retail]",
    "\nDescription: Check if a spell is known by the character.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is known, false otherwise./nfunction/nBANETO_IsSpellKnown/n(/n)/n"
  ],
  [
    "IsSpellUsableNoSettingsCheck [classic]",
    "\nDescription: Check if a spell is usable without checking the settings.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is usable, false otherwise./nfunction/nBANETO_IsSpellUsableNoSettingsCheck/n(/n)/n"
  ],
  [
    "BlockSpellTemp [classic]",
    "\nDescription: Temporarily block a spell.",
    "undefined--@arg spellid: number: The ID of the spell to be blocked./n--@arg seconds: number: The duration for which the spell should be blocked./nfunction/nBANETO_BlockSpellTemp/n(/n,/n)/n"
  ],
  [
    "IsSpellUsable [classic|retail]",
    "\nDescription: Check if a spell is usable.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is usable, false otherwise./nfunction/nBANETO_IsSpellUsable/n(/n)/n"
  ],
  [
    "CanIBuffThisUnit [classic]",
    "\nDescription: Check if a specified unit can be buffed by the player.",
    "undefined--@arg unit: unit: The unit to be checked./n--@return: boolean: Returns true if the unit can be buffed, false otherwise./nfunction/nBANETO_CanIBuffThisUnit/n(/n)/n"
  ],
  [
    "FriendNeedsBuffScanner [classic]",
    "\nDescription: Scans whether a friend character needs buffing",
    "undefined--@return: boolean/nfunction/nBANETO_FriendNeedsBuffScanner/n(/n)/n"
  ],
  [
    "IsFriendGettingAttackedDungeon [classic]",
    "\nDescription: Checks if a friend is being attacked within a dungeon",
    "undefined--@return: boolean/nfunction/nBANETO_IsFriendGettingAttackedDungeon/n(/n)/n"
  ],
  [
    "SelectFriendLowHpDungeon [classic]",
    "\nDescription: Selects a friend with low HP within a dungeon",
    "undefined--@return: boolean/nfunction/nBANETO_SelectFriendLowHpDungeon/n(/n)/n"
  ],
  [
    "PlayerHasMana [classic]",
    "\nDescription: Checks if the player has sufficient mana",
    "undefined--@return: boolean/nfunction/nBANETO_PlayerHasMana/n(/n)/n"
  ],
  [
    "IsPlayerRooted [classic|retail]",
    "\nDescription: Checks if the player is rooted or unable to move",
    "undefined--@return: boolean/nfunction/nBANETO_IsPlayerRooted/n(/n)/n"
  ],
  [
    "UbrsThrowPull [classic]",
    "\nDescription: Initiates a ranged pull in UBRS at the specified coordinates within a certain radius",
    "undefined--@arg x: number/n--@arg y: number/n--@arg z: number/n--@arg radius: number/nfunction/nBANETO_UbrsThrowPull/n(/n,/n,/n,/n)/n"
  ],
  [
    "RangePullThrow [classic]",
    "\nDescription: Initiates a ranged pull throw",
    "undefinedfunction/nBANETO_RangePullThrow/n(/n)/n"
  ],
  [
    "NumAvailableRunesDk [classic|retail]",
    "\nDescription: Returns the number of available runes of a specific type for a Death Knight",
    "undefined--@arg runeType: string/n--@return: number/nfunction/nBANETO_NumAvailableRunesDk/n(/n)/n"
  ],
  [
    "GetCombatRange [classic|retail]",
    "\nDescription: Returns the combat range of the player",
    "undefined--@return: number/nfunction/nBANETO_GetCombatRange/n(/n)/n"
  ],
  [
    "ClearGuidBlacklist [classic|retail]",
    "\nDescription: Clears the GUID blacklist",
    "undefinedfunction/nBANETO_ClearGuidBlacklist/n(/n)/n"
  ],
  [
    "ClearGuidEngagedlist [classic|retail]",
    "\nDescription: Clears the GUID engaged list",
    "undefinedfunction/nBANETO_ClearGuidEngagedlist/n(/n)/n"
  ],
  [
    "AddMobToGuidBlacklist [classic|retail]",
    "\nDescription: Adds the specified unit to the GUID blacklist",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToGuidBlacklist/n(/n)/n"
  ],
  [
    "AddMobToPolymorphList [classic|retail]",
    "\nDescription: Adds the specified unit to the list of mobs to be polymorphed",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToPolymorphList/n(/n)/n"
  ],
  [
    "AddMobToPriestPainedList [classic|retail]",
    "\nDescription: Adds the specified unit to a list of pained units for a priest",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToPriestPainedList/n(/n)/n"
  ],
  [
    "AddMobToGuidGatheredList [classic|retail]",
    "\nDescription: Adds the specified unit to the GUID gathered list",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToGuidGatheredList/n(/n)/n"
  ],
  [
    "IsGuidContainedInGuidGatherlist [classic|retail]",
    "\nDescription: Checks if a GUID is in the gathered list",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInGuidGatherlist/n(/n)/n"
  ],
  [
    "DeleteEntryInGuidBlacklist [classic|retail]",
    "\nDescription: Deletes an entry in the GUID blacklist using the provided GUID",
    "undefined--@arg guid: string/nfunction/nBANETO_DeleteEntryInGuidBlacklist/n(/n)/n"
  ],
  [
    "IsGuidContainedInGuidBlacklist [classic|retail]",
    "\nDescription: Checks if a GUID is in the GUID blacklist",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInGuidBlacklist/n(/n)/n"
  ],
  [
    "IsGuidContainedInEngagedList [classic|retail]",
    "\nDescription: Checks if a GUID is in the engaged list",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInEngagedList/n(/n)/n"
  ],
  [
    "IsMobContainedInPolymorphedList [classic|retail]",
    "\nDescription: Checks if a mob is in the polymorphed list using its GUID",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsMobContainedInPolymorphedList/n(/n)/n"
  ],
  [
    "IsGuidContainedInPainedList [classic|retail]",
    "\nDescription: Checks if a GUID is in the pained list",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInPainedList/n(/n)/n"
  ],
  [
    "SetActiveCenterIndexDungeon [classic]",
    "\nDescription: Sets the active center index for a dungeon",
    "undefined--@arg arg: number/nfunction/nBANETO_SetActiveCenterIndexDungeon/n(/n)/n"
  ],
  [
    "GetActiveCenterIndexDungeon [classic]",
    "\nDescription: Gets the active center index for a dungeon",
    "undefined--@return: number/nfunction/nBANETO_GetActiveCenterIndexDungeon/n(/n)/n"
  ],
  [
    "GetActiveCenterIndex [classic|retail]",
    "\nDescription: Gets the active center index",
    "undefined--@return: number/nfunction/nBANETO_GetActiveCenterIndex/n(/n)/n"
  ],
  [
    "HasKeyInKeyRing [classic]",
    "\nDescription: Checks if a key exists in the keyring using its item ID",
    "undefined--@arg itemid: number/n--@return: boolean/nfunction/nBANETO_HasKeyInKeyRing/n(/n)/n"
  ],
  [
    "DeleteItemInKeyRing [classic]",
    "\nDescription: Deletes an item in the keyring using its item ID",
    "undefined--@arg itemid: number/nfunction/nBANETO_DeleteItemInKeyRing/n(/n)/n"
  ],
  [
    "DeleteItem [classic|retail]",
    "\nDescription: Deletes an item using its item ID",
    "undefined--@arg itemid: number/nfunction/nBANETO_DeleteItem/n(/n)/n"
  ],
  [
    "CustomUsageItems [classic|retail]",
    "\nDescription: Handles custom item usage",
    "undefinedfunction/nBANETO_CustomUsageItems/n(/n)/n"
  ],
  [
    "GetItemCooldown [classic|retail]",
    "\nDescription: Gets the cooldown of an item using its index",
    "undefined--@arg i: number/n--@return: number/nfunction/nGetItemCooldown/n(/n)/n"
  ],
  [
    "GetContainerItemLink [classic|retail]",
    "\nDescription: Gets the item link of an item in a container using the container and item indices",
    "undefined--@arg i: number/n--@arg z: number/n--@return: string/nfunction/nGetContainerItemLink/n(/n,/n)/n"
  ],
  [
    "GetContainerNumSlots [classic|retail]",
    "\nDescription: Gets the number of slots in a container using its index",
    "undefined--@arg i: number/n--@return: number/nfunction/nGetContainerNumSlots/n(/n)/n"
  ],
  [
    "GetContainerItemID [classic|retail]",
    "\nDescription: Gets the item ID of an item in a container using the container and item indices",
    "undefined--@arg i: number/n--@arg z: number/n--@return: number/nfunction/nGetContainerItemID/n(/n,/n)/n"
  ],
  [
    "GetContainerNumFreeSlots [classic|retail]",
    "\nDescription: Gets the number of free slots in a container using its index",
    "undefined--@arg i: number/n--@return: number/nfunction/nGetContainerNumFreeSlots/n(/n)/n"
  ],
  [
    "GetContainerItemInfo [classic|retail]",
    "\nDescription: Gets information about an item in a container using the container and item indices",
    "undefined--@arg i: number/n--@arg z: number/n--@return: table/nfunction/nGetContainerItemInfo/n(/n,/n)/n"
  ],
  [
    "DeleteCursorItem [classic|retail]",
    "\nDescription: Deletes the item currently on the cursor",
    "undefinedfunction/nBANETO_DeleteCursorItem/n(/n)/n"
  ],
  [
    "DeleteItems [classic|retail]",
    "\nDescription: Deletes items based on predefined rules",
    "undefinedfunction/nBANETO_DeleteItems/n(/n)/n"
  ],
  [
    "SetSettingString [classic|retail]",
    "\nDescription: Sets a setting string to a specific value. Can be found in player settings .lua file in settings folders.",
    "undefined--@arg settingname: string/n--@arg value: string/nfunction/nBANETO_SetSettingString/n(/n,/n)/n"
  ],
  [
    "IsSomeoneTargetingUs [classic|retail]",
    "\nDescription: Checks if the player is being targeted by someone",
    "undefined--@return: boolean/nfunction/nBANETO_IsSomeoneTargetingUs/n(/n)/n"
  ],
  [
    "SecondsUntilWowClose [classic|retail]",
    "\nDescription: Gets the time in seconds until the WoW client is closed",
    "undefined--@return: number/nfunction/nBANETO_SecondsUntilWowClose/n(/n)/n"
  ],
  [
    "IsFullyLoaded [classic|retail]",
    "\nDescription: Checks if the WoW client is fully loaded",
    "undefined--@return: boolean/nfunction/nBANETO_IsFullyLoaded/n(/n)/n"
  ],
  [
    "SetSettingBool [classic|retail]",
    "\nDescription: Sets a setting boolean to a specific value",
    "undefined--@arg settingname: string/n--@arg value: boolean/nfunction/nBANETO_SetSettingBool/n(/n,/n)/n"
  ],
  [
    "IsFaultySkinMob [classic]",
    "\nDescription: Checks if the mob is actually a gather mob instead of skinnable.",
    "undefined--@arg mobid: object/n--@return: boolean/nfunction/nBANETO_IsFaultySkinMob/n(/n)/n"
  ],
  [
    "PestilenceCheck [classic]",
    "\nDescription: Checks if Pestilence is active.",
    "undefined--@return: boolean/nfunction/nBANETO_PestilenceCheck/n(/n)/n"
  ],
  [
    "GetQuestStepProgression [classic|retail]",
    "\nDescription: Gets the progression of a specific step of a quest.",
    "undefined--@arg questId: number/n--@arg step: number/n--@return: progression/nfunction/nBANETO_GetQuestStepProgression/n(/n,/n)/n"
  ],
  [
    "FindClosestBatlemaster [classic]",
    "\nDescription: Finds the closest battle master.",
    "undefined--@arg isMultiQueue: boolean/n--@return: batlemaster/nfunction/nBANETO_FindClosestBatlemaster/n(/n)/n"
  ],
  [
    "MillOrProspect [classic]",
    "\nDescription: Mills or prospects an item.",
    "undefined--@arg whichOne: string/n--@arg item: string/n--@return: void/nfunction/nBANETO_MillOrProspect/n(/n,/n)/n"
  ],
  [
    "IsProspectingItem [classic]",
    "\nDescription: Checks if an item is prospectable.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsProspectingItem/n(/n)/n"
  ],
  [
    "IsMillingItem [classic]",
    "\nDescription: Checks if an item is millable.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsMillingItem/n(/n)/n"
  ],
  [
    "IsMillOrProspectItemBlacklisted [classic]",
    "\nDescription: Checks if an item is blacklisted for milling or prospecting.",
    "undefined--@arg itemid: number/n--@return: boolean/nfunction/nBANETO_IsMillOrProspectItemBlacklisted/n(/n)/n"
  ],
  [
    "CanMillOrProspect [classic]",
    "\nDescription: Checks if the current state allows milling or prospecting.",
    "undefined--@return: boolean/nfunction/nBANETO_CanMillOrProspect/n(/n)/n"
  ],
  [
    "IsCraftingStateNeeded [classic]",
    "\nDescription: Checks if crafting state is needed.",
    "undefined--@return: boolean/nfunction/nBANETO_IsCraftingStateNeeded/n(/n)/n"
  ],
  [
    "IsMovementSlowedByDebuff [classic]",
    "\nDescription: Checks if movement is slowed by debuff.",
    "undefined--@return: boolean/nfunction/nBANETO_IsMovementSlowedByDebuff/n(/n)/n"
  ],
  [
    "LoadSettings [classic|retail]",
    "\nDescription: Loads settings.",
    "undefined--@return: void/nfunction/nBANETO_LoadSettings/n(/n)/n"
  ],
  [
    "DefineMailRecipient [classic|retail]",
    "\nDescription: Defines the recipient of a mail.",
    "undefined--@arg name: string/n--@return: void/nfunction/nBANETO_DefineMailRecipient/n(/n)/n"
  ],
  [
    "GetMailRecipient [classic|retail]",
    "\nDescription: Gets the mail recipient.",
    "undefined--@return: string/nfunction/nBANETO_GetMailRecipient/n(/n)/n"
  ],
  [
    "LoadDungeonProfileFromBackend [classic]",
    "\nDescription: Loads a Dungeon profile from backend.",
    "undefined--@arg profilename: string/n--@return: void/nfunction/nBANETO_LoadDungeonProfileFromBackend/n(/n)/n"
  ],
  [
    "ExecuteCustomDungeonPulse [classic]",
    "\nDescription: Executes custom Dungeon pulse.",
    "undefined--@return: void/nfunction/nBANETO_ExecuteCustomDungeonPulse/n(/n)/n"
  ],
  [
    "ExportItemDeletionList [classic]",
    "\nDescription: Exports the list of items to be deleted.",
    "undefined--@return: table/nfunction/nBANETO_ExportItemDeletionList/n(/n)/n"
  ],
  [
    "ExportSellingBlacklists [classic]",
    "\nDescription: Exports the blacklists for selling items.",
    "undefined--@return: table/nfunction/nBANETO_ExportSellingBlacklists/n(/n)/n"
  ],
  [
    "ExportIdBlacklists [classic]",
    "\nDescription: Exports the blacklists of item IDs.",
    "undefined--@return: table/nfunction/nBANETO_ExportIdBlacklists/n(/n)/n"
  ],
  [
    "ExportCustomWorldObjects [classic|retail]",
    "\nDescription: Exports the list of custom World Objects.",
    "undefined--@return: table/nfunction/nBANETO_ExportCustomWorldObjects/n(/n)/n"
  ],
  [
    "ExportNeverMailList [classic|retail]",
    "\nDescription: Exports the list of items never to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ExportNeverMailList/n(/n)/n"
  ],
  [
    "ExportAlwaysMailList [classic|retail]",
    "\nDescription: Exports the list of items always to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ExportAlwaysMailList/n(/n)/n"
  ],
  [
    "ExportNeverDisenchant [classic|retail]",
    "\nDescription: Exports the list of items never to be disenchanted.",
    "undefined--@return: table/nfunction/nBANETO_ExportNeverDisenchant/n(/n)/n"
  ],
  [
    "ExportUsageItems [classic|retail]",
    "\nDescription: Exports the list of items for usage.",
    "undefined--@return: table/nfunction/nBANETO_ExportUsageItems/n(/n)/n"
  ],
  [
    "ExportGuildbankItems [classic|retail]",
    "\nDescription: Exports the list of items for the guild bank.",
    "undefined--@return: table/nfunction/nBANETO_ExportGuildbankItems/n(/n)/n"
  ],
  [
    "ExportAreaBlacklists [classic|retail]",
    "\nDescription: Exports the blacklist of areas.",
    "undefined--@return: table/nfunction/nBANETO_ExportAreaBlacklists/n(/n)/n"
  ],
  [
    "ExportTravelpoints [classic|retail]",
    "\nDescription: Exports the list of travel points.",
    "undefined--@return: table/nfunction/nBANETO_ExportTravelpoints/n(/n)/n"
  ],
  [
    "ImportItemDeletionList [classic]",
    "\nDescription: Imports the list of items to be deleted.",
    "undefined--@return: table/nfunction/nBANETO_ImportItemDeletionList/n(/n)/n"
  ],
  [
    "ImportSellingBlacklists [classic|retail]",
    "\nDescription: Imports the blacklists for selling items.",
    "undefined--@return: table/nfunction/nBANETO_ImportSellingBlacklists/n(/n)/n"
  ],
  [
    "ExportUnstuckRoutes [classic|retail]",
    "\nDescription: Exports the unstuck routes.",
    "undefined--@return: table/nfunction/nBANETO_ExportUnstuckRoutes/n(/n)/n"
  ],
  [
    "ImportUnstuckRoutes [classic|retail]",
    "\nDescription: Imports the unstuck routes.",
    "undefined--@return: table/nfunction/nBANETO_ImportUnstuckRoutes/n(/n)/n"
  ],
  [
    "ImportUnstuckRoute [classic|retail]",
    "\nDescription: Imports an unstuck route with specified coordinates and trigger radius.",
    "undefined--@arg index: number/n--@arg x: number/n--@arg y: number/n--@arg z: number/n--@arg radiusTrigger: number/n--@return: void/nfunction/nBANETO_ImportUnstuckRoute/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "ImportIdBlacklists [classic|retail]",
    "\nDescription: Imports the blacklists of item IDs.",
    "undefined--@return: table/nfunction/nBANETO_ImportIdBlacklists/n(/n)/n"
  ],
  [
    "ImportAreaBlacklists [classic|retail]",
    "\nDescription: Imports the blacklist of areas.",
    "undefined--@return: table/nfunction/nBANETO_ImportAreaBlacklists/n(/n)/n"
  ],
  [
    "ImportTravelpoints [classic|retail]",
    "\nDescription: Imports the list of travel points.",
    "undefined--@return: table/nfunction/nBANETO_ImportTravelpoints/n(/n)/n"
  ],
  [
    "ImportCustomWorldObjects [classic|retail]",
    "\nDescription: Imports the list of custom World Objects.",
    "undefined--@return: table/nfunction/nBANETO_ImportCustomWorldObjects/n(/n)/n"
  ],
  [
    "ImportNeverMail [classic|retail]",
    "\nDescription: Imports the list of items never to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ImportNeverMail/n(/n)/n"
  ],
  [
    "ImportAlwaysMail [classic|retail]",
    "\nDescription: Imports the list of items always to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ImportAlwaysMail/n(/n)/n"
  ],
  [
    "ImportNeverDisenchant [classic|retail]",
    "\nDescription: Imports the list of items never to be disenchanted.",
    "undefined--@return: table/nfunction/nBANETO_ImportNeverDisenchant/n(/n)/n"
  ],
  [
    "ImportUsageItems [classic|retail]",
    "\nDescription: Imports the list of items for usage.",
    "undefined--@return: table/nfunction/nBANETO_ImportUsageItems/n(/n)/n"
  ],
  [
    "ImportGuilbankItems [classic|retail]",
    "\nDescription: Imports the list of items for the guild bank.",
    "undefined--@return: table/nfunction/nBANETO_ImportGuilbankItems/n(/n)/n"
  ],
  [
    "SCAN_FISHINGSWARMS [classic|retail]",
    "\nDescription: Scans for fishing swarms.",
    "undefined--@return: void/nfunction/nBANETO_SCAN_FISHINGSWARMS/n(/n)/n"
  ],
  [
    "GetCountGatherNode [classic|retail]",
    "\nDescription: Returns the count of gathered nodes.",
    "undefined--@return: number/nfunction/nBANETO_GetCountGatherNode/n(/n)/n"
  ],
  [
    "MissionControlInvString [classic|retail]",
    "\nDescription: Returns the inventory string from the Mission Control.",
    "undefined--@return: string/nfunction/nBANETO_MissionControlInvString/n(/n)/n"
  ],
  [
    "SendChatMessage [classic|retail]",
    "\nDescription: Sends a chat message through a specified channel in a certain language to a particular recipient.",
    "undefined--@arg chatmessage: string _ The message to send./n--@arg channel: string _ The chat channel to send the message to./n--@arg language: string _ The language in which to send the message./n--@arg recipient: string _ The recipient of the message./n--@return: None/nfunction/nBANETO_SendChatMessage/n(/n,/n,/n,/n)/n"
  ],
  [
    "McAction [classic|retail]",
    "\nDescription: Executes an action with the given argument in the game's mission control.",
    "undefined--@arg action: string _ The action to execute./n--@arg actionArg: string _ The argument for the action./n--@return: None/nfunction/nBANETO_McAction/n(/n,/n)/n"
  ],
  [
    "AddRecipientToFl [classic|retail]",
    "\nDescription: Adds a recipient to a friend list.",
    "undefined--@return: None/nfunction/nBANETO_AddRecipientToFl/n(/n)/n"
  ],
  [
    "FindBestSwarmLanding [classic|retail]",
    "\nDescription: Finds the best landing spot within the given swarm.",
    "undefined--@arg swarm: table _ The swarm to search./n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_FindBestSwarmLanding/n(/n)/n"
  ],
  [
    "IsFishingSwarm [classic|retail]",
    "\nDescription: Checks if the given ID corresponds to a fishing swarm.",
    "undefined--@arg id: number _ The ID to check./n--@return: boolean _ Whether the ID corresponds to a fishing swarm./nfunction/nBANETO_IsFishingSwarm/n(/n)/n"
  ],
  [
    "CheckNinjaGather [classic]",
    "\nDescription: Checks if a ninja gather attempt should be made.",
    "undefined--@return: boolean _ Whether a ninja gather should be attempted./nfunction/nBANETO_CheckNinjaGather/n(/n)/n"
  ],
  [
    "UnitCastingInfo [classic|retail]",
    "\nDescription: Retrieves information about a unit's casting status.",
    "undefined--@arg unit: string _ The unit or object/n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_UnitCastingInfo/n(/n)/n"
  ],
  [
    "UnitChannelInfo [classic|retail]",
    "\nDescription: Retrieves information about a unit's channeling status.",
    "undefined--@arg unit: string _ The unit or object/n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_UnitChannelInfo/n(/n)/n"
  ],
  [
    "DefineMailbox [classic]",
    "\nDescription: Defines a mailbox.",
    "undefined--@return: None/nfunction/nBANETO_DefineMailbox/n(/n)/n"
  ],
  [
    "SettingsCorrupted [classic|retail]",
    "\nDescription: Checks if the settings are corrupted.",
    "undefined--@return: boolean _ Whether the settings are corrupted./nfunction/nBANETO_SettingsCorrupted/n(/n)/n"
  ],
  [
    "CreateLfgListing [classic|retail]",
    "\nDescription: Creates an LFG listing with the given parameters.",
    "undefined--@arg activityID: number _ The ID of the activity./n--@arg itemLevel: number _ The minimum required item level./n--@arg honorLevel: number _ The minimum required honor level./n--@arg autoAccept: boolean _ Whether to automatically accept join requests./n--@arg privateGroup: boolean _ Whether the group is private./n--@arg questID: number _ The ID of the quest associated with the group./n--@return: None/nfunction/nBANETO_CreateLfgListing/n(/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "GetSetting [classic|retail]",
    "\nDescription: Retrieves a setting's value from the character's config file.",
    "undefined--@arg settingname: string _ The name of the setting to retrieve./n--@return: Unknown _ The value of the setting./nfunction/nBANETO_GetSetting/n(/n)/n"
  ],
  [
    "CacheSettings [classic|retail]",
    "\nDescription: Caches settings to a specified path.",
    "undefined--@arg path: string _ The path to cache the settings to./n--@arg string: string _ The settings to cache./n--@arg append: boolean _ Whether to append the settings or overwrite existing ones./n--@return: None/nfunction/nBANETO_CacheSettings/n(/n,/n,/n)/n"
  ],
  [
    "IsInsideNode [classic|retail]",
    "\nDescription: Checks if an object is inside a node.",
    "undefined--@arg object: string _ The ID of the object to check./n--@return: boolean _ Whether the object is inside a node./nfunction/nBANETO_IsInsideNode/n(/n)/n"
  ],
  [
    "SaveSettings [classic|retail]",
    "\nDescription: Saves the settings.",
    "undefined--@return: None/nfunction/nBANETO_SaveSettings/n(/n)/n"
  ],
  [
    "IsFightBlockedByQuester [classic|retail]",
    "\nDescription: Checks if a fight is blocked by a quester.",
    "undefined--@return: boolean _ Whether the fight is blocked./nfunction/nBANETO_IsFightBlockedByQuester/n(/n)/n"
  ],
  [
    "IsFleeNeeded [classic|retail]",
    "\nDescription: Checks if the character needs to flee.",
    "undefined--@return: boolean _ Whether the character needs to flee./nfunction/nBANETO_IsFleeNeeded/n(/n)/n"
  ],
  [
    "DkPvpBurst [classic]",
    "\nDescription: Executes a burst of PvP actions for a Death Knight.",
    "undefined--@return: None/nfunction/nDkPvpBurst/n(/n)/n"
  ],
  [
    "CastSpell [classic|retail]",
    "\nDescription: Casts a spell with the given ID, with the option to cast it while moving and on a specific target.",
    "undefined--@arg spellid: number _ The ID of the spell to cast./n--@arg canMove: boolean _ Whether the spell can be cast while moving./n--@arg target: string _ The ID of the target to cast the spell on./n--@return: None/nfunction/nBANETO_CastSpell/n(/n,/n,/n)/n"
  ],
  [
    "SurviveSpellsCast [classic|retail]",
    "\nDescription: Casts survival spells.",
    "undefined--@return: None/nfunction/nBANETO_SurviveSpellsCast/n(/n)/n"
  ],
  [
    "SurviveSpellsAllowed [classic|retail]",
    "\nDescription: Checks if survival spells are allowed.",
    "undefined--@return: boolean _ Whether survival spells are allowed./nfunction/nBANETO_SurviveSpellsAllowed/n(/n)/n"
  ],
  [
    "FishingLogic [classic]",
    "\nDescription: Executes the fishing logic.",
    "undefined--@return: None/nfunction/nBANETO_FishingLogic/n(/n)/n"
  ],
  [
    "DefineAllowSwarmFishing [classic]",
    "\nDescription: Defines whether swarm fishing is allowed.",
    "undefined--@arg bool: boolean _ Whether swarm fishing is allowed./n--@return: None/nfunction/nBANETO_DefineAllowSwarmFishing/n(/n)/n"
  ],
  [
    "DefineFishingSwarm [classic]",
    "\nDescription: Defines a fishing swarm.",
    "undefined--@arg id: number _ The ID of the swarm./n--@return: None/nfunction/nBANETO_DefineFishingSwarm/n(/n)/n"
  ],
  [
    "LoadFishy [classic|retail]",
    "\nDescription: Loads the fishing functionality for the given type of fish.",
    "undefined--@arg typeFish: string _ The type of fish to fish./n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_LoadFishy/n(/n)/n"
  ],
  [
    "IsStateBlockedDueToSlaveBusy [classic]",
    "\nDescription: Checks whether the current state is blocked due to the \"slave\" character being busy.",
    "undefined--@return: boolean _ Whether the current state is blocked./nfunction/nBANETO_IsStateBlockedDueToSlaveBusy/n(/n)/n"
  ],
  [
    "Interact [classic|retail]",
    "\nDescription: Interacts with the given unit.",
    "undefined--@arg unit: string _ The ID of the unit to interact with./n--@return: None/nfunction/nBANETO_Interact/n(/n)/n"
  ],
  [
    "InteractNoDelay [classic|retail]",
    "\nDescription: Interacts with the given unit, without any delay.",
    "undefined--@arg unit: string _ The ID of the unit to interact with./n--@return: None/nfunction/nBANETO_InteractNoDelay/n(/n)/n"
  ],
  [
    "WMB_BobberCheck [classic|retail]",
    "\nDescription: Checks whether the given object is a bobber.",
    "undefined--@arg object: string _ The ID of the object to check./n--@return: boolean _ Whether the object is a bobber./nfunction/nBANETO_WMB_BobberCheck/n(/n)/n"
  ],
  [
    "SlopeJumper [classic|retail]",
    "\nDescription: Activates the slope jumping feature.",
    "undefined--@return: None/nfunction/nBANETO_SlopeJumper/n(/n)/n"
  ],
  [
    "GetObjctsTkr [classic|retail]",
    "\nDescription: Retrieves the objects tracker.",
    "undefined--@return: table of objects/nfunction/nBANETO_GetObjctsTkr/n(/n)/n"
  ],
  [
    "InteractWithBobber [classic|retail]",
    "\nDescription: Interacts with the bobber.",
    "undefined--@return: None/nfunction/nBANETO_InteractWithBobber/n(/n)/n"
  ],
  [
    "GetBobberPosition [classic|retail]",
    "\nDescription: Retrieves the position of the bobber.",
    "undefined--@return: table _ The position of the bobber (x, y, z)./nfunction/nBANETO_GetBobberPosition/n(/n)/n"
  ],
  [
    "GetBobberState [classic|retail]",
    "\nDescription: Retrieves the state of the bobber.",
    "undefined--@return: true if its splashing, false if its not ready yet/nfunction/nBANETO_GetBobberState/n(/n)/n"
  ],
  [
    "AttemptCombatLooting [classic|retail]",
    "\nDescription: Attempts to loot during combat.",
    "undefined--@return: None/nfunction/nBANETO_AttemptCombatLooting/n(/n)/n"
  ],
  [
    "SetSettingInt [classic|retail]",
    "\nDescription: Sets a setting boolean to a specific value. Can be found in player settings .lua file in settings folders.",
    "undefined--@arg settingname: string _ The name of the setting./n--@arg value: number _ The new value for the setting./n--@return: None/nfunction/nBANETO_SetSettingInt/n(/n,/n)/n"
  ],
  [
    "CancelBuffIceBlock [classic]",
    "\nDescription: Cancels the Ice Block buff.",
    "undefined--@return: None/nfunction/nCancelBuffIceBlock/n(/n)/n"
  ],
  [
    "StartCancelAllBuffs [classic]",
    "\nDescription: Starts the process of canceling all buffs.",
    "undefined--@return: None/nfunction/nStartCancelAllBuffs/n(/n)/n"
  ],
  [
    "CancelBuff [classic]",
    "\nDescription: Cancels a buff with the given ID.",
    "undefined--@arg id: number _ The ID of the buff to cancel./n--@return: None/nfunction/nCancelBuff/n(/n)/n"
  ],
  [
    "DisableMeshCheckNn [classic|retail]",
    "\nDescription: Disables the check for mesh (navigation mesh).",
    "undefined--@return: None/nfunction/nBANETO_DisableMeshCheckNn/n(/n)/n"
  ],
  [
    "CheckMeshNn [classic]",
    "\nDescription: Checks the mesh (navigation mesh).",
    "undefined--@return: boolean _ Whether the check was successful./nfunction/nBANETO_CheckMeshNn/n(/n)/n"
  ],
  [
    "UsePoison [classic|retail]",
    "\nDescription: Uses a poison with the given ID.",
    "undefined--@arg itemid: number _ The ID of the poison to use./n--@return: None/nfunction/nBANETO_UsePoison/n(/n)/n"
  ],
  [
    "UsePetFeedItem [classic|retail]",
    "\nDescription: Uses a pet feed item.",
    "undefined--@return: None/nfunction/nBANETO_UsePetFeedItem/n(/n)/n"
  ],
  [
    "GetTargetId [classic|retail]",
    "\nDescription: Retrieves the ID of the current target.",
    "undefined--@return: string _ The ID of the current target./nfunction/nBANETO_GetTargetId/n(/n)/n"
  ],
  [
    "ObjectCreator [classic|retail]",
    "\nDescription: Returns the creator or summoner of the object",
    "undefined--@arg obj: string _ The object to check who summoned it./n--@return: object or nil/nfunction/nBANETO_ObjectCreator/n(/n)/n"
  ],
  [
    "IsPetLuabox [classic|retail]",
    "\nDescription: Checks whether the given unit ID corresponds to a pet.",
    "undefined--@arg unitId: object/n--@return: boolean _ Whether the unit is a pet./nfunction/nBANETO_IsPetLuabox/n(/n)/n"
  ],
  [
    "MageConeAngleCheck [classic]",
    "\nDescription: Performs a check related to the cone angle for a mage character.",
    "undefined--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_MageConeAngleCheck/n(/n)/n"
  ],
  [
    "HasPetFeedItem [classic|retail]",
    "\nDescription: Checks whether the character's pet has a feed item.",
    "undefined--@return: boolean _ Whether the pet has a feed item./nfunction/nBANETO_HasPetFeedItem/n(/n)/n"
  ],
  [
    "HideInterface [classic|retail]",
    "\nDescription: Hides the game interface.",
    "undefined--@return: None/nfunction/nBANETO_HideInterface/n(/n)/n"
  ],
  [
    "ShowInterface [classic|retail]",
    "\nDescription: Shows the game interface.",
    "undefined--@return: None/nfunction/nBANETO_ShowInterface/n(/n)/n"
  ],
  [
    "UseItem [classic|retail]",
    "\nDescription: Uses an item, with an optional dismount.",
    "undefined--@arg itemid: number _ The ID of the item to use./n--@arg needsdismount: boolean _ Whether to dismount before using the item./n--@return: None/nfunction/nBANETO_UseItem/n(/n,/n)/n"
  ],
  [
    "GetProfessionSkill [classic|retail]",
    "\nDescription: Gets the skill level of a given profession.",
    "undefined--@arg name: string _ The name of the profession to check./n--@return: number _ The skill level of the profession./nfunction/nBANETO_GetProfessionSkill/n(/n)/n"
  ],
  [
    "FindFlyMountInBags [classic]",
    "\nDescription: Searches for a flying mount in the player's bags.",
    "undefined--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_FindFlyMountInBags/n(/n)/n"
  ],
  [
    "FindMountInBags [classic|retail]",
    "\nDescription: Searches for a mount in the player's bags.",
    "undefined--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_FindMountInBags/n(/n)/n"
  ],
  [
    "ClearUnstuckTriggerCache [classic|retail]",
    "\nDescription: Clears the cache of unstuck triggers.",
    "undefined--@return: None/nfunction/nBANETO_ClearUnstuckTriggerCache/n(/n)/n"
  ],
  [
    "CheckUnstuckTriggers [classic|retail]",
    "\nDescription: Checks the unstuck triggers.",
    "undefined--@return: None/nfunction/nBANETO_CheckUnstuckTriggers/n(/n)/n"
  ],
  [
    "CancelRecordingUnstuckRoute [classic|retail]",
    "\nDescription: Cancels the recording of an unstuck route.",
    "undefined--@return: None/nfunction/nBANETO_CancelRecordingUnstuckRoute/n(/n)/n"
  ],
  [
    "SaveUnstuckRoute [classic|retail]",
    "\nDescription: Saves the recorded unstuck route.",
    "undefined--@return: None/nfunction/nBANETO_SaveUnstuckRoute/n(/n)/n"
  ],
  [
    "DeleteLastUnstuckSpot [classic|retail]",
    "\nDescription: Deletes the last recorded unstuck spot.",
    "undefined--@return: None/nfunction/nBANETO_DeleteLastUnstuckSpot/n(/n)/n"
  ],
  [
    "DefineProfileUnstuck [classic|retail]",
    "\nDescription: Defines a new unstuck location for a profile.",
    "undefined--@arg unstuckid: number _ Identifier for the unstuck location./n--@arg x: number _ The x_coordinate for the unstuck location./n--@arg y: number _ The y_coordinate for the unstuck location./n--@arg z: number _ The z_coordinate for the unstuck location./n--@arg radiusTrigger: number _ The radius in which the unstuck location triggers./n--@return: None/nfunction/nBANETO_DefineProfileUnstuck/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "DefineUnstuck [classic|retail]",
    "\nDescription: Defines a new unstuck location.",
    "undefined--@arg unstuckid: number _ Identifier for the unstuck location./n--@arg x: number _ The x_coordinate for the unstuck location./n--@arg y: number _ The y_coordinate for the unstuck location./n--@arg z: number _ The z_coordinate for the unstuck location./n--@arg radiusTrigger: number _ The radius in which the unstuck location triggers./n--@return: None/nfunction/nBANETO_DefineUnstuck/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "RecordNewUnstuckSpot [classic|retail]",
    "\nDescription: Records a new unstuck spot at the current player's location.",
    "undefined--@return: None/nfunction/nBANETO_RecordNewUnstuckSpot/n(/n)/n"
  ],
  [
    "DeleteLastUnstuckRoute [classic|retail]",
    "\nDescription: Deletes the last recorded unstuck route.",
    "undefined--@return: None/nfunction/nBANETO_DeleteLastUnstuckRoute/n(/n)/n"
  ],
  [
    "RecordNewUnstuckRoute [classic|retail]",
    "\nDescription: Records a new unstuck route based on the player's current movement.",
    "undefined--@return: None/nfunction/nBANETO_RecordNewUnstuckRoute/n(/n)/n"
  ],
  [
    "lerp [classic|retail]",
    "\nDescription: Returns a number between two numbers at a specific increment.",
    "undefined--@arg a: number _ Starting number./n--@arg b: number _ Ending number./n--@arg x: number _ The increment./n--@return: number _ The interpolated value./nfunction/nlerp/n(/n,/n,/n)/n"
  ],
  [
    "lerp2 [classic|retail]",
    "\nDescription: Returns a number between two numbers at a specific increment, within a certain range.",
    "undefined--@arg t: number _ Starting number./n--@arg b: number _ Ending number./n--@arg c: number _ The increment./n--@arg d: number _ The range within which to interpolate./n--@return: number _ The interpolated value./nfunction/nlerp2/n(/n,/n,/n,/n)/n"
  ],
  [
    "FaceDirectionSmooth [classic|retail]",
    "\nDescription: Makes the player character smoothly turn to a specified angle.",
    "undefined--@arg angle: number _ The angle to turn to, in degrees./n--@return: None/nfunction/nBANETO_FaceDirectionSmooth/n(/n)/n"
  ],
  [
    "FaceDirection [classic|retail]",
    "\nDescription: Makes the player character turn to a specified angle.",
    "undefined--@arg angle: number _ The angle to turn to, in degrees./n--@arg bool: boolean _ Whether to turn smoothly or not./n--@return: None/nfunction/nFaceDirection/n(/n,/n)/n"
  ],
  [
    "ObjectExists [classic|retail]",
    "\nDescription: Checks whether the specified object exists.",
    "undefined--@arg obj: string _ The ID of the object to check./n--@return: boolean _ Whether the object exists./nfunction/nBANETO_ObjectExists/n(/n)/n"
  ],
  [
    "GePlayerAngle [classic|retail]",
    "\nDescription: Gets the player's current angle, in radians.",
    "undefined--@return: number _ The player's current angle, in radians./nfunction/nBANETO_GePlayerAngle/n(/n)/n"
  ],
  [
    "BlockSmoothTurn [classic|retail]",
    "\nDescription: Blocks the player character from turning smoothly for a specified duration.",
    "undefined--@arg seconds: number _ The number of seconds to block smooth turning./n--@return: None/nfunction/nBANETO_BlockSmoothTurn/n(/n)/n"
  ],
  [
    "SetPlayerAnglesLuabox [classic|retail]",
    "\nDescription: Sets the player character's angle to a specified value.",
    "undefined--@arg angle: number _ The angle to set, in radians./n--@return: None/nfunction/nBANETO_SetPlayerAnglesLuabox/n(/n)/n"
  ],
  [
    "RunMacro [classic|retail]",
    "\nDescription: Runs a specified macro.",
    "undefined--@arg macroname: string _ The name of the macro to run./n--@return: None/nfunction/nBANETO_RunMacro/n(/n)/n"
  ],
  [
    "RunMacroText [classic|retail]",
    "\nDescription: Executes the macro defined by the given text.",
    "undefined--@arg text: string _ The macro text to execute./n--@return: None/nfunction/nBANETO_RunMacroText/n(/n)/n"
  ],
  [
    "lbrs_jumpOnLedge [classic]",
    "\nDescription: Executes a specific jumping sequence for lbrs on ledge.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_jumpOnLedge/n(/n)/n"
  ],
  [
    "lbrs_jumpOnSpike [classic]",
    "\nDescription: Executes a specific jumping sequence for lbrs on spike.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_jumpOnSpike/n(/n)/n"
  ],
  [
    "lbrs_activate [classic]",
    "\nDescription: Activates a certain token in lbrs.",
    "undefined--@arg token: string _ The token to activate./n--@return: None/nfunction/nBANETO_lbrs_activate/n(/n)/n"
  ],
  [
    "SitStandOrDescendStart [classic|retail]",
    "\nDescription: Toggles between sitting, standing, and descending based on the provided info.",
    "undefined--@arg info: string _ The action to execute (sit, stand, descend)./n--@return: None/nfunction/nBANETO_SitStandOrDescendStart/n(/n)/n"
  ],
  [
    "MoveBackwardStart [classic|retail]",
    "\nDescription: Starts the character moving backward.",
    "undefined--@return: None/nfunction/nBANETO_MoveBackwardStart/n(/n)/n"
  ],
  [
    "MoveBackwardStop [classic|retail]",
    "\nDescription: Stops the character moving backward.",
    "undefined--@return: None/nfunction/nBANETO_MoveBackwardStop/n(/n)/n"
  ],
  [
    "AscendStop [classic|retail]",
    "\nDescription: Stops ascending.",
    "undefined--@return: None/nfunction/nBANETO_AscendStop/n(/n)/n"
  ],
  [
    "DescendStop [classic|retail]",
    "\nDescription: Stops descending.",
    "undefined--@return: None/nfunction/nBANETO_DescendStop/n(/n)/n"
  ],
  [
    "JumpOrAscendStart [classic|retail]",
    "\nDescription: Starts jumping or ascending based on the provided info.",
    "undefined--@arg info: string _ The action to execute (jump, ascend)./n--@return: None/nfunction/nBANETO_JumpOrAscendStart/n(/n)/n"
  ],
  [
    "lbrs_ManipulatePath [classic]",
    "\nDescription: Manipulates the path for lbrs.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_ManipulatePath/n(/n)/n"
  ],
  [
    "SetWaPathToNilAndBufferToNil [classic|retail]",
    "\nDescription: Sets both the WA path and the buffer to nil.",
    "undefined--@return: None/nfunction/nBANETO_SetWaPathToNilAndBufferToNil/n(/n)/n"
  ],
  [
    "SetCenterIndexTo1 [classic|retail]",
    "\nDescription: Sets the center index of the path to 1.",
    "undefined--@return: None/nfunction/nBANETO_SetCenterIndexTo1/n(/n)/n"
  ],
  [
    "SetWaPathNil [classic|retail]",
    "\nDescription: Sets the WA path to nil.",
    "undefined--@arg fromWhere: string _ Information about the source or reason for the path to be set to nil./n--@return: None/nfunction/nBANETO_SetWaPathNil/n(/n)/n"
  ],
  [
    "lbrs_EnterPortal [classic]",
    "\nDescription: Triggers the sequence to enter the portal in LBRS.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_EnterPortal/n(/n)/n"
  ],
  [
    "lbrs_LeavePortal [classic]",
    "\nDescription: Triggers the sequence to leave the portal in LBRS.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_LeavePortal/n(/n)/n"
  ],
  [
    "TestPathProblem [classic]",
    "\nDescription: Runs a test to identify any issues with the current path.",
    "undefined--@return: None/nfunction/nBANETO_TestPathProblem/n(/n)/n"
  ],
  [
    "TestPathProblem2 [classic]",
    "\nDescription: Runs a second test to identify any issues with the current path.",
    "undefined--@return: None/nfunction/nBANETO_TestPathProblem2/n(/n)/n"
  ],
  [
    "BrickMovement [classic]",
    "\nDescription: Stops the player character's movement, forcing them to stay in place.",
    "undefined--@return: None/nfunction/nBANETO_BrickMovement/n(/n)/n"
  ],
  [
    "Logout [classic|retail]",
    "\nDescription: Logs out the player character from the game.",
    "undefined--@return: None/nfunction/nBANETO_Logout/n(/n)/n"
  ],
  [
    "UnitTarget [classic|retail]",
    "\nDescription: Returns the target of the specified unit.",
    "undefined--@arg obj: the object of which we want to know the target/n--@return: object (the target of obj)/nfunction/nBANETO_UnitTarget/n(/n)/n"
  ],
  [
    "TappedTest [classic]",
    "\nDescription: Checks if the current target is tapped.",
    "undefined--@return: boolean _ True if the target is tapped, false otherwise./nfunction/nBANETO_TappedTest/n(/n)/n"
  ],
  [
    "TappedCheck [classic|retail]",
    "\nDescription: Checks and returns if the current target is tapped by the player or their group.",
    "undefined--@return: boolean _ True if the target is tapped by the player or their group, false otherwise./nfunction/nBANETO_TappedCheck/n(/n)/n"
  ],
  [
    "SetCurrentCenterIndex [classic|retail]",
    "\nDescription: Sets the current index for a certain center UI element (like action bars).",
    "undefined--@arg arg: number _ The index to set./n--@return: None/nfunction/nBANETO_SetCurrentCenterIndex/n(/n)/n"
  ],
  [
    "BodypullCheck [classic|retail]",
    "\nDescription: Checks if the player's body is pulled by a mob.",
    "undefined--@return: boolean _ True if body is being pulled, false otherwise./nfunction/nBANETO_BodypullCheck/n(/n)/n"
  ],
  [
    "JsonEncode [classic|retail]",
    "\nDescription: Converts a LUA table or value into a JSON_encoded string.",
    "undefined--@arg obj: table or value _ The LUA table or value to encode./n--@return: string _ The JSON_encoded string./nfunction/nBANETO_JsonEncode/n(/n)/n"
  ],
  [
    "JsonDecode [classic|retail]",
    "\nDescription: Decodes a JSON_encoded string into a LUA table.",
    "undefined--@arg string: string _ The JSON_encoded string to decode./n--@return: table _ The LUA table decoded from the JSON string./nfunction/nBANETO_JsonDecode/n(/n)/n"
  ],
  [
    "UnitExists [classic|retail]",
    "\nDescription: Checks if the given unit exists.",
    "undefined--@arg obj: unitId string _ The UnitID of the unit to check./n--@return: boolean _ True if the unit exists, false otherwise./nfunction/nBANETO_UnitExists/n(/n)/n"
  ],
  [
    "TargetNearest [classic|retail]",
    "\nDescription: Targets the nearest unit to the player.",
    "undefined--@return: None/nfunction/nBANETO_TargetNearest/n(/n)/n"
  ],
  [
    "UseAction [classic|retail]",
    "\nDescription: Performs the action associated with the specified action slot.",
    "undefined--@arg act: number _ The action slot number./n--@return: None/nfunction/nBANETO_UseAction/n(/n)/n"
  ],
  [
    "BlockPathAvoidance [classic|retail]",
    "\nDescription: Enables or disables path avoidance.",
    "undefined--@arg bool: boolean _ True to enable path avoidance, false to disable it./n--@return: None/nfunction/nBANETO_BlockPathAvoidance/n(/n)/n"
  ],
  [
    "GetAnglesBetweenPositions [classic|retail]",
    "\nDescription: Gets the angles between two positions in the 3D world.",
    "undefined--@return: number _ The angle in radians between the two positions./nfunction/nBANETO_GetAnglesBetweenPositions/n(/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "MeshTo [classic|retail]",
    "\nDescription: Moves the player to the specified coordinates using pathfinding.",
    "undefined--@return: None/nfunction/nBANETO_MeshTo/n(/n,/n,/n)/n"
  ],
  [
    "RunString [classic|retail]",
    "\nDescription: Executes the specified LUA code.",
    "undefined--@arg string: string _ The LUA code to execute./n--@return: Various _ The results of the executed LUA code./nfunction/nBANETO_RunString/n(/n)/n"
  ],
  [
    "DelayGroundUnstucking [classic|retail]",
    "\nDescription: Delays the ground unstucking method by the specified amount of seconds.",
    "undefined--@arg seconds: number _ The number of seconds to delay the unstucking method./n--@return: None/nfunction/nBANETO_DelayGroundUnstucking/n(/n)/n"
  ],
  [
    "CallFullStuckMethod [classic|retail]",
    "\nDescription: Calls the full method for unstucking the player character.",
    "undefined--@return: None/nfunction/nBANETO_CallFullStuckMethod/n(/n)/n"
  ],
  [
    "GetPath [classic|retail]",
    "\nDescription: Retrieves the current path of the player character.",
    "undefined--@return: table _ The current path as a table of coordinates./nfunction/nBANETO_GetPath/n(/n)/n"
  ],
  [
    "ObjectFlags1 [classic|retail]",
    "\nDescription: Retrieves the first set of flags for the specified object.",
    "undefined--@arg obj: Object _ The object to retrieve the flags for./n--@return: number _ The first set of flags for the object./nfunction/nBANETO_ObjectFlags1/n(/n)/n"
  ],
  [
    "ObjectFlags2 [classic|retail]",
    "\nDescription: Retrieves the second set of flags for the specified object.",
    "undefined--@arg obj: Object _ The object to retrieve the flags for./n--@return: number _ The second set of flags for the object./nfunction/nBANETO_ObjectFlags2/n(/n)/n"
  ],
  [
    "UnitIsSkinnable [classic|retail]",
    "\nDescription: Checks if the specified unit can be skinned.",
    "undefined--@arg obj: unitId string _ The UnitID of the unit to check./n--@return: boolean _ True if the unit can be skinned, false otherwise./nfunction/nBANETO_UnitIsSkinnable/n(/n)/n"
  ],
  [
    "UnitIsLooting [classic|retail]",
    "\nDescription: Checks if the specified unit is currently looting.",
    "undefined--@arg obj: unitId string _ The UnitID of the unit to check./n--@return: boolean _ True if the unit is currently looting, false otherwise./nfunction/nBANETO_UnitIsLooting/n(/n)/n"
  ],
  [
    "UnitFeignDeathed [classic|retail]",
    "\nDescription: Checks whether a unit is feigning death.",
    "undefined--@arg obj: string _ The unit to check./n--@return: Boolean indicating whether the unit is feigning death./nfunction/nBANETO_UnitFeignDeathed/n(/n)/n"
  ],
  [
    "IsWaterBelowUs [classic]",
    "\nDescription: Checks whether there is water below us.",
    "undefined--@return: Boolean indicating whether there is water below./nfunction/nBANETO_IsWaterBelowUs/n(/n)/n"
  ],
  [
    "FlyingRaycastBlock [classic]",
    "\nDescription: Performs a raycast to detect obstacles while flying.",
    "undefined--@return: Boolean indicating whether there is an obstacle./nfunction/nBANETO_FlyingRaycastBlock/n(/n)/n"
  ],
  [
    "FlyingRaycast [classic|retail]",
    "\nDescription: Performs a raycast while flying.",
    "undefined--@return: Raycast result./nfunction/nBANETO_FlyingRaycast/n(/n)/n"
  ],
  [
    "FlyingRaycastClose [classic|retail]",
    "\nDescription: Performs a close proximity raycast while flying.",
    "undefined--@return: Raycast result./nfunction/nBANETO_FlyingRaycastClose/n(/n)/n"
  ],
  [
    "IsFlyingStuck [classic|retail]",
    "\nDescription: Checks whether the flying unit is stuck.",
    "undefined--@return: Boolean indicating whether the flying unit is stuck./nfunction/nBANETO_IsFlyingStuck/n(/n)/n"
  ],
  [
    "StrafeLeftStart [classic|retail]",
    "\nDescription: Starts strafing to the left.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeLeftStart/n(/n)/n"
  ],
  [
    "StrafeLeftStop [classic|retail]",
    "\nDescription: Stops strafing to the left.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeLeftStop/n(/n)/n"
  ],
  [
    "StrafeRightStart [classic|retail]",
    "\nDescription: Starts strafing to the right.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeRightStart/n(/n)/n"
  ],
  [
    "StrafeRightStop [classic|retail]",
    "\nDescription: Stops strafing to the right.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeRightStop/n(/n)/n"
  ],
  [
    "FlyingUnstucker [classic|retail]",
    "\nDescription: Unstucks the flying unit.",
    "undefined--@return: Unstuck result./nfunction/nBANETO_FlyingUnstucker/n(/n)/n"
  ],
  [
    "SetFlyingPitch [classic|retail]",
    "\nDescription: Sets the flying pitch.",
    "undefined--@arg val: number _ The value to set the pitch to./n--@return: The result of setting the pitch./nfunction/nBANETO_SetFlyingPitch/n(/n)/n"
  ],
  [
    "GetFlyingPitch [classic|retail]",
    "\nDescription: Gets the current flying pitch.",
    "undefined--@return: The current flying pitch./nfunction/nBANETO_GetFlyingPitch/n(/n)/n"
  ],
  [
    "SetToOldFlyingNav [classic|retail]",
    "\nDescription: Sets the navigation to old flying.",
    "undefined--@return: Result of the setting./nfunction/nBANETO_SetToOldFlyingNav/n(/n)/n"
  ],
  [
    "FlyingNavigator [classic|retail]",
    "\nDescription: Executes the flying navigator.",
    "undefined--@return: Flying navigator result./nfunction/nBANETO_FlyingNavigator/n(/n)/n"
  ],
  [
    "FaceDirection [classic]",
    "\nDescription: Faces a specified direction.",
    "undefined--@arg dir: string _ The direction to face./n--@return: The result of facing the direction./nfunction/nBANETO_FaceDirection/n(/n)/n"
  ],
  [
    "IsRunning [classic|retail]",
    "\nDescription: Checks whether the unit is running.",
    "undefined--@return: Boolean indicating whether the unit is running./nfunction/nBANETO_IsRunning/n(/n)/n"
  ],
  [
    "FlyAscendExecute [classic|retail]",
    "\nDescription: Executes the fly ascend action.",
    "undefined--@return: The result of the fly ascend action./nfunction/nBANETO_FlyAscendExecute/n(/n)/n"
  ],
  [
    "Dismount [classic|retail]",
    "\nDescription: Dismounts the unit.",
    "undefined--@arg msg: string _ The message to send on dismount./n--@return: The result of the dismount action./nfunction/nBANETO_Dismount/n(/n)/n"
  ],
  [
    "PathHandlerNn [classic|retail]",
    "\nDescription: Handles the given path.",
    "undefined--@arg path: string _ The path to handle./n--@return: The result of the path handling./nfunction/nBANETO_PathHandlerNn/n(/n)/n"
  ],
  [
    "DelayOM [classic]",
    "\nDescription: Delays the object manager.",
    "undefined--@arg seconds: number _ The number of seconds to delay./n--@return: The result of the delay./nfunction/nBANETO_DelayOM/n(/n)/n"
  ],
  [
    "GetObjectFacing [classic|retail]",
    "\nDescription: Gets the facing direction of an object.",
    "undefined--@arg object: string _ The object to get the facing direction of./n--@return: The facing direction of the object./nfunction/nBANETO_GetObjectFacing/n(/n)/n"
  ],
  [
    "UpdateGotoPositionWa [classic|retail]",
    "\nDescription: Updates the goto position with WorldAnchor.",
    "undefined--@return: The result of the update./nfunction/nUpdateGotoPositionWa/n(/n)/n"
  ],
  [
    "FlyMount [classic|retail]",
    "\nDescription: Mounts the unit for flying.",
    "undefined--@return: The result of the mount action./nfunction/nBANETO_FlyMount/n(/n)/n"
  ],
  [
    "Mount [classic]",
    "\nDescription: Mounts the unit.",
    "undefined--@return: The result of the mount action./nfunction/nBANETO_Mount/n(/n)/n"
  ],
  [
    "GetClosestKnownTaxi [classic|retail]",
    "\nDescription: Gets the closest known taxi.",
    "undefined--@return: The closest known taxi./nfunction/nBANETO_GetClosestKnownTaxi/n(/n)/n"
  ],
  [
    "ProfileSetHomeMailbox [classic|retail]",
    "\nDescription: Sets the home mailbox with specified coordinates and ID.",
    "undefined--@arg x: number _ The x coordinate./n--@arg y: number _ The y coordinate./n--@arg z: number _ The z coordinate./n--@arg id: string _ The ID of the mailbox./n--@return: The result of the set action./nfunction/nBANETO_ProfileSetHomeMailbox/n(/n,/n,/n,/n)/n"
  ],
  [
    "SetHomeMailbox [classic|retail]",
    "\nDescription: Sets the home mailbox.",
    "undefined--@return: The result of the set action./nfunction/nBANETO_SetHomeMailbox/n(/n)/n"
  ],
  [
    "CheckHomeMailbox [classic|retail]",
    "\nDescription: Checks the home mailbox.",
    "undefined--@return: The result of the check./nfunction/nBANETO_CheckHomeMailbox/n(/n)/n"
  ],
  [
    "GetClosestMailbox [classic|retail]",
    "\nDescription: Gets the closest mailbox.",
    "undefined--@return: The closest mailbox./nfunction/nBANETO_GetClosestMailbox/n(/n)/n"
  ],
  [
    "GetClosestClassTrainer [classic|retail]",
    "\nDescription: Gets the closest class trainer of a specified class.",
    "undefined--@arg classEnglishName: string _ The English name of the class./n--@return: The closest class trainer of the specified class./nfunction/nBANETO_GetClosestClassTrainer/n(/n)/n"
  ],
  [
    "GetClosestProfTrainer [classic|retail]",
    "\nDescription: Gets the closest profession trainer of a specified profession.",
    "undefined--@arg profEnglishName: string _ The English name of the profession./n--@return: The closest profession trainer of the specified profession./nfunction/nBANETO_GetClosestProfTrainer/n(/n)/n"
  ],
  [
    "GetClosestTaxiExit [classic|retail]",
    "\nDescription: Gets the closest taxi exit.",
    "undefined--@return: The closest taxi exit./nfunction/nBANETO_GetClosestTaxiExit/n(/n)/n"
  ],
  [
    "GetClosestTaxiEntry [classic|retail]",
    "\nDescription: Gets the closest taxi entry.",
    "undefined--@return: The closest taxi entry./nfunction/nBANETO_GetClosestTaxiEntry/n(/n)/n"
  ],
  [
    "IsFlightmasterOnMyContinent [classic|retail]",
    "\nDescription: Checks whether the flight master is on the same continent.",
    "undefined--@arg id: string _ The ID of the flight master./n--@return: Boolean indicating whether the flight master is on the same continent./nfunction/nBANETO_IsFlightmasterOnMyContinent/n(/n)/n"
  ],
  [
    "GetLuaBoxDestination [classic|retail]",
    "\nDescription: Retrieves the destination from Lua Box.",
    "undefined--@return: Destination coordinates or object./nfunction/nBANETO_GetLuaBoxDestination/n(/n)/n"
  ],
  [
    "GetEwtDestination [classic|retail]",
    "\nDescription: Retrieves the destination from Ewt.",
    "undefined--@return: Destination coordinates or object./nfunction/nBANETO_GetEwtDestination/n(/n)/n"
  ],
  [
    "IsKickNeededUnitCheck [classic|retail]",
    "\nDescription: Checks whether a kick is needed for the specified unit.",
    "undefined--@arg unit: string _ The unit to check./n--@return: Boolean indicating whether a kick is needed./nfunction/nBANETO_IsKickNeededUnitCheck/n(/n)/n"
  ],
  [
    "IsKickNeeded [classic|retail]",
    "\nDescription: Checks whether a kick is needed.",
    "undefined--@return: Boolean indicating whether a kick is needed./nfunction/nBANETO_IsKickNeeded/n(/n)/n"
  ],
  [
    "IsTaxiNeeded [classic|retail]",
    "\nDescription: Checks whether a taxi is needed.",
    "undefined--@return: Boolean indicating whether a taxi is needed./nfunction/nBANETO_IsTaxiNeeded/n(/n)/n"
  ],
  [
    "IsOnCustomVendorPath [classic]",
    "\nDescription: Checks whether the player is on a custom vendor path.",
    "undefined--@return: Boolean indicating whether the player is on a custom vendor path./nfunction/nBANETO_IsOnCustomVendorPath/n(/n)/n"
  ],
  [
    "GetExecuteFlyAscend [classic]",
    "\nDescription: Executes a fly ascend.",
    "undefined--@return: Result of the execution./nfunction/nBANETO_GetExecuteFlyAscend/n(/n)/n"
  ],
  [
    "IsMountNeeded [classic|retail]",
    "\nDescription: Checks whether a mount is needed.",
    "undefined--@return: Boolean indicating whether a mount is needed./nfunction/nBANETO_IsMountNeeded/n(/n)/n"
  ],
  [
    "HasMount [classic|retail]",
    "\nDescription: Checks whether the player has a mount.",
    "undefined--@return: Boolean indicating whether the player has a mount./nfunction/nBANETO_HasMount/n(/n)/n"
  ],
  [
    "HasMountItem [classic|retail]",
    "\nDescription: Checks whether the player has a mount item.",
    "undefined--@return: Boolean indicating whether the player has a mount item./nfunction/nBANETO_HasMountItem/n(/n)/n"
  ],
  [
    "GetPlayerPointer [classic|retail]",
    "\nDescription: Retrieves the player's pointer.",
    "undefined--@return: Player's pointer./nfunction/nBANETO_GetPlayerPointer/n(/n)/n"
  ],
  [
    "IsAnEnemyPolymorphedNovaCheck [classic|retail]",
    "\nDescription: Checks whether an enemy is polymorphed and ready for Nova.",
    "undefined--@return: Boolean indicating whether an enemy is polymorphed and ready for Nova./nfunction/nBANETO_IsAnEnemyPolymorphedNovaCheck/n(/n)/n"
  ],
  [
    "IsLootStateNeededV2 [classic|retail]",
    "\nDescription: Checks whether the loot state is needed (version 2).",
    "undefined--@return: Boolean indicating whether the loot state is needed./nfunction/nBANETO_IsLootStateNeededV2/n(/n)/n"
  ],
  [
    "SelectNextMultidotTarget [classic|retail]",
    "\nDescription: Selects the next target to apply multiple damage over time spells.",
    "undefined--@return: Target selection result./nfunction/nBANETO_SelectNextMultidotTarget/n(/n)/n"
  ],
  [
    "CountItemTypeInBagsForDisc [classic|retail]",
    "\nDescription: Counts the given item type in the player's bags for Discord.",
    "undefined--@arg itemTypeC: string _ The item type to count./n--@return: Number of items of the given type./nfunction/nBANETO_CountItemTypeInBagsForDisc/n(/n)/n"
  ],
  [
    "DiscordSendWhisperOutgoing [classic|retail]",
    "\nDescription: Sends an outgoing whisper to Discord.",
    "undefined--@arg msg: string _ The message to send./nfunction/nBANETO_DiscordSendWhisperOutgoing/n(/n)/n"
  ],
  [
    "DiscordSendWhisper [classic|retail]",
    "\nDescription: Sends a whisper to a sender via Discord.",
    "undefined--@arg sender: string _ The sender to whisper to./n--@arg msg: string _ The message to send./nfunction/nBANETO_DiscordSendWhisper/n(/n,/n)/n"
  ],
  [
    "DiscordSendProfileInfo [classic]",
    "\nDescription: Sends the profile information to Discord.",
    "undefinedfunction/nBANETO_DiscordSendProfileInfo/n(/n)/n"
  ],
  [
    "DiscordSendPluginCustomText [classic|retail]",
    "\nDescription: Sends a custom text to Discord from the plugin.",
    "undefined--@arg text: string _ The custom text to send./nfunction/nBANETO_DiscordSendPluginCustomText/n(/n)/n"
  ],
  [
    "DiscordSendTargeted [classic|retail]",
    "\nDescription: Sends a targeted name to Discord.",
    "undefined--@arg name: string _ The name of the target to send./nfunction/nBANETO_DiscordSendTargeted/n(/n)/n"
  ],
  [
    "DiscordSendPluginMobFound [classic|retail]",
    "\nDescription: Sends a message to Discord when a Mob is found by the plugin.",
    "undefined--@arg id: number _ The ID of the Mob that was found./nfunction/nBANETO_DiscordSendPluginMobFound/n(/n)/n"
  ],
  [
    "DiscordSendStuck [classic|retail]",
    "\nDescription: Sends a message to Discord when the character is stuck.",
    "undefinedfunction/nBANETO_DiscordSendStuck/n(/n)/n"
  ],
  [
    "DiscordSendBgStart [classic|retail]",
    "\nDescription: Sends a message to Discord when the battleground starts.",
    "undefinedfunction/nBANETO_DiscordSendBgStart/n(/n)/n"
  ],
  [
    "DiscordSendDeath [classic|retail]",
    "\nDescription: Sends a message to Discord when the character dies.",
    "undefinedfunction/nBANETO_DiscordSendDeath/n(/n)/n"
  ],
  [
    "DiscordSendPluginItemFound [classic|retail]",
    "\nDescription: Sends a message to Discord when the plugin finds an item.",
    "undefinedfunction/nBANETO_DiscordSendPluginItemFound/n(/n)/n"
  ],
  [
    "DiscordSendTest [classic|retail]",
    "\nDescription: Sends a test message to Discord.",
    "undefinedfunction/nBANETO_DiscordSendTest/n(/n)/n"
  ],
  [
    "GetXpPercent [classic|retail]",
    "\nDescription: Retrieves the percentage of the current experience.",
    "undefined--@return: number _ The current experience percentage./nfunction/nBANETO_GetXpPercent/n(/n)/n"
  ],
  [
    "DiscordSendStatus [classic|retail]",
    "\nDescription: Sends the status to Discord.",
    "undefinedfunction/nBANETO_DiscordSendStatus/n(/n)/n"
  ],
  [
    "SelectNextMultidotTargetPriest [classic]",
    "\nDescription: Selects the next target to apply multiple damage over time spells as a priest.",
    "undefinedfunction/nBANETO_SelectNextMultidotTargetPriest/n(/n)/n"
  ],
  [
    "IsFightBlockedByMageMultipull [classic|retail]",
    "\nDescription: Checks whether the fight is blocked by a mage multipull.",
    "undefined--@return: boolean _ true if the fight is blocked, false otherwise./nfunction/nBANETO_IsFightBlockedByMageMultipull/n(/n)/n"
  ],
  [
    "IsAnEnemyNotFullMultidotted [classic|retail]",
    "\nDescription: Checks whether an enemy is not fully affected by multiple damage over time spells.",
    "undefined--@return: boolean _ true if the enemy is not fully affected, false otherwise./nfunction/nBANETO_IsAnEnemyNotFullMultidotted/n(/n)/n"
  ],
  [
    "IsAnEnemyPlaguedPriest [classic]",
    "\nDescription: Checks if a specified enemy unit is a Plagued Priest.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAnEnemyPlaguedPriest/n(/n)/n"
  ],
  [
    "IsAnEnemyNotFullMultidottedPriest [classic]",
    "\nDescription: Checks if a specified enemy Priest unit is not fully multidotted.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAnEnemyNotFullMultidottedPriest/n(/n)/n"
  ],
  [
    "IsAnEnemyPolymorphed [classic|retail]",
    "\nDescription: Checks if a specified enemy unit is polymorphed.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAnEnemyPolymorphed/n(/n)/n"
  ],
  [
    "SwingTimerTest [classic]",
    "\nDescription: Tests the swing timer of the player character.",
    "undefined--@return: number (the time remaining until the next auto_attack)/nfunction/nBANETO_SwingTimerTest/n(/n)/n"
  ],
  [
    "SwingTimer [classic]",
    "\nDescription: Returns the player's swing timer.",
    "undefined--@return: number (the time remaining until the next auto_attack)/nfunction/nBANETO_SwingTimer/n(/n)/n"
  ],
  [
    "SpellStopCasting [classic|retail]",
    "\nDescription: Stops the current spell being cast.",
    "undefinedfunction/nBANETO_SpellStopCasting/n(/n)/n"
  ],
  [
    "RetargetLowestHealthMob [classic|retail]",
    "\nDescription: Changes target to the enemy mob with the lowest health.",
    "undefinedfunction/nBANETO_RetargetLowestHealthMob/n(/n)/n"
  ],
  [
    "RetargetGoodMobAfterMultidot [classic|retail]",
    "\nDescription: Changes target to a good mob after multidot.",
    "undefinedfunction/nBANETO_RetargetGoodMobAfterMultidot/n(/n)/n"
  ],
  [
    "RetargetGoodMobAfterMultidotPriest [classic]",
    "\nDescription: Changes target to a good mob after multidot, with preference for Priests.",
    "undefinedfunction/nBANETO_RetargetGoodMobAfterMultidotPriest/n(/n)/n"
  ],
  [
    "RetargetGoodMobAfterPoly [classic|retail]",
    "\nDescription: Changes target to a good mob after a polymorph effect.",
    "undefinedfunction/nBANETO_RetargetGoodMobAfterPoly/n(/n)/n"
  ],
  [
    "TargetPolymorphedMob [classic|retail]",
    "\nDescription: Targets a polymorphed mob.",
    "undefinedfunction/nBANETO_TargetPolymorphedMob/n(/n)/n"
  ],
  [
    "TargetAndPolymorph [classic|retail]",
    "\nDescription: Targets and polymorphs a specified mob.",
    "undefinedfunction/nBANETO_TargetAndPolymorph/n(/n)/n"
  ],
  [
    "IsUnitMultidotted [classic|retail]",
    "\nDescription: Checks if a specified unit is multidotted.",
    "undefined--@arg unit: string (unit to be checked)/n--@return: boolean/nfunction/nBANETO_IsUnitMultidotted/n(/n)/n"
  ],
  [
    "IsUnitMultidottedPriest [classic]",
    "\nDescription: Checks if a specified unit is multidotted, with preference for Priests.",
    "undefined--@arg unit: string (unit to be checked)/n--@return: boolean/nfunction/nBANETO_IsUnitMultidottedPriest/n(/n)/n"
  ],
  [
    "IsUnitPolymorphed [classic|retail]",
    "\nDescription: Checks if a specified unit is polymorphed.",
    "undefined--@arg unit: string (unit to be checked)/n--@return: boolean/nfunction/nBANETO_IsUnitPolymorphed/n(/n)/n"
  ],
  [
    "Object [classic|retail]",
    "\nDescription: Creates a new Object with the given value.",
    "undefined--@arg arg: mixed/n--@return: Object/nfunction/nBANETO_Object/n(/n)/n"
  ],
  [
    "ClearTarget [classic|retail]",
    "\nDescription: Clears the current target.",
    "undefinedfunction/nBANETO_ClearTarget/n(/n)/n"
  ],
  [
    "SelectActiveEnemyAroundPlayer [classic|retail]",
    "\nDescription: Selects an active enemy within a certain radius around the player.",
    "undefined--@arg radius: number/n--@return: unitId (unit identifier of the selected enemy)/nfunction/nBANETO_SelectActiveEnemyAroundPlayer/n(/n)/n"
  ],
  [
    "CancelEnrageBuffing [classic]",
    "\nDescription: Cancels the enrage buffing state of the player character.",
    "undefinedfunction/nBANETO_CancelEnrageBuffing/n(/n)/n"
  ],
  [
    "GetNumEnemiesAroundUnit [classic|retail]",
    "\nDescription: Retrieves the number of enemy units around a specified unit.",
    "undefined--@arg unit: string (unit identifier)/n--@arg radius: number/n--@return: number/nfunction/nGetNumEnemiesAroundUnit/n(/n,/n)/n"
  ],
  [
    "SetRETAIL_WQUEST [classic|retail]",
    "\nDescription: Sets the value of the RETAIL_WQUEST variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetRETAIL_WQUEST/n(/n)/n"
  ],
  [
    "SetOZ_RAREFARM_QUESTSCAN [classic|retail]",
    "\nDescription: Sets the value of the OZ_RAREFARM_QUESTSCAN variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetOZ_RAREFARM_QUESTSCAN/n(/n)/n"
  ],
  [
    "UnitThreatSituation [classic|retail]",
    "\nDescription: Checks the threat level between two units.",
    "undefined--@arg unit1: string/n--@arg unit2: string/n--@return: number/nfunction/nBANETO_UnitThreatSituation/n(/n,/n)/n"
  ],
  [
    "SetBLOCKMOVING_REICHI [classic|retail]",
    "\nDescription: Sets the value of the BLOCKMOVING_REICHI variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetBLOCKMOVING_REICHI/n(/n)/n"
  ],
  [
    "SetBLACKLIST_SPOTS [classic|retail]",
    "\nDescription: Sets the value of the BLACKLIST_SPOTS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetBLACKLIST_SPOTS/n(/n)/n"
  ],
  [
    "SetDEFINED_TARGET_IDS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_TARGET_IDS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_TARGET_IDS/n(/n)/n"
  ],
  [
    "SetDEFINED_CENTERS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_CENTERS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_CENTERS/n(/n)/n"
  ],
  [
    "SetDEFINED_QUEST_IDS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_QUEST_IDS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_QUEST_IDS/n(/n)/n"
  ],
  [
    "SetDEFINED_QUEST_PICKUP_NPCS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_QUEST_PICKUP_NPCS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_QUEST_PICKUP_NPCS/n(/n)/n"
  ],
  [
    "SetQUEST_TURNIN_NPCS [classic|retail]",
    "\nDescription: Sets the value of the QUEST_TURNIN_NPCS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetQUEST_TURNIN_NPCS/n(/n)/n"
  ],
  [
    "SetDEFINED_QUESTSTEP_TYPES [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_QUESTSTEP_TYPES variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_QUESTSTEP_TYPES/n(/n)/n"
  ],
  [
    "SetDEFINED_VENDOR_GOODS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_VENDOR_GOODS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_VENDOR_GOODS/n(/n)/n"
  ],
  [
    "SetDEFINED_VENDOR_REPAIR [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_VENDOR_REPAIR variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_VENDOR_REPAIR/n(/n)/n"
  ],
  [
    "SetDEFINED_VENDOR_SELL [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_VENDOR_SELL variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_VENDOR_SELL/n(/n)/n"
  ],
  [
    "SetEATINGDRINKING_RETAIL_DELAY_AMOUNT [classic|retail]",
    "\nDescription: Sets the value of the EATINGDRINKING_RETAIL_DELAY_AMOUNT variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetEATINGDRINKING_RETAIL_DELAY_AMOUNT/n(/n)/n"
  ],
  [
    "SetSTOPFIGHT_EVADE [classic|retail]",
    "\nDescription: Blacklists the FIGHTING state until the specified timestamp expires. If you already are in FIGHTING state you need to call BANETO_SetSTOPFIGHT_EVADE(true) to leave it!",
    "undefined--@arg timestamp: Example would be GetTime()+10/nfunction/nBANETO_SetSTOPFIGHT_EVADE/n(/n)/n"
  ],
  [
    "SetBLOCKMOVING [classic|retail]",
    "\nDescription: Sets the value of the BLOCKMOVING variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetBLOCKMOVING/n(/n)/n"
  ],
  [
    "SetIsLocalQuester [classic|retail]",
    "\nDescription: Sets the value of the IsLocalQuester variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetIsLocalQuester/n(/n)/n"
  ],
  [
    "SetFIGHTING_EMERGENCY_LEAVE [classic|retail]",
    "\nDescription: Sets the value of the FIGHTING_EMERGENCY_LEAVE variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetFIGHTING_EMERGENCY_LEAVE/n(/n)/n"
  ],
  [
    "SetRETAIL_GOSSIP_QUEST [classic|retail]",
    "\nDescription: Sets the value of the RETAIL_GOSSIP_QUEST variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetRETAIL_GOSSIP_QUEST/n(/n)/n"
  ],
  [
    "SetSPELLONLOCATION_ID [classic|retail]",
    "\nDescription: Sets the value of the SPELLONLOCATION_ID variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetSPELLONLOCATION_ID/n(/n)/n"
  ],
  [
    "HasTotemActive [classic|retail]",
    "\nDescription: Checks if a specific totem with the given ID is active.",
    "undefined--@arg idTotem: number/n--@return: boolean/nfunction/nBANETO_HasTotemActive/n(/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundVectorNotInfight [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific position who are not currently in a fight",
    "undefined--@arg x: number _ The X coordinate of the position/n--@arg y: number _ The Y coordinate of the position/n--@arg z: number _ The Z coordinate of the position/n--@arg radius: number _ The radius within which to look for enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundVectorNotInfight/n(/n,/n,/n,/n)/n"
  ],
  [
    "FindNextAssistPositionNew [classic]",
    "\nDescription: Finds the next position to assist a player character",
    "undefined--@return: string _ The coordinates of the next assist position/nfunction/nBANETO_FindNextAssistPositionNew/n(/n)/n"
  ],
  [
    "FindNextAssistPosition [classic|retail]",
    "\nDescription: Finds the next position to assist a player character",
    "undefined--@return: string _ The coordinates of the next assist position/nfunction/nBANETO_FindNextAssistPosition/n(/n)/n"
  ],
  [
    "GetNumPlayersAroundUnit [classic|retail]",
    "\nDescription: Counts the number of players around a specific unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count players/n--@return: number _ The number of players found/nfunction/nGetNumPlayersAroundUnit/n(/n,/n)/n"
  ],
  [
    "GetNumFriendsAroundUnitPvp [classic|retail]",
    "\nDescription: Counts the number of friendly units around a specific unit in PvP",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count friendly units/n--@return: number _ The number of friendly units found/nfunction/nGetNumFriendsAroundUnitPvp/n(/n,/n)/n"
  ],
  [
    "CountPlayersAroundMe [classic|retail]",
    "\nDescription: Counts the number of players around the current player character",
    "undefined--@arg radius: number _ The radius within which to count players/n--@return: number _ The number of players found/nfunction/nCountPlayersAroundMe/n(/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundUnitPvp [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific unit in PvP",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count hostile enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundUnitPvp/n(/n,/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundUnitBlacklistFunc [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific unit, excluding those on a blacklist",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count hostile enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundUnitBlacklistFunc/n(/n,/n)/n"
  ],
  [
    "GetNumPossibleEnemiesAroundUnit [classic|retail]",
    "\nDescription: Counts the number of potential enemies around a specific unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count potential enemies/n--@return: number _ The number of potential enemies found/nfunction/nGetNumPossibleEnemiesAroundUnit/n(/n,/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundUnit [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count hostile enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundUnit/n(/n,/n)/n"
  ],
  [
    "Print [classic|retail]",
    "\nDescription: Prints a message to the console",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_Print/n(/n)/n"
  ],
  [
    "PrintError [classic|retail]",
    "\nDescription: Prints an error message to the console",
    "undefined--@arg message: string _ The error message to be printed/n--@return: nil/nfunction/nBANETO_PrintError/n(/n)/n"
  ],
  [
    "SetBamboLog [classic|retail]",
    "\nDescription: Toggles the logging functionality of the BANETO module",
    "undefined--@arg bool: boolean _ True to enable logging, false to disable it/n--@return: nil/nfunction/nBANETO_SetBamboLog/n(/n)/n"
  ],
  [
    "PrintPalaDebug [classic]",
    "\nDescription: Prints a debug message for the Paladin class",
    "undefined--@arg message: string _ The debug message to be printed/n--@return: nil/nfunction/nBANETO_PrintPalaDebug/n(/n)/n"
  ],
  [
    "PrintDungeonDebug [classic]",
    "\nDescription: Prints a debug message for dungeon activities",
    "undefined--@arg message: string _ The debug message to be printed/n--@return: nil/nfunction/nBANETO_PrintDungeonDebug/n(/n)/n"
  ],
  [
    "PrintBambo [classic|retail]",
    "\nDescription: Prints a message to the console with the prefix \"Bambo\"",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintBambo/n(/n)/n"
  ],
  [
    "PrintGatherLandingDebug [classic]",
    "\nDescription: Prints a debug message for the GatherLanding module",
    "undefined--@arg message: string _ The debug message to be printed/n--@return: nil/nfunction/nBANETO_PrintGatherLandingDebug/n(/n)/n"
  ],
  [
    "PrintWarning [classic|retail]",
    "\nDescription: Prints a warning message to the console",
    "undefined--@arg message: string _ The warning message to be printed/n--@return: nil/nfunction/nBANETO_PrintWarning/n(/n)/n"
  ],
  [
    "PrintSuccess [classic|retail]",
    "\nDescription: Prints a success message to the console",
    "undefined--@arg message: string _ The success message to be printed/n--@return: nil/nfunction/nBANETO_PrintSuccess/n(/n)/n"
  ],
  [
    "PrintFight [classic|retail]",
    "\nDescription: Prints a message related to fighting activities to the console",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintFight/n(/n)/n"
  ],
  [
    "PrintMeme [classic|retail]",
    "\nDescription: Prints a meme message to the console",
    "undefined--@arg message: string _ The meme message to be printed/n--@return: nil/nfunction/nBANETO_PrintMeme/n(/n)/n"
  ],
  [
    "PrintProfile [classic|retail]",
    "\nDescription: Prints a message related to profile activities to the console",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintProfile/n(/n)/n"
  ],
  [
    "PrintStateWithDelay [classic|retail]",
    "\nDescription: Prints a message with a delay",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintStateWithDelay/n(/n)/n"
  ],
  [
    "PrintState [classic|retail]",
    "\nDescription: Prints a message",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintState/n(/n)/n"
  ],
  [
    "PrintDev [classic|retail]",
    "\nDescription: Prints a message for development purposes",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintDev/n(/n)/n"
  ],
  [
    "GetVersion [classic|retail]",
    "\nDescription: Gets the version of the BANETO module",
    "undefined--@return: string _ The version of the BANETO module/nfunction/nBANETO_GetVersion/n(/n)/n"
  ],
  [
    "GetRawgoldPerHour [classic|retail]",
    "\nDescription: Gets the raw gold earnings per hour",
    "undefined--@return: number _ The raw gold earnings per hour/nfunction/nBANETO_GetRawgoldPerHour/n(/n)/n"
  ],
  [
    "GetXpPerHour [classic|retail]",
    "\nDescription: Gets the experience points gain rate per hour",
    "undefined--@return: number _ The experience points gain rate per hour/nfunction/nBANETO_GetXpPerHour/n(/n)/n"
  ],
  [
    "StashStatsValues [classic|retail]",
    "\nDescription: Stores the stats values",
    "undefined--@return: nil/nfunction/nBANETO_StashStatsValues/n(/n)/n"
  ],
  [
    "UseWand [classic|retail]",
    "\nDescription: Uses a wand",
    "undefined--@return: nil/nfunction/nUseWand/n(/n)/n"
  ],
  [
    "IsWandBlocked [classic]",
    "\nDescription: Checks if the use of wand is blocked",
    "undefined--@return: boolean _ Returns true if the use of wand is blocked, false otherwise/nfunction/nIsWandBlocked/n(/n)/n"
  ],
  [
    "testLos [classic|retail]",
    "\nDescription: Tests the line of sight",
    "undefined--@return: boolean _ Returns true if the line of sight is clear, false otherwise/nfunction/ntestLos/n(/n)/n"
  ],
  [
    "IsUnitInLos [classic|retail]",
    "\nDescription: Checks if a unit is in the line of sight",
    "undefined--@arg object: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit is in the line of sight, false otherwise/nfunction/nBANETO_IsUnitInLos/n(/n)/n"
  ],
  [
    "IsTargetInLos [classic|retail]",
    "\nDescription: Checks if the target is in the line of sight",
    "undefined--@return: boolean _ Returns true if the target is in the line of sight, false otherwise/nfunction/nBANETO_IsTargetInLos/n(/n)/n"
  ],
  [
    "GetTotalBagSlots [classic|retail]",
    "\nDescription: Gets the total number of bag slots",
    "undefined--@return: number _ The total number of bag slots/nfunction/nBANETO_GetTotalBagSlots/n(/n)/n"
  ],
  [
    "GetFreeBagSlots [classic|retail]",
    "\nDescription: Gets the number of free bag slots",
    "undefined--@return: number _ The number of free bag slots/nfunction/nBANETO_GetFreeBagSlots/n(/n)/n"
  ],
  [
    "CancelShapeshift [classic|retail]",
    "\nDescription: Cancels the shapeshift effect",
    "undefined--@return: nil/nfunction/nBANETO_CancelShapeshift/n(/n)/n"
  ],
  [
    "CancelShapeshift [classic|retail]",
    "\nDescription: Cancels the shapeshift effect",
    "undefined--@return: nil/nfunction/nCancelShapeshift/n(/n)/n"
  ],
  [
    "GetShapeshiftDruid [classic|retail]",
    "\nDescription: Gets the current shapeshift form for a druid",
    "undefined--@return: string _ The current shapeshift form for a druid/nfunction/nGetShapeshiftDruid/n(/n)/n"
  ],
  [
    "HasDebuffWithCount [classic|retail]",
    "\nDescription: Checks if a unit has a specific debuff with a count",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: number _ Returns the count of the specified debuff on the unit, 0 if the unit does not have the debuff/nfunction/nBANETO_HasDebuffWithCount/n(/n,/n,/n)/n"
  ],
  [
    "GetBuffCooldown [classic|retail]",
    "\nDescription: Gets the cooldown of a buff on a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: number _ Returns the cooldown of the buff in seconds/nfunction/nBANETO_GetBuffCooldown/n(/n,/n)/n"
  ],
  [
    "HasBuffWithCount [classic|retail]",
    "\nDescription: Checks if a unit has a specific buff with a count",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: number _ Returns the count of the specified buff on the unit, 0 if the unit does not have the buff/nfunction/nBANETO_HasBuffWithCount/n(/n,/n,/n)/n"
  ],
  [
    "HasBuff [classic|retail]",
    "\nDescription: Checks if a unit has a specific buff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: boolean _ Returns true if the unit has the specified buff, false otherwise/nfunction/nBANETO_HasBuff/n(/n,/n,/n)/n"
  ],
  [
    "GetUnitSpeed [classic|retail]",
    "\nDescription: Gets the speed of a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: number _ Returns the speed of the unit/nfunction/nBANETO_GetUnitSpeed/n(/n)/n"
  ],
  [
    "ShamanPoisonDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Shaman has a poison debuff",
    "undefined--@return: boolean _ Returns true if the Shaman has a poison debuff, false otherwise/nfunction/nBANETO_ShamanPoisonDebuffCheck/n(/n)/n"
  ],
  [
    "HasPoisonDebuffCheck [classic|retail]",
    "\nDescription: Checks if a unit has a poison debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a poison debuff, false otherwise/nfunction/nBANETO_HasPoisonDebuffCheck/n(/n)/n"
  ],
  [
    "HasMagicCheck [classic|retail]",
    "\nDescription: Checks if a unit has a magic debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a magic debuff, false otherwise/nfunction/nBANETO_HasMagicCheck/n(/n)/n"
  ],
  [
    "HasSicknessDebuffCheck [classic|retail]",
    "\nDescription: Checks if a unit has a sickness debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a sickness debuff, false otherwise/nfunction/nBANETO_HasSicknessDebuffCheck/n(/n)/n"
  ],
  [
    "HasCurseDebuffCheck [classic|retail]",
    "\nDescription: Checks if a unit has a curse debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a curse debuff, false otherwise/nfunction/nBANETO_HasCurseDebuffCheck/n(/n)/n"
  ],
  [
    "ShamanSicknessDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Shaman has a sickness debuff",
    "undefined--@return: boolean _ Returns true if the Shaman has a sickness debuff, false otherwise/nfunction/nBANETO_ShamanSicknessDebuffCheck/n(/n)/n"
  ],
  [
    "DelayMountingAndFlying [classic|retail]",
    "\nDescription: Delays mounting and flying for a specified time",
    "undefined--@arg seconds: number _ The delay in seconds/n--@return: nil/nfunction/nBANETO_DelayMountingAndFlying/n(/n)/n"
  ],
  [
    "DelayMeshPathing [classic|retail]",
    "\nDescription: Delays mesh pathing for a specified time",
    "undefined--@arg seconds: number _ The delay in seconds/n--@return: nil/nfunction/nBANETO_DelayMeshPathing/n(/n)/n"
  ],
  [
    "DelayTargeting [classic|retail]",
    "\nDescription: Delays targeting for a specified time",
    "undefined--@arg seconds: number _ The delay in seconds/n--@return: nil/nfunction/nBANETO_DelayTargeting/n(/n)/n"
  ],
  [
    "PaladinPurifyDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Paladin has a purify debuff",
    "undefined--@return: boolean _ Returns true if the Paladin has a purify debuff, false otherwise/nfunction/nBANETO_PaladinPurifyDebuffCheck/n(/n)/n"
  ],
  [
    "DruidCurseDebuffCheck [classic]",
    "\nDescription: Checks if the Druid has a curse debuff",
    "undefined--@return: boolean _ Returns true if the Druid has a curse debuff, false otherwise/nfunction/nBANETO_DruidCurseDebuffCheck/n(/n)/n"
  ],
  [
    "DruidPoisonDebuffCheck [classic]",
    "\nDescription: Checks if the Druid has a poison debuff",
    "undefined--@return: boolean _ Returns true if the Druid has a poison debuff, false otherwise/nfunction/nBANETO_DruidPoisonDebuffCheck/n(/n)/n"
  ],
  [
    "PriestCureDiseaseDebuffCheck [classic]",
    "\nDescription: Checks if the Priest can cure a disease debuff",
    "undefined--@return: boolean _ Returns true if the Priest can cure a disease debuff, false otherwise/nfunction/nBANETO_PriestCureDiseaseDebuffCheck/n(/n)/n"
  ],
  [
    "PaladinCleanseDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Paladin can cleanse a debuff",
    "undefined--@return: boolean _ Returns true if the Paladin can cleanse a debuff, false otherwise/nfunction/nBANETO_PaladinCleanseDebuffCheck/n(/n)/n"
  ],
  [
    "formatItemForHekili [classic|retail]",
    "\nDescription: Formats an item for Hekili",
    "undefined--@arg itemArg: string _ The item to be formatted/n--@return: string _ The formatted item/nfunction/nformatItemForHekili/n(/n)/n"
  ],
  [
    "isHekiliLoaded [classic|retail]",
    "\nDescription: Checks if Hekili is loaded",
    "undefined--@return: boolean _ Returns true if Hekili is loaded, false otherwise/nfunction/nisHekiliLoaded/n(/n)/n"
  ],
  [
    "Hekili [classic|retail]",
    "\nDescription: Returns the Hekili state",
    "undefined--@return: string _ Returns the Hekili state/nfunction/nBANETO_Hekili/n(/n)/n"
  ],
  [
    "GetBuffDuration [classic|retail]",
    "\nDescription: Gets the duration of a buff on a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: number _ Returns the duration of the buff in seconds/nfunction/nBANETO_GetBuffDuration/n(/n,/n)/n"
  ],
  [
    "GetDebuffDuration [classic|retail]",
    "\nDescription: Gets the duration of a debuff on a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: number _ Returns the duration of the debuff in seconds/nfunction/nBANETO_GetDebuffDuration/n(/n,/n)/n"
  ],
  [
    "HasStealableCheck [classic|retail]",
    "\nDescription: Checks if a unit has a stealable buff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a stealable buff, false otherwise/nfunction/nBANETO_HasStealableCheck/n(/n)/n"
  ],
  [
    "HasHelpfulMagicCheck [classic|retail]",
    "\nDescription: Checks if a unit has a helpful magic buff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a helpful magic buff, false otherwise/nfunction/nBANETO_HasHelpfulMagicCheck/n(/n)/n"
  ],
  [
    "HasEnrageCheck [classic|retail]",
    "\nDescription: Checks if a unit has an enrage effect",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has an enrage effect, false otherwise/nfunction/nBANETO_HasEnrageCheck/n(/n)/n"
  ],
  [
    "HasDebuffWithOwnerCheck [classic|retail]",
    "\nDescription: Checks if a unit has a specific debuff with a specific owner",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: boolean _ Returns true if the unit has the specified debuff with the specified owner, false otherwise/nfunction/nBANETO_HasDebuffWithOwnerCheck/n(/n,/n)/n"
  ],
  [
    "CountDebuffsAroundUnit [classic|retail]",
    "\nDescription: Counts the number of units around a specified unit with a specific debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg debuff: string _ The name of the debuff/n--@arg range: number _ The range to check for units with the debuff/n--@return: number _ Returns the number of units with the debuff within the specified range/nfunction/nBANETO_CountDebuffsAroundUnit/n(/n,/n,/n)/n"
  ],
  [
    "HasDebuff [classic|retail]",
    "\nDescription: Checks if a unit has a specific debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: boolean _ Returns true if the unit has the specified debuff, false otherwise/nfunction/nBANETO_HasDebuff/n(/n,/n,/n)/n"
  ],
  [
    "IsItemFood [classic|retail]",
    "\nDescription: Checks if an item is food",
    "undefined--@arg itemid: number _ The ID of the item/n--@return: boolean _ Returns true if the item is food, false otherwise/nfunction/nBANETO_IsItemFood/n(/n)/n"
  ],
  [
    "IsItemDrink [classic|retail]",
    "\nDescription: Checks if an item is drink",
    "undefined--@arg itemid: number _ The ID of the item/n--@return: boolean _ Returns true if the item is drink, false otherwise/nfunction/nBANETO_IsItemDrink/n(/n)/n"
  ],
  [
    "FindDrinkInBags [classic|retail]",
    "\nDescription: Finds drink in bags",
    "undefined--@return: bagID number bagID of the found drink, nil if not found/nfunction/nBANETO_FindDrinkInBags/n(/n)/n"
  ],
  [
    "IsWellFed [classic|retail]",
    "\nDescription: Checks if the player is well fed",
    "undefined--@return: boolean _ Returns true if the player is well fed, false otherwise/nfunction/nBANETO_IsWellFed/n(/n)/n"
  ],
  [
    "FindBuffFoodInBags [classic|retail]",
    "\nDescription: Finds buff food in bags",
    "undefined--@return: bagID number bagID of the found buff food, nil if not found/nfunction/nBANETO_FindBuffFoodInBags/n(/n)/n"
  ],
  [
    "ScanGraveyards [classic|retail]",
    "\nDescription: Scans for graveyards",
    "undefined--@return: table _ Returns a table of graveyard locations/nfunction/nBANETO_ScanGraveyards/n(/n)/n"
  ],
  [
    "GetClosestGraveyard [classic|retail]",
    "\nDescription: Gets the closest graveyard",
    "undefined--@return: string _ Returns the location of the closest graveyard/nfunction/nBANETO_GetClosestGraveyard/n(/n)/n"
  ],
  [
    "FindFoodInBags [classic|retail]",
    "\nDescription: Finds food in bags",
    "undefined--@return: bagID number bagID of the found food, nil if not found/nfunction/nBANETO_FindFoodInBags/n(/n)/n"
  ],
  [
    "GetFoodAmountInBags [classic|retail]",
    "\nDescription: Gets the amount of food in bags",
    "undefined--@return: number _ Returns the amount of food in bags/nfunction/nBANETO_GetFoodAmountInBags/n(/n)/n"
  ],
  [
    "HttpGETRequestCustom [classic|retail]",
    "\nDescription: Sends a HTTP GET request to a specified URL and handles the response with a specified callback handler",
    "undefined--@arg url: string _ The URL to send the request to/nfunction/n-- The callback handler to process the response/nreturn/n:/nnil/n]/n]/n--/nfunction/nHttpGETRequestCustom/n(/n,/n)/n"
  ],
  [
    "HttpGet [classic|retail]",
    "\nDescription: Sends a HTTP GET request to a specified URL and handles the response with a specified callback function",
    "undefined--@arg url1: string _ The URL to send the request to/nfunction/nreturn/n:/nnil/n]/n]/n--/nfunction/nBANETO_HttpGet/n(/n,/n)/n"
  ],
  [
    "HttpPost [classic|retail]",
    "\nDescription: Sends a HTTP POST request to a specified URL with a specified payload and handles the response with a specified callback function",
    "undefined--@arg url1: string _ The URL to send the request to/n--@arg payload: json _ The payload to send with the request/nfunction/nreturn/n:/nnil/n]/n]/n--/nfunction/nBANETO_HttpPost/n(/n,/n,/n)/n"
  ],
  [
    "HttpPut [classic|retail]",
    "\nDescription: Sends a HTTP PUT request to a specified URL with a specified payload and handles the response with a specified callback function",
    "undefined--@arg url1: string _ The URL to send the request to/n--@arg payload: json _ The payload to send with the request/nfunction/nreturn/n:/nnil/n]/n]/n--/nfunction/nBANETO_HttpPut/n(/n,/n,/n)/n"
  ],
  [
    "HttpRequestCustom [classic|retail]",
    "\nDescription: Sends a HTTP request to a specified URL",
    "undefined--@arg url: string _ The URL to send the request to/n--@return: string _ The response from the HTTP request/nfunction/nHttpRequestCustom/n(/n)/n"
  ],
  [
    "GoAnon [classic|retail]",
    "\nDescription: Hides characterspecific information so you can take screenshots or record videos without exposing your account to risk.",
    "undefined--@return: nil/nfunction/nBANETO_GoAnon/n(/n)/n"
  ],
  [
    "LoadOneZeroProfilelist [classic|retail]",
    "\nDescription: Loads the OneZero profile list",
    "undefined--@return: table _ Returns a table of the OneZero profiles/nfunction/nBANETO_LoadOneZeroProfilelist/n(/n)/n"
  ],
  [
    "IsOzDbAllowed [classic|retail]",
    "\nDescription: Checks if the Oz database is allowed",
    "undefined--@return: boolean _ Returns true if the Oz database is allowed, false otherwise/nfunction/nBANETO_IsOzDbAllowed/n(/n)/n"
  ],
  [
    "IsOzAllowed [classic|retail]",
    "\nDescription: Checks if Oz is allowed",
    "undefined--@return: boolean _ Returns true if Oz is allowed, false otherwise/nfunction/nBANETO_IsOzAllowed/n(/n)/n"
  ],
  [
    "LoadOneZeroDb [classic|retail]",
    "\nDescription: Loads the OneZero database",
    "undefined--@return: table _ Returns a table of the OneZero database/nfunction/nBANETO_LoadOneZeroDb/n(/n)/n"
  ],
  [
    "LoadOneZeroAuth [classic|retail]",
    "\nDescription: Loads the OneZero authentication",
    "undefined--@return: string _ Returns the OneZero authentication string/nfunction/nBANETO_LoadOneZeroAuth/n(/n)/n"
  ],
  [
    "GetDrinkAmountInBags [classic|retail]",
    "\nDescription: Retrieves the amount of drink items in bags.",
    "undefined--@return: number The number of drink items in bags./nfunction/nBANETO_GetDrinkAmountInBags/n(/n)/n"
  ],
  [
    "GetBestAmmoType [classic|retail]",
    "\nDescription: Determines the best ammo type available.",
    "undefined--@return: string The name of the best ammo type./nfunction/nBANETO_GetBestAmmoType/n(/n)/n"
  ],
  [
    "EquipBestAmmoType [classic|retail]",
    "\nDescription: Equips the best ammo type available.",
    "undefined--@return: nil/nfunction/nBANETO_EquipBestAmmoType/n(/n)/n"
  ],
  [
    "ForceQuit [classic|retail]",
    "\nDescription: Forces the game client to quit.",
    "undefined--@return: nil/nfunction/nBANETO_ForceQuit/n(/n)/n"
  ],
  [
    "GetAmmoAmountInBags [classic|retail]",
    "\nDescription: Retrieves the amount of ammo in bags.",
    "undefined--@return: number The number of ammo items in bags./nfunction/nBANETO_GetAmmoAmountInBags/n(/n)/n"
  ],
  [
    "UnitHealth [classic|retail]",
    "\nDescription: Retrieves the health of a specific unit in percentage.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The health of the unit./nfunction/nBANETO_UnitHealth/n(/n)/n"
  ],
  [
    "UnitHealthRaw [classic|retail]",
    "\nDescription: Retrieves the health of a specific unit.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The health of the unit./nfunction/nBANETO_UnitHealthRaw/n(/n)/n"
  ],
  [
    "UnitManaPercent [classic|retail]",
    "\nDescription: Retrieves the percentage of mana of a specific unit. Always returns 100 for class 1 and class 4.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The percentage of mana of the unit./nfunction/nBANETO_UnitManaPercent/n(/n)/n"
  ],
  [
    "UnitMana [classic|retail]",
    "\nDescription: Retrieves the mana of a specific unit in percentage.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The mana of the unit./nfunction/nBANETO_UnitMana/n(/n)/n"
  ],
  [
    "GetObjectWithCoordinates [classic|retail]",
    "\nDescription: Retrieves an object with specific coordinates.",
    "undefined--@arg x: number, The X_coordinate of the object./n--@arg y: number, The Y_coordinate of the object./n--@arg z: number, The Z_coordinate of the object./n--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithCoordinates/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetObjectWithIdTiny [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID in close proximity.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdTiny/n(/n)/n"
  ],
  [
    "GetObjectWithIdClose [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID in close proximity.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdClose/n(/n)/n"
  ],
  [
    "GetObjectWithIdMedium [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID in medium proximity.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdMedium/n(/n)/n"
  ],
  [
    "GetObjectWithIdIncludingBlacklistCheck [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID, includes blacklist check.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdIncludingBlacklistCheck/n(/n)/n"
  ],
  [
    "GetObjectWithId [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithId/n(/n)/n"
  ],
  [
    "CheckMammothSpammer [classic|retail]",
    "\nDescription: Checks for Mammoth spammers.",
    "undefined--@return: boolean True if a spammer is detected, otherwise false./nfunction/nBANETO_CheckMammothSpammer/n(/n)/n"
  ],
  [
    "IsInsideDungeon [classic]",
    "\nDescription: Checks if the player is inside a dungeon.",
    "undefined--@return: boolean True if the player is inside a dungeon, otherwise false./nfunction/nBANETO_IsInsideDungeon/n(/n)/n"
  ],
  [
    "TestHs [classic]",
    "\nDescription: Tests the hearthstone.",
    "undefined--@return: nil/nfunction/nBANETO_TestHs/n(/n)/n"
  ],
  [
    "MakesHsUsageSense [classic|retail]",
    "\nDescription: Checks if using hearthstone makes sense at the moment.",
    "undefined--@return: boolean True if using the hearthstone makes sense, otherwise false./nfunction/nBANETO_MakesHsUsageSense/n(/n)/n"
  ],
  [
    "GetObjectLocationWithId [classic|retail]",
    "\nDescription: Retrieves the location of an object with a specific ID.",
    "undefined--@arg id: string, The ID of the object./n--@return: x number The X_coordinate of the object./nfunction/nGetObjectLocationWithId/n(/n)/n"
  ],
  [
    "IsMailboxObject [classic|retail]",
    "\nDescription: Checks if an object is a mailbox.",
    "undefined--@arg id: string, The ID of the object./n--@return: boolean True if the object is a mailbox, otherwise false./nfunction/nBANETO_IsMailboxObject/n(/n)/n"
  ],
  [
    "MailboxInteract [classic|retail]",
    "\nDescription: Interacts with a mailbox.",
    "undefined--@return: nil/nfunction/nBANETO_MailboxInteract/n(/n)/n"
  ],
  [
    "GetSkillLineIndexWithTradeName [classic]",
    "\nDescription: Retrieves the index of a skill line with a specific trade name.",
    "undefined--@arg tradename: string, The name of the trade./n--@return: number The index of the skill line./nfunction/nBANETO_GetSkillLineIndexWithTradeName/n(/n)/n"
  ],
  [
    "GetSkillLineIndexWithItemId [classic|retail]",
    "\nDescription: Retrieves the index of a skill line with a specific item ID.",
    "undefined--@arg itemid: string, The ID of the item./n--@return: number The index of the skill line./nfunction/nBANETO_GetSkillLineIndexWithItemId/n(/n)/n"
  ],
  [
    "GetAcherusEtage [classic]",
    "\nDescription: Determines the current floor in Acherus.",
    "undefined--@return: number The current floor./nfunction/nBANETO_GetAcherusEtage/n(/n)/n"
  ],
  [
    "MoveAcherusEtage [classic]",
    "\nDescription: Moves between floors in Acherus.",
    "undefined--@arg upOrDown: string, Direction to move (\"up\" or \"down\")./n--@return: nil/nfunction/nBANETO_MoveAcherusEtage/n(/n)/n"
  ],
  [
    "Craft [classic|retail]",
    "\nDescription: Crafts an item with a specific index.",
    "undefined--@arg index: number, The index of the item to craft./n--@return: nil/nfunction/nBANETO_Craft/n(/n)/n"
  ],
  [
    "UseContainerItem [classic|retail]",
    "\nDescription: Uses an item from a bag.",
    "undefined--@arg i: bag Index/n--@arg z: slot/nfunction/nBANETO_UseContainerItem/n(/n,/n)/n"
  ],
  [
    "GetSpellCooldown [classic|retail]",
    "\nDescription: Get a spell's cooldown in seconds.",
    "undefined--@arg spellid: number/n--@return: duration/nfunction/nBANETO_GetSpellCooldown/n(/n)/n"
  ],
  [
    "StartPetAttackWarlock [classic]",
    "\nDescription: Instruct your Warlock pet to attack.",
    "undefinedfunction/nBANETO_StartPetAttackWarlock/n(/n)/n"
  ],
  [
    "StartPetAttack [classic]",
    "\nDescription: Instruct your pet to attack.",
    "undefinedfunction/nBANETO_StartPetAttack/n(/n)/n"
  ],
  [
    "DelayStateTick [classic|retail]",
    "\nDescription: Delay the next state tick by seconds.",
    "undefined--@arg seconds: number/nfunction/nBANETO_DelayStateTick/n(/n)/n"
  ],
  [
    "HunterStopShot [classic]",
    "\nDescription: Stop auto casting spells.",
    "undefined--@arg name: string: name of spell to stop/nfunction/nBANETO_HunterStopShot/n(/n)/n"
  ],
  [
    "GetBanetoProfileType [classic]",
    "\nDescription: Returns the type of the currently loaded profile.",
    "undefined--@return: string/nfunction/nGetBanetoProfileType/n(/n)/n"
  ],
  [
    "PrintPlugin [classic|retail]",
    "\nDescription: Print something to the chat frame denoting a plugin.",
    "undefined--@arg message: string/nfunction/nBANETO_PrintPlugin/n(/n)/n"
  ],
  [
    "GetSessionTime [classic|retail]",
    "\nDescription: Returns the number of seconds the bot has been loaded.",
    "undefined--@return: number/nfunction/nBANETO_GetSessionTime/n(/n)/n"
  ],
  [
    "reloadUi [classic|retail]",
    "\nDescription: Reload the UI.",
    "undefinedfunction/nreloadUi/n(/n)/n"
  ],
  [
    "LoadOfficialPaid [classic|retail]",
    "\nDescription: Load an official (paid) profile",
    "undefined--@arg packName: string/n--@arg profile: string/nfunction/nBANETO_LoadOfficialPaid/n(/n,/n)/n"
  ],
  [
    "GetPlayerCorpsePosition [classic|retail]",
    "\nDescription: Get the player's corpse position",
    "undefined--@return: x number the x coordinate of the player's corpse/nfunction/nBANETO_GetPlayerCorpsePosition/n(/n)/n"
  ],
  [
    "GetState [classic|retail]",
    "\nDescription: Returns the state the bot is currently in.",
    "undefined--@return: string/nfunction/nBANETO_GetState/n(/n)/n"
  ],
  [
    "IsFlyingAscendNeeded [classic|retail]",
    "\nDescription: Checks if ascending flight is required for the player's current position.",
    "undefined--@return: boolean: Returns true if ascending flight is needed, false otherwise./nfunction/nBANETO_IsFlyingAscendNeeded/n(/n)/n"
  ],
  [
    "GetZoneId [classic|retail]",
    "\nDescription: Return the zone's ID.",
    "undefined--@return: number/nfunction/nBANETO_GetZoneId/n(/n)/n"
  ],
  [
    "GetMapId [classic|retail]",
    "\nDescription: Return the map's ID.",
    "undefined--@return: ID number the map ID/nfunction/nBANETO_GetMapId/n(/n)/n"
  ],
  [
    "StopMovementWithoutDeletingPath [classic|retail]",
    "\nDescription: Stop movement but keep the path available.",
    "undefinedfunction/nBANETO_StopMovementWithoutDeletingPath/n(/n)/n"
  ],
  [
    "CanUseRepairBotInsideDungeon [classic]",
    "\nDescription: Check if the bot can use a repair bot inside a dungeon.",
    "undefined--@return: boolean/nfunction/nBANETO_CanUseRepairBotInsideDungeon/n(/n)/n"
  ],
  [
    "HasRepBotItem [classic]",
    "\nDescription: Check to see if the player has a repair bot item.",
    "undefined--@return: boolean/nfunction/nBANETO_HasRepBotItem/n(/n)/n"
  ],
  [
    "FindRepBot [classic]",
    "\nDescription: Finds the closest repair bot to the player",
    "undefined--@return: object/nfunction/nBANETO_FindRepBot/n(/n)/n"
  ],
  [
    "SetBanetoTarget [classic|retail]",
    "\nDescription: Set the BANETO_TARGET variable, anytime you change targets (@see UnlockedTargetUnit) you should call this function.",
    "undefined--@arg unit: string/nfunction/nBANETO_SetBanetoTarget/n(/n)/n"
  ],
  [
    "StopMovement [classic|retail]",
    "\nDescription: Stop all movement and clear path.",
    "undefinedfunction/nBANETO_StopMovement/n(/n)/n"
  ],
  [
    "LoadCustomTravelProfile [classic|retail]",
    "\nDescription: Load a custom travel profile",
    "undefined--@arg profileName: string/nfunction/nBANETO_LoadCustomTravelProfile/n(/n)/n"
  ],
  [
    "IsPackQuester [classic|retail]",
    "\nDescription: Is the packName a Quest pack.",
    "undefined--@arg packName: string/n--@return: boolean/nfunction/nBANETO_IsPackQuester/n(/n)/n"
  ],
  [
    "GetFirstProfileOfPack [classic|retail]",
    "\nDescription: Get the first profile of a given pack.",
    "undefined--@arg packName: string/n--@return: string/nfunction/nBANETO_GetFirstProfileOfPack/n(/n)/n"
  ],
  [
    "GetTarget [classic|retail]",
    "\nDescription: Return the current baneto internal target, do not confuse it with your wow target.",
    "undefined--@return: object/nfunction/nBANETO_GetTarget/n(/n)/n"
  ],
  [
    "IsPaidPackInstalled [classic|retail]",
    "\nDescription: Is a paid pack already installed?",
    "undefined--@arg packName: string/n--@return: boolean/nfunction/nBANETO_IsPaidPackInstalled/n(/n)/n"
  ],
  [
    "InstallPaidPack [classic|retail]",
    "\nDescription: Install a paid pack",
    "undefined--@arg packName: string/nfunction/nBANETO_InstallPaidPack/n(/n)/n"
  ],
  [
    "LoadTravelProfile [classic|retail]",
    "\nDescription: Load a predefined travel profile.",
    "undefined--@arg name: string/nfunction/nBANETO_LoadTravelProfile/n(/n)/n"
  ],
  [
    "GameObjectType [classic|retail]",
    "\nDescription: Get a gameObject's type",
    "undefined--@arg gameObject: GameObject/n--@return: number/nfunction/nBANETO_GameObjectType/n(/n)/n"
  ],
  [
    "LoadBgProfile [classic|retail]",
    "\nDescription: Load a battleground profile.",
    "undefined--@arg name: string/nfunction/nBANETO_LoadBgProfile/n(/n)/n"
  ],
  [
    "IsTrainStateRequired [classic|retail]",
    "\nDescription: Check if the character should visit a class trainer.",
    "undefined--@return: boolean/nfunction/nBANETO_IsTrainStateRequired/n(/n)/n"
  ],
  [
    "IsProfTrainStateRequired [classic|retail]",
    "\nDescription: Check if the character should visit a profession trainer.",
    "undefined--@return: boolean/nfunction/nBANETO_IsProfTrainStateRequired/n(/n)/n"
  ],
  [
    "AreWeDazed [classic|retail]",
    "\nDescription: Check if the character is dazed.",
    "undefined--@return: boolean/nfunction/nBANETO_AreWeDazed/n(/n)/n"
  ],
  [
    "IsReviveSecure [classic|retail]",
    "\nDescription: Check if it's safe to revive.",
    "undefined--@return: boolean/nfunction/nBANETO_IsReviveSecure/n(/n)/n"
  ],
  [
    "GetRandomPointOnCircleNEW [classic|retail]",
    "\nDescription: Get a random point on a specified circle",
    "undefined--@arg centerX: number/n--@arg centerY: number/n--@arg centerZ: number/n--@arg radius: number/n--@return: x number the x coordinate of the generated point/nfunction/nBANETO_GetRandomPointOnCircleNEW/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetRandomPointInCircleNEW [classic|retail]",
    "\nDescription: Get a random point in a specified circle",
    "undefined--@arg centerX: number/n--@arg centerY: number/n--@arg centerZ: number/n--@arg radius: number/n--@return: x number the x coordinate of the generated point/nfunction/nBANETO_GetRandomPointInCircleNEW/n(/n,/n,/n,/n)/n"
  ],
  [
    "DebugProfessionSkills [classic]",
    "\nDescription: Outputs debugging information related to the player's professions.",
    "undefinedfunction/nBANETO_DebugProfessionSkills/n(/n)/n"
  ],
  [
    "DistanceToProfileIsOkay [classic]",
    "\nDescription: Checks if the current player's distance to the set profile is within an acceptable range.",
    "undefined--@return: boolean: Returns true if the distance is acceptable, false otherwise./nfunction/nBANETO_DistanceToProfileIsOkay/n(/n)/n"
  ],
  [
    "StartStop [classic|retail]",
    "\nDescription: Toggle Baneto operation, starting or stopping as required.",
    "undefinedfunction/nBANETO_StartStop/n(/n)/n"
  ],
  [
    "GetCurrentCenterIndex [classic|retail]",
    "\nDescription: Get the index of the currently active spot in the profile.",
    "undefined--@return: number: The index of the current spot./nfunction/nBANETO_GetCurrentCenterIndex/n(/n)/n"
  ],
  [
    "Start [classic|retail]",
    "\nDescription: Start Baneto bot.",
    "undefinedfunction/nBANETO_Start/n(/n)/n"
  ],
  [
    "IsLastProfileATaskInTaskmanager [classic|retail]",
    "\nDescription: Check if the last loaded profile was part of a task in the task manager.",
    "undefined--@return: boolean: Returns true if the last profile was a task, false otherwise./nfunction/nBANETO_IsLastProfileATaskInTaskmanager/n(/n)/n"
  ],
  [
    "StartTaskmanager [classic|retail]",
    "\nDescription: Initiate task manager.",
    "undefinedfunction/nBANETO_StartTaskmanager/n(/n)/n"
  ],
  [
    "GetCurrentTaskmanagerProfile [classic|retail]",
    "\nDescription: Get the name of the currently active task manager profile.",
    "undefined--@return: string: The name of the current task manager profile./nfunction/nBANETO_GetCurrentTaskmanagerProfile/n(/n)/n"
  ],
  [
    "RemoveTaskByIndex [classic|retail]",
    "\nDescription: Remove a task from the task manager by its index.",
    "undefined--@arg index: number: The index of the task to be removed./nfunction/nBANETO_RemoveTaskByIndex/n(/n)/n"
  ],
  [
    "VisualizeTask [classic|retail]",
    "\nDescription: Visualize a task for a specified duration.",
    "undefined--@arg name: string: The name of the task to visualize./n--@arg duration: number: The duration for which to visualize the task (in seconds)./nfunction/nBANETO_VisualizeTask/n(/n,/n)/n"
  ],
  [
    "AddTask [classic|retail]",
    "\nDescription: Add a task to the task manager.",
    "undefined--@arg taskType: string: The type of the task./n--@arg taskDuration: number: The duration of the task (in seconds)./n--@arg fileName: string: The name of the task file./n--@arg isLocal: boolean: If true, the task file is local. If false, it's remote./nfunction/nBANETO_AddTask/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetCenterIndexInFlyingPath [classic|retail]",
    "\nDescription: Get the index of the center in the current flying path.",
    "undefined--@arg path: table: The flying path as an array of coordinates./n--@return: number: The index of the center in the flying path./nfunction/nBANETO_GetCenterIndexInFlyingPath/n(/n)/n"
  ],
  [
    "GetCenterIndexInPath [classic|retail]",
    "\nDescription: Get the index of the center in the current path.",
    "undefined--@arg path: table: The path as an array of coordinates./n--@return: number: The index of the center in the path./nfunction/nBANETO_GetCenterIndexInPath/n(/n)/n"
  ],
  [
    "GetCenterIndexForPath [classic|retail]",
    "\nDescription: Get the index of the center for the specified path type.",
    "undefined--@arg type: string: The type of path./n--@return: number: The index of the center for the specified path./nfunction/nBANETO_GetCenterIndexForPath/n(/n)/n"
  ],
  [
    "GetClosestPathIndex [classic|retail]",
    "\nDescription: Get the closest index of the path to the player's current position.",
    "undefined--@return: number: The closest index of the path./nfunction/nBANETO_GetClosestPathIndex/n(/n)/n"
  ],
  [
    "GetCenterIndexForGrinder [classic|retail]",
    "\nDescription: Get the index of the center for the current grinder.",
    "undefined--@return: number: The index of the center for the grinder./nfunction/nBANETO_GetCenterIndexForGrinder/n(/n)/n"
  ],
  [
    "FlyingPathDeleter [classic|retail]",
    "\nDescription: Delete the current flying path.",
    "undefinedfunction/nBANETO_FlyingPathDeleter/n(/n)/n"
  ],
  [
    "GroundPathDeleter [classic|retail]",
    "\nDescription: Delete the current ground path.",
    "undefinedfunction/nBANETO_GroundPathDeleter/n(/n)/n"
  ],
  [
    "TurnStop [classic|retail]",
    "\nDescription: Stop turning.",
    "undefinedfunction/nBANETO_TurnStop/n(/n)/n"
  ],
  [
    "ResetFlyingPath [classic]",
    "\nDescription: Reset the current flying path.",
    "undefinedfunction/nBANETO_ResetFlyingPath/n(/n)/n"
  ],
  [
    "Stop [classic|retail]",
    "\nDescription: Stop Baneto operation.",
    "undefinedfunction/nBANETO_Stop/n(/n)/n"
  ],
  [
    "GetWorstEnemyInBg [classic|retail]",
    "\nDescription: Get the favorable enemy in the battleground.",
    "undefined--@return: string: The name of the favorable enemy./nfunction/nBANETO_GetWorstEnemyInBg/n(/n)/n"
  ],
  [
    "GetBestFriendInBg [classic|retail]",
    "\nDescription: Get the most favorable friend in the battleground.",
    "undefined--@return: string: The name of the most favorable friend./nfunction/nBANETO_GetBestFriendInBg/n(/n)/n"
  ],
  [
    "IsLastProfileBattleground [classic|retail]",
    "\nDescription: Check if the last loaded profile was for a battleground.",
    "undefined--@return: boolean: Returns true if the last profile was for a battleground, false otherwise./nfunction/nBANETO_IsLastProfileBattleground/n(/n)/n"
  ],
  [
    "IsLastProfileDungeon [classic|retail]",
    "\nDescription: Check if the last loaded profile was for a dungeon.",
    "undefined--@return: boolean: Returns true if the last profile was for a dungeon, false otherwise./nfunction/nBANETO_IsLastProfileDungeon/n(/n)/n"
  ],
  [
    "IsLastProfileQuesting [classic|retail]",
    "\nDescription: Check if the last loaded profile was for questing.",
    "undefined--@return: boolean: Returns true if the last profile was for questing, false otherwise./nfunction/nBANETO_IsLastProfileQuesting/n(/n)/n"
  ],
  [
    "IsLastProfileEternal [classic|retail]",
    "\nDescription: Check if the last loaded profile was for an eternal event.",
    "undefined--@return: boolean: Returns true if the last profile was for an eternal event, false otherwise./nfunction/nBANETO_IsLastProfileEternal/n(/n)/n"
  ],
  [
    "IsLastProfileGathering [classic|retail]",
    "\nDescription: Check if the last loaded profile was for gathering.",
    "undefined--@return: boolean: Returns true if the last profile was for gathering, false otherwise./nfunction/nBANETO_IsLastProfileGathering/n(/n)/n"
  ],
  [
    "IsLastProfileTraveling [classic|retail]",
    "\nDescription: Check if the last loaded profile was for traveling.",
    "undefined--@return: boolean: Returns true if the last profile was for traveling, false otherwise./nfunction/nBANETO_IsLastProfileTraveling/n(/n)/n"
  ],
  [
    "IsLastProfileGold [classic|retail]",
    "\nDescription: Check if the last loaded profile was for gold farming.",
    "undefined--@return: boolean: Returns true if the last profile was for gold farming, false otherwise./nfunction/nBANETO_IsLastProfileGold/n(/n)/n"
  ],
  [
    "IsNearQuestSpots [classic]",
    "\nDescription: Check if the player is near quest spots.",
    "undefined--@return: boolean: Returns true if the player is near quest spots, false otherwise./nfunction/nBANETO_IsNearQuestSpots/n(/n)/n"
  ],
  [
    "GetLastProfile [classic|retail]",
    "\nDescription: Get the last loaded profile.",
    "undefined--@return: string: The name of the last loaded profile./nfunction/nBANETO_GetLastProfile/n(/n)/n"
  ],
  [
    "ReloadLastProfile [classic|retail]",
    "\nDescription: Reload the last loaded profile.",
    "undefinedfunction/nBANETO_ReloadLastProfile/n(/n)/n"
  ],
  [
    "ReloadAndStartLastProfile [classic|retail]",
    "\nDescription: Reload and start the last loaded profile.",
    "undefinedfunction/nBANETO_ReloadAndStartLastProfile/n(/n)/n"
  ],
  [
    "Customer [classic|retail]",
    "\nDescription: Return the Baneto username.",
    "undefined--@return: string: The username of the Baneto customer./nfunction/nBANETO_Customer/n(/n)/n"
  ],
  [
    "AddItemToNeverSell [classic|retail]",
    "\nDescription: Add an item to the list that should never be sold.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToNeverSell/n(/n)/n"
  ],
  [
    "IsItemInUsageList [classic|retail]",
    "\nDescription: Check if the specified item is in the usage list.",
    "undefined--@arg itemname: string: The name of the item./n--@return: boolean: Returns true if the item is in the usage list, false otherwise./nfunction/nBANETO_IsItemInUsageList/n(/n)/n"
  ],
  [
    "RemoveItemFromUsageList [classic|retail]",
    "\nDescription: Remove an item from the usage list.",
    "undefined--@arg itemname: string: The name of the item to be removed./nfunction/nBANETO_RemoveItemFromUsageList/n(/n)/n"
  ],
  [
    "VisualizeUsageList [classic|retail]",
    "\nDescription: Display the items in the usage list.",
    "undefinedfunction/nBANETO_VisualizeUsageList/n(/n)/n"
  ],
  [
    "AddItemToUsageList [classic|retail]",
    "\nDescription: Add an item to the usage list.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToUsageList/n(/n)/n"
  ],
  [
    "AddItemToDeleteList [classic|retail]",
    "\nDescription: Add an item to the list that should automatically be deleted.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToDeleteList/n(/n)/n"
  ],
  [
    "AddItemToNeverDisenchant [classic|retail]",
    "\nDescription: Add an item to the list that should never be disenchanted.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToNeverDisenchant/n(/n)/n"
  ],
  [
    "AddItemToAlwaysMail [classic|retail]",
    "\nDescription: Add an item to the list that should always be mailed.",
    "undefined--@arg itemname: string/nfunction/nBANETO_AddItemToAlwaysMail/n(/n)/n"
  ],
  [
    "AddItemToNeverMail [classic|retail]",
    "\nDescription: Add an item to the list that should never be mailed.",
    "undefined--@arg itemname: string/nfunction/nBANETO_AddItemToNeverMail/n(/n)/n"
  ],
  [
    "IsEntryInGlobalBlacklist [classic|retail]",
    "\nDescription: Checks whether an ID is in the global blacklist from the user's blacklist tab.",
    "undefined--@arg id: <value>/n--@return: boolean/nfunction/nBANETO_IsEntryInGlobalBlacklist/n(/n)/n"
  ],
  [
    "RemoveItemFromNeverSell [classic|retail]",
    "\nDescription: Remove an item from the list that should never be sold.",
    "undefined--@arg itemname: string/nfunction/nBANETO_RemoveItemFromNeverSell/n(/n)/n"
  ],
  [
    "RemoveItemFromDeleteList [classic|retail]",
    "\nDescription: Remove an item from the list that should be deleted.",
    "undefined--@arg itemname: string/nfunction/nBANETO_RemoveItemFromDeleteList/n(/n)/n"
  ],
  [
    "RemoveItemFromNeverDisenchant [classic|retail]",
    "\nDescription: Remove an item from the list that should never be disenchanted.",
    "undefined--@arg itemname: string/nfunction/nBANETO_RemoveItemFromNeverDisenchant/n(/n)/n"
  ],
  [
    "IsEntryInGlobalObjectlist [classic|retail]",
    "\nDescription: Check if an entry exists in the global object list.",
    "undefined--@arg id: number: The ID of the entry to be checked./n--@return: boolean: Returns true if the entry exists in the global object list, false otherwise./nfunction/nBANETO_IsEntryInGlobalObjectlist/n(/n)/n"
  ],
  [
    "VisualizeGlobalObjectList [classic|retail]",
    "\nDescription: Display the global object list.",
    "undefinedfunction/nBANETO_VisualizeGlobalObjectList/n(/n)/n"
  ],
  [
    "RemoveCustomObjectIDGlobal [classic|retail]",
    "\nDescription: Remove a custom object ID from the global list.",
    "undefined--@arg id: number: The ID of the object to be removed./nfunction/nBANETO_RemoveCustomObjectIDGlobal/n(/n)/n"
  ],
  [
    "DefineCustomObjectIDGlobal [classic|retail]",
    "\nDescription: Add a custom object ID to the global list.",
    "undefined--@arg id: number: The ID of the object to be added./nfunction/nBANETO_DefineCustomObjectIDGlobal/n(/n)/n"
  ],
  [
    "RemoveEntryFromGlobalMobIdBlacklist [classic|retail]",
    "\nDescription: Remove an entry from the global mob ID blocklist.",
    "undefined--@arg id: number: The ID of the mob to be removed from the blocklist./nfunction/nBANETO_RemoveEntryFromGlobalMobIdBlacklist/n(/n)/n"
  ],
  [
    "RemoveItemFromNeverMail [classic|retail]",
    "\nDescription: Remove an item from the list that should never be mailed.",
    "undefined--@arg itemname: string: The name of the item to be removed./nfunction/nBANETO_RemoveItemFromNeverMail/n(/n)/n"
  ],
  [
    "RemoveItemFromAlwaysMail [classic|retail]",
    "\nDescription: Remove an item from the list that should always be mailed.",
    "undefined--@arg itemname: string: The name of the item to be removed./nfunction/nBANETO_RemoveItemFromAlwaysMail/n(/n)/n"
  ],
  [
    "ClearUserList [classic|retail]",
    "\nDescription: Clear a user list.",
    "undefined--@arg listname: string: The name of the list to be cleared./n--@arg force: boolean: Whether to force clear the list./nfunction/nBANETO_ClearUserList/n(/n,/n)/n"
  ],
  [
    "VisualizeGlobalMobIdBlacklist [classic|retail]",
    "\nDescription: Display the global mob ID blacklist.",
    "undefinedfunction/nBANETO_VisualizeGlobalMobIdBlacklist/n(/n)/n"
  ],
  [
    "VisualizeDoNotSellList [classic|retail]",
    "\nDescription: Display the \"Do Not Sell\" list.",
    "undefinedfunction/nBANETO_VisualizeDoNotSellList/n(/n)/n"
  ],
  [
    "VisualizeDeleteList [classic|retail]",
    "\nDescription: Display the delete list.",
    "undefinedfunction/nBANETO_VisualizeDeleteList/n(/n)/n"
  ],
  [
    "VisualizeDoNotDisenchantList [classic|retail]",
    "\nDescription: Display the \"Do Not Disenchant\" list.",
    "undefinedfunction/nBANETO_VisualizeDoNotDisenchantList/n(/n)/n"
  ],
  [
    "VisualizeDoNotMailList [classic|retail]",
    "\nDescription: Display the \"Do Not Mail\" list.",
    "undefinedfunction/nBANETO_VisualizeDoNotMailList/n(/n)/n"
  ],
  [
    "VisualizeAlwaysMailList [classic|retail]",
    "\nDescription: Display the \"Always Mail\" list.",
    "undefinedfunction/nBANETO_VisualizeAlwaysMailList/n(/n)/n"
  ],
  [
    "SpellbookDebug [classic|retail]",
    "\nDescription: Output debugging information for the spellbook.",
    "undefinedfunction/nBANETO_SpellbookDebug/n(/n)/n"
  ],
  [
    "CastSpellOnGround [classic|retail]",
    "\nDescription: Cast a spell on the ground near a specified unit.",
    "undefined--@arg spellid: number: The ID of the spell to be cast./n--@arg unit: unit: The unit near which to cast the spell./nfunction/nBANETO_CastSpellOnGround/n(/n,/n)/n"
  ],
  [
    "IsSpellKnownNoSettingsCheck [classic]",
    "\nDescription: Check if a spell is known by the character without checking the settings.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is known, false otherwise./nfunction/nBANETO_IsSpellKnownNoSettingsCheck/n(/n)/n"
  ],
  [
    "IsSpellKnown [classic|retail]",
    "\nDescription: Check if a spell is known by the character.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is known, false otherwise./nfunction/nBANETO_IsSpellKnown/n(/n)/n"
  ],
  [
    "IsSpellUsableNoSettingsCheck [classic]",
    "\nDescription: Check if a spell is usable without checking the settings.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is usable, false otherwise./nfunction/nBANETO_IsSpellUsableNoSettingsCheck/n(/n)/n"
  ],
  [
    "BlockSpellTemp [classic]",
    "\nDescription: Temporarily block a spell.",
    "undefined--@arg spellid: number: The ID of the spell to be blocked./n--@arg seconds: number: The duration for which the spell should be blocked./nfunction/nBANETO_BlockSpellTemp/n(/n,/n)/n"
  ],
  [
    "IsSpellUsable [classic|retail]",
    "\nDescription: Check if a spell is usable.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is usable, false otherwise./nfunction/nBANETO_IsSpellUsable/n(/n)/n"
  ],
  [
    "CanIBuffThisUnit [classic]",
    "\nDescription: Check if a specified unit can be buffed by the player.",
    "undefined--@arg unit: unit: The unit to be checked./n--@return: boolean: Returns true if the unit can be buffed, false otherwise./nfunction/nBANETO_CanIBuffThisUnit/n(/n)/n"
  ],
  [
    "FriendNeedsBuffScanner [classic]",
    "\nDescription: Scans whether a friend character needs buffing",
    "undefined--@return: boolean/nfunction/nBANETO_FriendNeedsBuffScanner/n(/n)/n"
  ],
  [
    "IsFriendGettingAttackedDungeon [classic]",
    "\nDescription: Checks if a friend is being attacked within a dungeon",
    "undefined--@return: boolean/nfunction/nBANETO_IsFriendGettingAttackedDungeon/n(/n)/n"
  ],
  [
    "SelectFriendLowHpDungeon [classic]",
    "\nDescription: Selects a friend with low HP within a dungeon",
    "undefined--@return: boolean/nfunction/nBANETO_SelectFriendLowHpDungeon/n(/n)/n"
  ],
  [
    "PlayerHasMana [classic]",
    "\nDescription: Checks if the player has sufficient mana",
    "undefined--@return: boolean/nfunction/nBANETO_PlayerHasMana/n(/n)/n"
  ],
  [
    "IsPlayerRooted [classic|retail]",
    "\nDescription: Checks if the player is rooted or unable to move",
    "undefined--@return: boolean/nfunction/nBANETO_IsPlayerRooted/n(/n)/n"
  ],
  [
    "UbrsThrowPull [classic]",
    "\nDescription: Initiates a ranged pull in UBRS at the specified coordinates within a certain radius",
    "undefined--@arg x: number/n--@arg y: number/n--@arg z: number/n--@arg radius: number/nfunction/nBANETO_UbrsThrowPull/n(/n,/n,/n,/n)/n"
  ],
  [
    "RangePullThrow [classic]",
    "\nDescription: Initiates a ranged pull throw",
    "undefinedfunction/nBANETO_RangePullThrow/n(/n)/n"
  ],
  [
    "NumAvailableRunesDk [classic|retail]",
    "\nDescription: Returns the number of available runes of a specific type for a Death Knight",
    "undefined--@arg runeType: string/n--@return: number/nfunction/nBANETO_NumAvailableRunesDk/n(/n)/n"
  ],
  [
    "GetCombatRange [classic|retail]",
    "\nDescription: Returns the combat range of the player",
    "undefined--@return: number/nfunction/nBANETO_GetCombatRange/n(/n)/n"
  ],
  [
    "ClearGuidBlacklist [classic|retail]",
    "\nDescription: Clears the GUID blacklist",
    "undefinedfunction/nBANETO_ClearGuidBlacklist/n(/n)/n"
  ],
  [
    "ClearGuidEngagedlist [classic|retail]",
    "\nDescription: Clears the GUID engaged list",
    "undefinedfunction/nBANETO_ClearGuidEngagedlist/n(/n)/n"
  ],
  [
    "AddMobToGuidBlacklist [classic|retail]",
    "\nDescription: Adds the specified unit to the GUID blacklist",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToGuidBlacklist/n(/n)/n"
  ],
  [
    "AddMobToPolymorphList [classic|retail]",
    "\nDescription: Adds the specified unit to the list of mobs to be polymorphed",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToPolymorphList/n(/n)/n"
  ],
  [
    "AddMobToPriestPainedList [classic|retail]",
    "\nDescription: Adds the specified unit to a list of pained units for a priest",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToPriestPainedList/n(/n)/n"
  ],
  [
    "AddMobToGuidGatheredList [classic|retail]",
    "\nDescription: Adds the specified unit to the GUID gathered list",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToGuidGatheredList/n(/n)/n"
  ],
  [
    "IsGuidContainedInGuidGatherlist [classic|retail]",
    "\nDescription: Checks if a GUID is in the gathered list",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInGuidGatherlist/n(/n)/n"
  ],
  [
    "DeleteEntryInGuidBlacklist [classic|retail]",
    "\nDescription: Deletes an entry in the GUID blacklist using the provided GUID",
    "undefined--@arg guid: string/nfunction/nBANETO_DeleteEntryInGuidBlacklist/n(/n)/n"
  ],
  [
    "IsGuidContainedInGuidBlacklist [classic|retail]",
    "\nDescription: Checks if a GUID is in the GUID blacklist",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInGuidBlacklist/n(/n)/n"
  ],
  [
    "IsGuidContainedInEngagedList [classic|retail]",
    "\nDescription: Checks if a GUID is in the engaged list",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInEngagedList/n(/n)/n"
  ],
  [
    "IsMobContainedInPolymorphedList [classic|retail]",
    "\nDescription: Checks if a mob is in the polymorphed list using its GUID",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsMobContainedInPolymorphedList/n(/n)/n"
  ],
  [
    "IsGuidContainedInPainedList [classic|retail]",
    "\nDescription: Checks if a GUID is in the pained list",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInPainedList/n(/n)/n"
  ],
  [
    "SetActiveCenterIndexDungeon [classic]",
    "\nDescription: Sets the active center index for a dungeon",
    "undefined--@arg arg: number/nfunction/nBANETO_SetActiveCenterIndexDungeon/n(/n)/n"
  ],
  [
    "GetActiveCenterIndexDungeon [classic]",
    "\nDescription: Gets the active center index for a dungeon",
    "undefined--@return: number/nfunction/nBANETO_GetActiveCenterIndexDungeon/n(/n)/n"
  ],
  [
    "GetActiveCenterIndex [classic|retail]",
    "\nDescription: Gets the active center index",
    "undefined--@return: number/nfunction/nBANETO_GetActiveCenterIndex/n(/n)/n"
  ],
  [
    "HasKeyInKeyRing [classic]",
    "\nDescription: Checks if a key exists in the keyring using its item ID",
    "undefined--@arg itemid: number/n--@return: boolean/nfunction/nBANETO_HasKeyInKeyRing/n(/n)/n"
  ],
  [
    "DeleteItemInKeyRing [classic]",
    "\nDescription: Deletes an item in the keyring using its item ID",
    "undefined--@arg itemid: number/nfunction/nBANETO_DeleteItemInKeyRing/n(/n)/n"
  ],
  [
    "DeleteItem [classic|retail]",
    "\nDescription: Deletes an item using its item ID",
    "undefined--@arg itemid: number/nfunction/nBANETO_DeleteItem/n(/n)/n"
  ],
  [
    "CustomUsageItems [classic|retail]",
    "\nDescription: Handles custom item usage",
    "undefinedfunction/nBANETO_CustomUsageItems/n(/n)/n"
  ],
  [
    "GetItemCooldown [classic|retail]",
    "\nDescription: Gets the cooldown of an item using its index",
    "undefined--@arg i: number/n--@return: number/nfunction/nGetItemCooldown/n(/n)/n"
  ],
  [
    "GetContainerItemLink [classic|retail]",
    "\nDescription: Gets the item link of an item in a container using the container and item indices",
    "undefined--@arg i: number/n--@arg z: number/n--@return: string/nfunction/nGetContainerItemLink/n(/n,/n)/n"
  ],
  [
    "GetContainerNumSlots [classic|retail]",
    "\nDescription: Gets the number of slots in a container using its index",
    "undefined--@arg i: number/n--@return: number/nfunction/nGetContainerNumSlots/n(/n)/n"
  ],
  [
    "GetContainerItemID [classic|retail]",
    "\nDescription: Gets the item ID of an item in a container using the container and item indices",
    "undefined--@arg i: number/n--@arg z: number/n--@return: number/nfunction/nGetContainerItemID/n(/n,/n)/n"
  ],
  [
    "GetContainerNumFreeSlots [classic|retail]",
    "\nDescription: Gets the number of free slots in a container using its index",
    "undefined--@arg i: number/n--@return: number/nfunction/nGetContainerNumFreeSlots/n(/n)/n"
  ],
  [
    "GetContainerItemInfo [classic|retail]",
    "\nDescription: Gets information about an item in a container using the container and item indices",
    "undefined--@arg i: number/n--@arg z: number/n--@return: table/nfunction/nGetContainerItemInfo/n(/n,/n)/n"
  ],
  [
    "DeleteCursorItem [classic|retail]",
    "\nDescription: Deletes the item currently on the cursor",
    "undefinedfunction/nBANETO_DeleteCursorItem/n(/n)/n"
  ],
  [
    "DeleteItems [classic|retail]",
    "\nDescription: Deletes items based on predefined rules",
    "undefinedfunction/nBANETO_DeleteItems/n(/n)/n"
  ],
  [
    "SetSettingString [classic|retail]",
    "\nDescription: Sets a setting string to a specific value. Can be found in player settings .lua file in settings folders.",
    "undefined--@arg settingname: string/n--@arg value: string/nfunction/nBANETO_SetSettingString/n(/n,/n)/n"
  ],
  [
    "IsSomeoneTargetingUs [classic|retail]",
    "\nDescription: Checks if the player is being targeted by someone",
    "undefined--@return: boolean/nfunction/nBANETO_IsSomeoneTargetingUs/n(/n)/n"
  ],
  [
    "SecondsUntilWowClose [classic|retail]",
    "\nDescription: Gets the time in seconds until the WoW client is closed",
    "undefined--@return: number/nfunction/nBANETO_SecondsUntilWowClose/n(/n)/n"
  ],
  [
    "IsFullyLoaded [classic|retail]",
    "\nDescription: Checks if the WoW client is fully loaded",
    "undefined--@return: boolean/nfunction/nBANETO_IsFullyLoaded/n(/n)/n"
  ],
  [
    "SetSettingBool [classic|retail]",
    "\nDescription: Sets a setting boolean to a specific value",
    "undefined--@arg settingname: string/n--@arg value: boolean/nfunction/nBANETO_SetSettingBool/n(/n,/n)/n"
  ],
  [
    "IsFaultySkinMob [classic]",
    "\nDescription: Checks if the mob is actually a gather mob instead of skinnable.",
    "undefined--@arg mobid: object/n--@return: boolean/nfunction/nBANETO_IsFaultySkinMob/n(/n)/n"
  ],
  [
    "PestilenceCheck [classic]",
    "\nDescription: Checks if Pestilence is active.",
    "undefined--@return: boolean/nfunction/nBANETO_PestilenceCheck/n(/n)/n"
  ],
  [
    "GetQuestStepProgression [classic|retail]",
    "\nDescription: Gets the progression of a specific step of a quest.",
    "undefined--@arg questId: number/n--@arg step: number/n--@return: progression/nfunction/nBANETO_GetQuestStepProgression/n(/n,/n)/n"
  ],
  [
    "FindClosestBatlemaster [classic]",
    "\nDescription: Finds the closest battle master.",
    "undefined--@arg isMultiQueue: boolean/n--@return: batlemaster/nfunction/nBANETO_FindClosestBatlemaster/n(/n)/n"
  ],
  [
    "MillOrProspect [classic]",
    "\nDescription: Mills or prospects an item.",
    "undefined--@arg whichOne: string/n--@arg item: string/n--@return: void/nfunction/nBANETO_MillOrProspect/n(/n,/n)/n"
  ],
  [
    "IsProspectingItem [classic]",
    "\nDescription: Checks if an item is prospectable.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsProspectingItem/n(/n)/n"
  ],
  [
    "IsMillingItem [classic]",
    "\nDescription: Checks if an item is millable.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsMillingItem/n(/n)/n"
  ],
  [
    "IsMillOrProspectItemBlacklisted [classic]",
    "\nDescription: Checks if an item is blacklisted for milling or prospecting.",
    "undefined--@arg itemid: number/n--@return: boolean/nfunction/nBANETO_IsMillOrProspectItemBlacklisted/n(/n)/n"
  ],
  [
    "CanMillOrProspect [classic]",
    "\nDescription: Checks if the current state allows milling or prospecting.",
    "undefined--@return: boolean/nfunction/nBANETO_CanMillOrProspect/n(/n)/n"
  ],
  [
    "IsCraftingStateNeeded [classic]",
    "\nDescription: Checks if crafting state is needed.",
    "undefined--@return: boolean/nfunction/nBANETO_IsCraftingStateNeeded/n(/n)/n"
  ],
  [
    "IsMovementSlowedByDebuff [classic]",
    "\nDescription: Checks if movement is slowed by debuff.",
    "undefined--@return: boolean/nfunction/nBANETO_IsMovementSlowedByDebuff/n(/n)/n"
  ],
  [
    "LoadSettings [classic|retail]",
    "\nDescription: Loads settings.",
    "undefined--@return: void/nfunction/nBANETO_LoadSettings/n(/n)/n"
  ],
  [
    "DefineMailRecipient [classic|retail]",
    "\nDescription: Defines the recipient of a mail.",
    "undefined--@arg name: string/n--@return: void/nfunction/nBANETO_DefineMailRecipient/n(/n)/n"
  ],
  [
    "GetMailRecipient [classic|retail]",
    "\nDescription: Gets the mail recipient.",
    "undefined--@return: string/nfunction/nBANETO_GetMailRecipient/n(/n)/n"
  ],
  [
    "LoadDungeonProfileFromBackend [classic]",
    "\nDescription: Loads a Dungeon profile from backend.",
    "undefined--@arg profilename: string/n--@return: void/nfunction/nBANETO_LoadDungeonProfileFromBackend/n(/n)/n"
  ],
  [
    "ExecuteCustomDungeonPulse [classic]",
    "\nDescription: Executes custom Dungeon pulse.",
    "undefined--@return: void/nfunction/nBANETO_ExecuteCustomDungeonPulse/n(/n)/n"
  ],
  [
    "ExportItemDeletionList [classic]",
    "\nDescription: Exports the list of items to be deleted.",
    "undefined--@return: table/nfunction/nBANETO_ExportItemDeletionList/n(/n)/n"
  ],
  [
    "ExportSellingBlacklists [classic]",
    "\nDescription: Exports the blacklists for selling items.",
    "undefined--@return: table/nfunction/nBANETO_ExportSellingBlacklists/n(/n)/n"
  ],
  [
    "ExportIdBlacklists [classic]",
    "\nDescription: Exports the blacklists of item IDs.",
    "undefined--@return: table/nfunction/nBANETO_ExportIdBlacklists/n(/n)/n"
  ],
  [
    "ExportCustomWorldObjects [classic|retail]",
    "\nDescription: Exports the list of custom World Objects.",
    "undefined--@return: table/nfunction/nBANETO_ExportCustomWorldObjects/n(/n)/n"
  ],
  [
    "ExportNeverMailList [classic|retail]",
    "\nDescription: Exports the list of items never to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ExportNeverMailList/n(/n)/n"
  ],
  [
    "ExportAlwaysMailList [classic|retail]",
    "\nDescription: Exports the list of items always to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ExportAlwaysMailList/n(/n)/n"
  ],
  [
    "ExportNeverDisenchant [classic|retail]",
    "\nDescription: Exports the list of items never to be disenchanted.",
    "undefined--@return: table/nfunction/nBANETO_ExportNeverDisenchant/n(/n)/n"
  ],
  [
    "ExportUsageItems [classic|retail]",
    "\nDescription: Exports the list of items for usage.",
    "undefined--@return: table/nfunction/nBANETO_ExportUsageItems/n(/n)/n"
  ],
  [
    "ExportGuildbankItems [classic|retail]",
    "\nDescription: Exports the list of items for the guild bank.",
    "undefined--@return: table/nfunction/nBANETO_ExportGuildbankItems/n(/n)/n"
  ],
  [
    "ExportAreaBlacklists [classic|retail]",
    "\nDescription: Exports the blacklist of areas.",
    "undefined--@return: table/nfunction/nBANETO_ExportAreaBlacklists/n(/n)/n"
  ],
  [
    "ExportTravelpoints [classic|retail]",
    "\nDescription: Exports the list of travel points.",
    "undefined--@return: table/nfunction/nBANETO_ExportTravelpoints/n(/n)/n"
  ],
  [
    "ImportItemDeletionList [classic]",
    "\nDescription: Imports the list of items to be deleted.",
    "undefined--@return: table/nfunction/nBANETO_ImportItemDeletionList/n(/n)/n"
  ],
  [
    "ImportSellingBlacklists [classic|retail]",
    "\nDescription: Imports the blacklists for selling items.",
    "undefined--@return: table/nfunction/nBANETO_ImportSellingBlacklists/n(/n)/n"
  ],
  [
    "ExportUnstuckRoutes [classic|retail]",
    "\nDescription: Exports the unstuck routes.",
    "undefined--@return: table/nfunction/nBANETO_ExportUnstuckRoutes/n(/n)/n"
  ],
  [
    "ImportUnstuckRoutes [classic|retail]",
    "\nDescription: Imports the unstuck routes.",
    "undefined--@return: table/nfunction/nBANETO_ImportUnstuckRoutes/n(/n)/n"
  ],
  [
    "ImportUnstuckRoute [classic|retail]",
    "\nDescription: Imports an unstuck route with specified coordinates and trigger radius.",
    "undefined--@arg index: number/n--@arg x: number/n--@arg y: number/n--@arg z: number/n--@arg radiusTrigger: number/n--@return: void/nfunction/nBANETO_ImportUnstuckRoute/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "ImportIdBlacklists [classic|retail]",
    "\nDescription: Imports the blacklists of item IDs.",
    "undefined--@return: table/nfunction/nBANETO_ImportIdBlacklists/n(/n)/n"
  ],
  [
    "ImportAreaBlacklists [classic|retail]",
    "\nDescription: Imports the blacklist of areas.",
    "undefined--@return: table/nfunction/nBANETO_ImportAreaBlacklists/n(/n)/n"
  ],
  [
    "ImportTravelpoints [classic|retail]",
    "\nDescription: Imports the list of travel points.",
    "undefined--@return: table/nfunction/nBANETO_ImportTravelpoints/n(/n)/n"
  ],
  [
    "ImportCustomWorldObjects [classic|retail]",
    "\nDescription: Imports the list of custom World Objects.",
    "undefined--@return: table/nfunction/nBANETO_ImportCustomWorldObjects/n(/n)/n"
  ],
  [
    "ImportNeverMail [classic|retail]",
    "\nDescription: Imports the list of items never to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ImportNeverMail/n(/n)/n"
  ],
  [
    "ImportAlwaysMail [classic|retail]",
    "\nDescription: Imports the list of items always to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ImportAlwaysMail/n(/n)/n"
  ],
  [
    "ImportNeverDisenchant [classic|retail]",
    "\nDescription: Imports the list of items never to be disenchanted.",
    "undefined--@return: table/nfunction/nBANETO_ImportNeverDisenchant/n(/n)/n"
  ],
  [
    "ImportUsageItems [classic|retail]",
    "\nDescription: Imports the list of items for usage.",
    "undefined--@return: table/nfunction/nBANETO_ImportUsageItems/n(/n)/n"
  ],
  [
    "ImportGuilbankItems [classic|retail]",
    "\nDescription: Imports the list of items for the guild bank.",
    "undefined--@return: table/nfunction/nBANETO_ImportGuilbankItems/n(/n)/n"
  ],
  [
    "SCAN_FISHINGSWARMS [classic|retail]",
    "\nDescription: Scans for fishing swarms.",
    "undefined--@return: void/nfunction/nBANETO_SCAN_FISHINGSWARMS/n(/n)/n"
  ],
  [
    "GetCountGatherNode [classic|retail]",
    "\nDescription: Returns the count of gathered nodes.",
    "undefined--@return: number/nfunction/nBANETO_GetCountGatherNode/n(/n)/n"
  ],
  [
    "MissionControlInvString [classic|retail]",
    "\nDescription: Returns the inventory string from the Mission Control.",
    "undefined--@return: string/nfunction/nBANETO_MissionControlInvString/n(/n)/n"
  ],
  [
    "SendChatMessage [classic|retail]",
    "\nDescription: Sends a chat message through a specified channel in a certain language to a particular recipient.",
    "undefined--@arg chatmessage: string _ The message to send./n--@arg channel: string _ The chat channel to send the message to./n--@arg language: string _ The language in which to send the message./n--@arg recipient: string _ The recipient of the message./n--@return: None/nfunction/nBANETO_SendChatMessage/n(/n,/n,/n,/n)/n"
  ],
  [
    "McAction [classic|retail]",
    "\nDescription: Executes an action with the given argument in the game's mission control.",
    "undefined--@arg action: string _ The action to execute./n--@arg actionArg: string _ The argument for the action./n--@return: None/nfunction/nBANETO_McAction/n(/n,/n)/n"
  ],
  [
    "AddRecipientToFl [classic|retail]",
    "\nDescription: Adds a recipient to a friend list.",
    "undefined--@return: None/nfunction/nBANETO_AddRecipientToFl/n(/n)/n"
  ],
  [
    "FindBestSwarmLanding [classic|retail]",
    "\nDescription: Finds the best landing spot within the given swarm.",
    "undefined--@arg swarm: table _ The swarm to search./n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_FindBestSwarmLanding/n(/n)/n"
  ],
  [
    "IsFishingSwarm [classic|retail]",
    "\nDescription: Checks if the given ID corresponds to a fishing swarm.",
    "undefined--@arg id: number _ The ID to check./n--@return: boolean _ Whether the ID corresponds to a fishing swarm./nfunction/nBANETO_IsFishingSwarm/n(/n)/n"
  ],
  [
    "CheckNinjaGather [classic]",
    "\nDescription: Checks if a ninja gather attempt should be made.",
    "undefined--@return: boolean _ Whether a ninja gather should be attempted./nfunction/nBANETO_CheckNinjaGather/n(/n)/n"
  ],
  [
    "UnitCastingInfo [classic|retail]",
    "\nDescription: Retrieves information about a unit's casting status.",
    "undefined--@arg unit: string _ The unit or object/n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_UnitCastingInfo/n(/n)/n"
  ],
  [
    "UnitChannelInfo [classic|retail]",
    "\nDescription: Retrieves information about a unit's channeling status.",
    "undefined--@arg unit: string _ The unit or object/n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_UnitChannelInfo/n(/n)/n"
  ],
  [
    "DefineMailbox [classic]",
    "\nDescription: Defines a mailbox.",
    "undefined--@return: None/nfunction/nBANETO_DefineMailbox/n(/n)/n"
  ],
  [
    "SettingsCorrupted [classic|retail]",
    "\nDescription: Checks if the settings are corrupted.",
    "undefined--@return: boolean _ Whether the settings are corrupted./nfunction/nBANETO_SettingsCorrupted/n(/n)/n"
  ],
  [
    "CreateLfgListing [classic|retail]",
    "\nDescription: Creates an LFG listing with the given parameters.",
    "undefined--@arg activityID: number _ The ID of the activity./n--@arg itemLevel: number _ The minimum required item level./n--@arg honorLevel: number _ The minimum required honor level./n--@arg autoAccept: boolean _ Whether to automatically accept join requests./n--@arg privateGroup: boolean _ Whether the group is private./n--@arg questID: number _ The ID of the quest associated with the group./n--@return: None/nfunction/nBANETO_CreateLfgListing/n(/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "GetSetting [classic|retail]",
    "\nDescription: Retrieves a setting's value from the character's config file.",
    "undefined--@arg settingname: string _ The name of the setting to retrieve./n--@return: Unknown _ The value of the setting./nfunction/nBANETO_GetSetting/n(/n)/n"
  ],
  [
    "CacheSettings [classic|retail]",
    "\nDescription: Caches settings to a specified path.",
    "undefined--@arg path: string _ The path to cache the settings to./n--@arg string: string _ The settings to cache./n--@arg append: boolean _ Whether to append the settings or overwrite existing ones./n--@return: None/nfunction/nBANETO_CacheSettings/n(/n,/n,/n)/n"
  ],
  [
    "IsInsideNode [classic|retail]",
    "\nDescription: Checks if an object is inside a node.",
    "undefined--@arg object: string _ The ID of the object to check./n--@return: boolean _ Whether the object is inside a node./nfunction/nBANETO_IsInsideNode/n(/n)/n"
  ],
  [
    "SaveSettings [classic|retail]",
    "\nDescription: Saves the settings.",
    "undefined--@return: None/nfunction/nBANETO_SaveSettings/n(/n)/n"
  ],
  [
    "IsFightBlockedByQuester [classic|retail]",
    "\nDescription: Checks if a fight is blocked by a quester.",
    "undefined--@return: boolean _ Whether the fight is blocked./nfunction/nBANETO_IsFightBlockedByQuester/n(/n)/n"
  ],
  [
    "IsFleeNeeded [classic|retail]",
    "\nDescription: Checks if the character needs to flee.",
    "undefined--@return: boolean _ Whether the character needs to flee./nfunction/nBANETO_IsFleeNeeded/n(/n)/n"
  ],
  [
    "DkPvpBurst [classic]",
    "\nDescription: Executes a burst of PvP actions for a Death Knight.",
    "undefined--@return: None/nfunction/nDkPvpBurst/n(/n)/n"
  ],
  [
    "CastSpell [classic|retail]",
    "\nDescription: Casts a spell with the given ID, with the option to cast it while moving and on a specific target.",
    "undefined--@arg spellid: number _ The ID of the spell to cast./n--@arg canMove: boolean _ Whether the spell can be cast while moving./n--@arg target: string _ The ID of the target to cast the spell on./n--@return: None/nfunction/nBANETO_CastSpell/n(/n,/n,/n)/n"
  ],
  [
    "SurviveSpellsCast [classic|retail]",
    "\nDescription: Casts survival spells.",
    "undefined--@return: None/nfunction/nBANETO_SurviveSpellsCast/n(/n)/n"
  ],
  [
    "SurviveSpellsAllowed [classic|retail]",
    "\nDescription: Checks if survival spells are allowed.",
    "undefined--@return: boolean _ Whether survival spells are allowed./nfunction/nBANETO_SurviveSpellsAllowed/n(/n)/n"
  ],
  [
    "FishingLogic [classic]",
    "\nDescription: Executes the fishing logic.",
    "undefined--@return: None/nfunction/nBANETO_FishingLogic/n(/n)/n"
  ],
  [
    "DefineAllowSwarmFishing [classic]",
    "\nDescription: Defines whether swarm fishing is allowed.",
    "undefined--@arg bool: boolean _ Whether swarm fishing is allowed./n--@return: None/nfunction/nBANETO_DefineAllowSwarmFishing/n(/n)/n"
  ],
  [
    "DefineFishingSwarm [classic]",
    "\nDescription: Defines a fishing swarm.",
    "undefined--@arg id: number _ The ID of the swarm./n--@return: None/nfunction/nBANETO_DefineFishingSwarm/n(/n)/n"
  ],
  [
    "LoadFishy [classic|retail]",
    "\nDescription: Loads the fishing functionality for the given type of fish.",
    "undefined--@arg typeFish: string _ The type of fish to fish./n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_LoadFishy/n(/n)/n"
  ],
  [
    "IsStateBlockedDueToSlaveBusy [classic]",
    "\nDescription: Checks whether the current state is blocked due to the \"slave\" character being busy.",
    "undefined--@return: boolean _ Whether the current state is blocked./nfunction/nBANETO_IsStateBlockedDueToSlaveBusy/n(/n)/n"
  ],
  [
    "Interact [classic|retail]",
    "\nDescription: Interacts with the given unit.",
    "undefined--@arg unit: string _ The ID of the unit to interact with./n--@return: None/nfunction/nBANETO_Interact/n(/n)/n"
  ],
  [
    "InteractNoDelay [classic|retail]",
    "\nDescription: Interacts with the given unit, without any delay.",
    "undefined--@arg unit: string _ The ID of the unit to interact with./n--@return: None/nfunction/nBANETO_InteractNoDelay/n(/n)/n"
  ],
  [
    "WMB_BobberCheck [classic|retail]",
    "\nDescription: Checks whether the given object is a bobber.",
    "undefined--@arg object: string _ The ID of the object to check./n--@return: boolean _ Whether the object is a bobber./nfunction/nBANETO_WMB_BobberCheck/n(/n)/n"
  ],
  [
    "SlopeJumper [classic|retail]",
    "\nDescription: Activates the slope jumping feature.",
    "undefined--@return: None/nfunction/nBANETO_SlopeJumper/n(/n)/n"
  ],
  [
    "GetObjctsTkr [classic|retail]",
    "\nDescription: Retrieves the objects tracker.",
    "undefined--@return: table of objects/nfunction/nBANETO_GetObjctsTkr/n(/n)/n"
  ],
  [
    "InteractWithBobber [classic|retail]",
    "\nDescription: Interacts with the bobber.",
    "undefined--@return: None/nfunction/nBANETO_InteractWithBobber/n(/n)/n"
  ],
  [
    "GetBobberPosition [classic|retail]",
    "\nDescription: Retrieves the position of the bobber.",
    "undefined--@return: table _ The position of the bobber (x, y, z)./nfunction/nBANETO_GetBobberPosition/n(/n)/n"
  ],
  [
    "GetBobberState [classic|retail]",
    "\nDescription: Retrieves the state of the bobber.",
    "undefined--@return: true if its splashing, false if its not ready yet/nfunction/nBANETO_GetBobberState/n(/n)/n"
  ],
  [
    "AttemptCombatLooting [classic|retail]",
    "\nDescription: Attempts to loot during combat.",
    "undefined--@return: None/nfunction/nBANETO_AttemptCombatLooting/n(/n)/n"
  ],
  [
    "SetSettingInt [classic|retail]",
    "\nDescription: Sets a setting boolean to a specific value. Can be found in player settings .lua file in settings folders.",
    "undefined--@arg settingname: string _ The name of the setting./n--@arg value: number _ The new value for the setting./n--@return: None/nfunction/nBANETO_SetSettingInt/n(/n,/n)/n"
  ],
  [
    "CancelBuffIceBlock [classic]",
    "\nDescription: Cancels the Ice Block buff.",
    "undefined--@return: None/nfunction/nCancelBuffIceBlock/n(/n)/n"
  ],
  [
    "StartCancelAllBuffs [classic]",
    "\nDescription: Starts the process of canceling all buffs.",
    "undefined--@return: None/nfunction/nStartCancelAllBuffs/n(/n)/n"
  ],
  [
    "CancelBuff [classic]",
    "\nDescription: Cancels a buff with the given ID.",
    "undefined--@arg id: number _ The ID of the buff to cancel./n--@return: None/nfunction/nCancelBuff/n(/n)/n"
  ],
  [
    "DisableMeshCheckNn [classic|retail]",
    "\nDescription: Disables the check for mesh (navigation mesh).",
    "undefined--@return: None/nfunction/nBANETO_DisableMeshCheckNn/n(/n)/n"
  ],
  [
    "CheckMeshNn [classic]",
    "\nDescription: Checks the mesh (navigation mesh).",
    "undefined--@return: boolean _ Whether the check was successful./nfunction/nBANETO_CheckMeshNn/n(/n)/n"
  ],
  [
    "UsePoison [classic|retail]",
    "\nDescription: Uses a poison with the given ID.",
    "undefined--@arg itemid: number _ The ID of the poison to use./n--@return: None/nfunction/nBANETO_UsePoison/n(/n)/n"
  ],
  [
    "UsePetFeedItem [classic|retail]",
    "\nDescription: Uses a pet feed item.",
    "undefined--@return: None/nfunction/nBANETO_UsePetFeedItem/n(/n)/n"
  ],
  [
    "GetTargetId [classic|retail]",
    "\nDescription: Retrieves the ID of the current target.",
    "undefined--@return: string _ The ID of the current target./nfunction/nBANETO_GetTargetId/n(/n)/n"
  ],
  [
    "ObjectCreator [classic|retail]",
    "\nDescription: Returns the creator or summoner of the object",
    "undefined--@arg obj: string _ The object to check who summoned it./n--@return: object or nil/nfunction/nBANETO_ObjectCreator/n(/n)/n"
  ],
  [
    "IsPetLuabox [classic|retail]",
    "\nDescription: Checks whether the given unit ID corresponds to a pet.",
    "undefined--@arg unitId: object/n--@return: boolean _ Whether the unit is a pet./nfunction/nBANETO_IsPetLuabox/n(/n)/n"
  ],
  [
    "MageConeAngleCheck [classic]",
    "\nDescription: Performs a check related to the cone angle for a mage character.",
    "undefined--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_MageConeAngleCheck/n(/n)/n"
  ],
  [
    "HasPetFeedItem [classic|retail]",
    "\nDescription: Checks whether the character's pet has a feed item.",
    "undefined--@return: boolean _ Whether the pet has a feed item./nfunction/nBANETO_HasPetFeedItem/n(/n)/n"
  ],
  [
    "HideInterface [classic|retail]",
    "\nDescription: Hides the game interface.",
    "undefined--@return: None/nfunction/nBANETO_HideInterface/n(/n)/n"
  ],
  [
    "ShowInterface [classic|retail]",
    "\nDescription: Shows the game interface.",
    "undefined--@return: None/nfunction/nBANETO_ShowInterface/n(/n)/n"
  ],
  [
    "UseItem [classic|retail]",
    "\nDescription: Uses an item, with an optional dismount.",
    "undefined--@arg itemid: number _ The ID of the item to use./n--@arg needsdismount: boolean _ Whether to dismount before using the item./n--@return: None/nfunction/nBANETO_UseItem/n(/n,/n)/n"
  ],
  [
    "GetProfessionSkill [classic|retail]",
    "\nDescription: Gets the skill level of a given profession.",
    "undefined--@arg name: string _ The name of the profession to check./n--@return: number _ The skill level of the profession./nfunction/nBANETO_GetProfessionSkill/n(/n)/n"
  ],
  [
    "FindFlyMountInBags [classic]",
    "\nDescription: Searches for a flying mount in the player's bags.",
    "undefined--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_FindFlyMountInBags/n(/n)/n"
  ],
  [
    "FindMountInBags [classic|retail]",
    "\nDescription: Searches for a mount in the player's bags.",
    "undefined--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_FindMountInBags/n(/n)/n"
  ],
  [
    "ClearUnstuckTriggerCache [classic|retail]",
    "\nDescription: Clears the cache of unstuck triggers.",
    "undefined--@return: None/nfunction/nBANETO_ClearUnstuckTriggerCache/n(/n)/n"
  ],
  [
    "CheckUnstuckTriggers [classic|retail]",
    "\nDescription: Checks the unstuck triggers.",
    "undefined--@return: None/nfunction/nBANETO_CheckUnstuckTriggers/n(/n)/n"
  ],
  [
    "CancelRecordingUnstuckRoute [classic|retail]",
    "\nDescription: Cancels the recording of an unstuck route.",
    "undefined--@return: None/nfunction/nBANETO_CancelRecordingUnstuckRoute/n(/n)/n"
  ],
  [
    "SaveUnstuckRoute [classic|retail]",
    "\nDescription: Saves the recorded unstuck route.",
    "undefined--@return: None/nfunction/nBANETO_SaveUnstuckRoute/n(/n)/n"
  ],
  [
    "DeleteLastUnstuckSpot [classic|retail]",
    "\nDescription: Deletes the last recorded unstuck spot.",
    "undefined--@return: None/nfunction/nBANETO_DeleteLastUnstuckSpot/n(/n)/n"
  ],
  [
    "DefineProfileUnstuck [classic|retail]",
    "\nDescription: Defines a new unstuck location for a profile.",
    "undefined--@arg unstuckid: number _ Identifier for the unstuck location./n--@arg x: number _ The x_coordinate for the unstuck location./n--@arg y: number _ The y_coordinate for the unstuck location./n--@arg z: number _ The z_coordinate for the unstuck location./n--@arg radiusTrigger: number _ The radius in which the unstuck location triggers./n--@return: None/nfunction/nBANETO_DefineProfileUnstuck/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "DefineUnstuck [classic|retail]",
    "\nDescription: Defines a new unstuck location.",
    "undefined--@arg unstuckid: number _ Identifier for the unstuck location./n--@arg x: number _ The x_coordinate for the unstuck location./n--@arg y: number _ The y_coordinate for the unstuck location./n--@arg z: number _ The z_coordinate for the unstuck location./n--@arg radiusTrigger: number _ The radius in which the unstuck location triggers./n--@return: None/nfunction/nBANETO_DefineUnstuck/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "RecordNewUnstuckSpot [classic|retail]",
    "\nDescription: Records a new unstuck spot at the current player's location.",
    "undefined--@return: None/nfunction/nBANETO_RecordNewUnstuckSpot/n(/n)/n"
  ],
  [
    "DeleteLastUnstuckRoute [classic|retail]",
    "\nDescription: Deletes the last recorded unstuck route.",
    "undefined--@return: None/nfunction/nBANETO_DeleteLastUnstuckRoute/n(/n)/n"
  ],
  [
    "RecordNewUnstuckRoute [classic|retail]",
    "\nDescription: Records a new unstuck route based on the player's current movement.",
    "undefined--@return: None/nfunction/nBANETO_RecordNewUnstuckRoute/n(/n)/n"
  ],
  [
    "lerp [classic|retail]",
    "\nDescription: Returns a number between two numbers at a specific increment.",
    "undefined--@arg a: number _ Starting number./n--@arg b: number _ Ending number./n--@arg x: number _ The increment./n--@return: number _ The interpolated value./nfunction/nlerp/n(/n,/n,/n)/n"
  ],
  [
    "lerp2 [classic|retail]",
    "\nDescription: Returns a number between two numbers at a specific increment, within a certain range.",
    "undefined--@arg t: number _ Starting number./n--@arg b: number _ Ending number./n--@arg c: number _ The increment./n--@arg d: number _ The range within which to interpolate./n--@return: number _ The interpolated value./nfunction/nlerp2/n(/n,/n,/n,/n)/n"
  ],
  [
    "FaceDirectionSmooth [classic|retail]",
    "\nDescription: Makes the player character smoothly turn to a specified angle.",
    "undefined--@arg angle: number _ The angle to turn to, in degrees./n--@return: None/nfunction/nBANETO_FaceDirectionSmooth/n(/n)/n"
  ],
  [
    "FaceDirection [classic|retail]",
    "\nDescription: Makes the player character turn to a specified angle.",
    "undefined--@arg angle: number _ The angle to turn to, in degrees./n--@arg bool: boolean _ Whether to turn smoothly or not./n--@return: None/nfunction/nFaceDirection/n(/n,/n)/n"
  ],
  [
    "ObjectExists [classic|retail]",
    "\nDescription: Checks whether the specified object exists.",
    "undefined--@arg obj: string _ The ID of the object to check./n--@return: boolean _ Whether the object exists./nfunction/nBANETO_ObjectExists/n(/n)/n"
  ],
  [
    "GePlayerAngle [classic|retail]",
    "\nDescription: Gets the player's current angle, in radians.",
    "undefined--@return: number _ The player's current angle, in radians./nfunction/nBANETO_GePlayerAngle/n(/n)/n"
  ],
  [
    "BlockSmoothTurn [classic|retail]",
    "\nDescription: Blocks the player character from turning smoothly for a specified duration.",
    "undefined--@arg seconds: number _ The number of seconds to block smooth turning./n--@return: None/nfunction/nBANETO_BlockSmoothTurn/n(/n)/n"
  ],
  [
    "SetPlayerAnglesLuabox [classic|retail]",
    "\nDescription: Sets the player character's angle to a specified value.",
    "undefined--@arg angle: number _ The angle to set, in radians./n--@return: None/nfunction/nBANETO_SetPlayerAnglesLuabox/n(/n)/n"
  ],
  [
    "RunMacro [classic|retail]",
    "\nDescription: Runs a specified macro.",
    "undefined--@arg macroname: string _ The name of the macro to run./n--@return: None/nfunction/nBANETO_RunMacro/n(/n)/n"
  ],
  [
    "RunMacroText [classic|retail]",
    "\nDescription: Executes the macro defined by the given text.",
    "undefined--@arg text: string _ The macro text to execute./n--@return: None/nfunction/nBANETO_RunMacroText/n(/n)/n"
  ],
  [
    "lbrs_jumpOnLedge [classic]",
    "\nDescription: Executes a specific jumping sequence for lbrs on ledge.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_jumpOnLedge/n(/n)/n"
  ],
  [
    "lbrs_jumpOnSpike [classic]",
    "\nDescription: Executes a specific jumping sequence for lbrs on spike.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_jumpOnSpike/n(/n)/n"
  ],
  [
    "lbrs_activate [classic]",
    "\nDescription: Activates a certain token in lbrs.",
    "undefined--@arg token: string _ The token to activate./n--@return: None/nfunction/nBANETO_lbrs_activate/n(/n)/n"
  ],
  [
    "SitStandOrDescendStart [classic|retail]",
    "\nDescription: Toggles between sitting, standing, and descending based on the provided info.",
    "undefined--@arg info: string _ The action to execute (sit, stand, descend)./n--@return: None/nfunction/nBANETO_SitStandOrDescendStart/n(/n)/n"
  ],
  [
    "MoveBackwardStart [classic|retail]",
    "\nDescription: Starts the character moving backward.",
    "undefined--@return: None/nfunction/nBANETO_MoveBackwardStart/n(/n)/n"
  ],
  [
    "MoveBackwardStop [classic|retail]",
    "\nDescription: Stops the character moving backward.",
    "undefined--@return: None/nfunction/nBANETO_MoveBackwardStop/n(/n)/n"
  ],
  [
    "AscendStop [classic|retail]",
    "\nDescription: Stops ascending.",
    "undefined--@return: None/nfunction/nBANETO_AscendStop/n(/n)/n"
  ],
  [
    "DescendStop [classic|retail]",
    "\nDescription: Stops descending.",
    "undefined--@return: None/nfunction/nBANETO_DescendStop/n(/n)/n"
  ],
  [
    "JumpOrAscendStart [classic|retail]",
    "\nDescription: Starts jumping or ascending based on the provided info.",
    "undefined--@arg info: string _ The action to execute (jump, ascend)./n--@return: None/nfunction/nBANETO_JumpOrAscendStart/n(/n)/n"
  ],
  [
    "lbrs_ManipulatePath [classic]",
    "\nDescription: Manipulates the path for lbrs.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_ManipulatePath/n(/n)/n"
  ],
  [
    "SetWaPathToNilAndBufferToNil [classic|retail]",
    "\nDescription: Sets both the WA path and the buffer to nil.",
    "undefined--@return: None/nfunction/nBANETO_SetWaPathToNilAndBufferToNil/n(/n)/n"
  ],
  [
    "SetCenterIndexTo1 [classic|retail]",
    "\nDescription: Sets the center index of the path to 1.",
    "undefined--@return: None/nfunction/nBANETO_SetCenterIndexTo1/n(/n)/n"
  ],
  [
    "SetWaPathNil [classic|retail]",
    "\nDescription: Sets the WA path to nil.",
    "undefined--@arg fromWhere: string _ Information about the source or reason for the path to be set to nil./n--@return: None/nfunction/nBANETO_SetWaPathNil/n(/n)/n"
  ],
  [
    "lbrs_EnterPortal [classic]",
    "\nDescription: Triggers the sequence to enter the portal in LBRS.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_EnterPortal/n(/n)/n"
  ],
  [
    "lbrs_LeavePortal [classic]",
    "\nDescription: Triggers the sequence to leave the portal in LBRS.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_LeavePortal/n(/n)/n"
  ],
  [
    "TestPathProblem [classic]",
    "\nDescription: Runs a test to identify any issues with the current path.",
    "undefined--@return: None/nfunction/nBANETO_TestPathProblem/n(/n)/n"
  ],
  [
    "TestPathProblem2 [classic]",
    "\nDescription: Runs a second test to identify any issues with the current path.",
    "undefined--@return: None/nfunction/nBANETO_TestPathProblem2/n(/n)/n"
  ],
  [
    "BrickMovement [classic]",
    "\nDescription: Stops the player character's movement, forcing them to stay in place.",
    "undefined--@return: None/nfunction/nBANETO_BrickMovement/n(/n)/n"
  ],
  [
    "Logout [classic|retail]",
    "\nDescription: Logs out the player character from the game.",
    "undefined--@return: None/nfunction/nBANETO_Logout/n(/n)/n"
  ],
  [
    "UnitTarget [classic|retail]",
    "\nDescription: Returns the target of the specified unit.",
    "undefined--@arg obj: the object of which we want to know the target/n--@return: object (the target of obj)/nfunction/nBANETO_UnitTarget/n(/n)/n"
  ],
  [
    "TappedTest [classic]",
    "\nDescription: Checks if the current target is tapped.",
    "undefined--@return: boolean _ True if the target is tapped, false otherwise./nfunction/nBANETO_TappedTest/n(/n)/n"
  ],
  [
    "TappedCheck [classic|retail]",
    "\nDescription: Checks and returns if the current target is tapped by the player or their group.",
    "undefined--@return: boolean _ True if the target is tapped by the player or their group, false otherwise./nfunction/nBANETO_TappedCheck/n(/n)/n"
  ],
  [
    "SetCurrentCenterIndex [classic|retail]",
    "\nDescription: Sets the current index for a certain center UI element (like action bars).",
    "undefined--@arg arg: number _ The index to set./n--@return: None/nfunction/nBANETO_SetCurrentCenterIndex/n(/n)/n"
  ],
  [
    "BodypullCheck [classic|retail]",
    "\nDescription: Checks if the player's body is pulled by a mob.",
    "undefined--@return: boolean _ True if body is being pulled, false otherwise./nfunction/nBANETO_BodypullCheck/n(/n)/n"
  ],
  [
    "JsonEncode [classic|retail]",
    "\nDescription: Converts a LUA table or value into a JSON_encoded string.",
    "undefined--@arg obj: table or value _ The LUA table or value to encode./n--@return: string _ The JSON_encoded string./nfunction/nBANETO_JsonEncode/n(/n)/n"
  ],
  [
    "JsonDecode [classic|retail]",
    "\nDescription: Decodes a JSON_encoded string into a LUA table.",
    "undefined--@arg string: string _ The JSON_encoded string to decode./n--@return: table _ The LUA table decoded from the JSON string./nfunction/nBANETO_JsonDecode/n(/n)/n"
  ],
  [
    "UnitExists [classic|retail]",
    "\nDescription: Checks if the given unit exists.",
    "undefined--@arg obj: unitId string _ The UnitID of the unit to check./n--@return: boolean _ True if the unit exists, false otherwise./nfunction/nBANETO_UnitExists/n(/n)/n"
  ],
  [
    "TargetNearest [classic|retail]",
    "\nDescription: Targets the nearest unit to the player.",
    "undefined--@return: None/nfunction/nBANETO_TargetNearest/n(/n)/n"
  ],
  [
    "UseAction [classic|retail]",
    "\nDescription: Performs the action associated with the specified action slot.",
    "undefined--@arg act: number _ The action slot number./n--@return: None/nfunction/nBANETO_UseAction/n(/n)/n"
  ],
  [
    "BlockPathAvoidance [classic|retail]",
    "\nDescription: Enables or disables path avoidance.",
    "undefined--@arg bool: boolean _ True to enable path avoidance, false to disable it./n--@return: None/nfunction/nBANETO_BlockPathAvoidance/n(/n)/n"
  ],
  [
    "GetAnglesBetweenPositions [classic|retail]",
    "\nDescription: Gets the angles between two positions in the 3D world.",
    "undefined--@return: number _ The angle in radians between the two positions./nfunction/nBANETO_GetAnglesBetweenPositions/n(/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "MeshTo [classic|retail]",
    "\nDescription: Moves the player to the specified coordinates using pathfinding.",
    "undefined--@return: None/nfunction/nBANETO_MeshTo/n(/n,/n,/n)/n"
  ],
  [
    "RunString [classic|retail]",
    "\nDescription: Executes the specified LUA code.",
    "undefined--@arg string: string _ The LUA code to execute./n--@return: Various _ The results of the executed LUA code./nfunction/nBANETO_RunString/n(/n)/n"
  ],
  [
    "DelayGroundUnstucking [classic|retail]",
    "\nDescription: Delays the ground unstucking method by the specified amount of seconds.",
    "undefined--@arg seconds: number _ The number of seconds to delay the unstucking method./n--@return: None/nfunction/nBANETO_DelayGroundUnstucking/n(/n)/n"
  ],
  [
    "CallFullStuckMethod [classic|retail]",
    "\nDescription: Calls the full method for unstucking the player character.",
    "undefined--@return: None/nfunction/nBANETO_CallFullStuckMethod/n(/n)/n"
  ],
  [
    "GetPath [classic|retail]",
    "\nDescription: Retrieves the current path of the player character.",
    "undefined--@return: table _ The current path as a table of coordinates./nfunction/nBANETO_GetPath/n(/n)/n"
  ],
  [
    "ObjectFlags1 [classic|retail]",
    "\nDescription: Retrieves the first set of flags for the specified object.",
    "undefined--@arg obj: Object _ The object to retrieve the flags for./n--@return: number _ The first set of flags for the object./nfunction/nBANETO_ObjectFlags1/n(/n)/n"
  ],
  [
    "ObjectFlags2 [classic|retail]",
    "\nDescription: Retrieves the second set of flags for the specified object.",
    "undefined--@arg obj: Object _ The object to retrieve the flags for./n--@return: number _ The second set of flags for the object./nfunction/nBANETO_ObjectFlags2/n(/n)/n"
  ],
  [
    "UnitIsSkinnable [classic|retail]",
    "\nDescription: Checks if the specified unit can be skinned.",
    "undefined--@arg obj: unitId string _ The UnitID of the unit to check./n--@return: boolean _ True if the unit can be skinned, false otherwise./nfunction/nBANETO_UnitIsSkinnable/n(/n)/n"
  ],
  [
    "UnitIsLooting [classic|retail]",
    "\nDescription: Checks if the specified unit is currently looting.",
    "undefined--@arg obj: unitId string _ The UnitID of the unit to check./n--@return: boolean _ True if the unit is currently looting, false otherwise./nfunction/nBANETO_UnitIsLooting/n(/n)/n"
  ],
  [
    "UnitFeignDeathed [classic|retail]",
    "\nDescription: Checks whether a unit is feigning death.",
    "undefined--@arg obj: string _ The unit to check./n--@return: Boolean indicating whether the unit is feigning death./nfunction/nBANETO_UnitFeignDeathed/n(/n)/n"
  ],
  [
    "IsWaterBelowUs [classic]",
    "\nDescription: Checks whether there is water below us.",
    "undefined--@return: Boolean indicating whether there is water below./nfunction/nBANETO_IsWaterBelowUs/n(/n)/n"
  ],
  [
    "FlyingRaycastBlock [classic]",
    "\nDescription: Performs a raycast to detect obstacles while flying.",
    "undefined--@return: Boolean indicating whether there is an obstacle./nfunction/nBANETO_FlyingRaycastBlock/n(/n)/n"
  ],
  [
    "FlyingRaycast [classic|retail]",
    "\nDescription: Performs a raycast while flying.",
    "undefined--@return: Raycast result./nfunction/nBANETO_FlyingRaycast/n(/n)/n"
  ],
  [
    "FlyingRaycastClose [classic|retail]",
    "\nDescription: Performs a close proximity raycast while flying.",
    "undefined--@return: Raycast result./nfunction/nBANETO_FlyingRaycastClose/n(/n)/n"
  ],
  [
    "IsFlyingStuck [classic|retail]",
    "\nDescription: Checks whether the flying unit is stuck.",
    "undefined--@return: Boolean indicating whether the flying unit is stuck./nfunction/nBANETO_IsFlyingStuck/n(/n)/n"
  ],
  [
    "StrafeLeftStart [classic|retail]",
    "\nDescription: Starts strafing to the left.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeLeftStart/n(/n)/n"
  ],
  [
    "StrafeLeftStop [classic|retail]",
    "\nDescription: Stops strafing to the left.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeLeftStop/n(/n)/n"
  ],
  [
    "StrafeRightStart [classic|retail]",
    "\nDescription: Starts strafing to the right.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeRightStart/n(/n)/n"
  ],
  [
    "StrafeRightStop [classic|retail]",
    "\nDescription: Stops strafing to the right.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeRightStop/n(/n)/n"
  ],
  [
    "FlyingUnstucker [classic|retail]",
    "\nDescription: Unstucks the flying unit.",
    "undefined--@return: Unstuck result./nfunction/nBANETO_FlyingUnstucker/n(/n)/n"
  ],
  [
    "SetFlyingPitch [classic|retail]",
    "\nDescription: Sets the flying pitch.",
    "undefined--@arg val: number _ The value to set the pitch to./n--@return: The result of setting the pitch./nfunction/nBANETO_SetFlyingPitch/n(/n)/n"
  ],
  [
    "GetFlyingPitch [classic|retail]",
    "\nDescription: Gets the current flying pitch.",
    "undefined--@return: The current flying pitch./nfunction/nBANETO_GetFlyingPitch/n(/n)/n"
  ],
  [
    "SetToOldFlyingNav [classic|retail]",
    "\nDescription: Sets the navigation to old flying.",
    "undefined--@return: Result of the setting./nfunction/nBANETO_SetToOldFlyingNav/n(/n)/n"
  ],
  [
    "FlyingNavigator [classic|retail]",
    "\nDescription: Executes the flying navigator.",
    "undefined--@return: Flying navigator result./nfunction/nBANETO_FlyingNavigator/n(/n)/n"
  ],
  [
    "FaceDirection [classic]",
    "\nDescription: Faces a specified direction.",
    "undefined--@arg dir: string _ The direction to face./n--@return: The result of facing the direction./nfunction/nBANETO_FaceDirection/n(/n)/n"
  ],
  [
    "IsRunning [classic|retail]",
    "\nDescription: Checks whether the unit is running.",
    "undefined--@return: Boolean indicating whether the unit is running./nfunction/nBANETO_IsRunning/n(/n)/n"
  ],
  [
    "FlyAscendExecute [classic|retail]",
    "\nDescription: Executes the fly ascend action.",
    "undefined--@return: The result of the fly ascend action./nfunction/nBANETO_FlyAscendExecute/n(/n)/n"
  ],
  [
    "Dismount [classic|retail]",
    "\nDescription: Dismounts the unit.",
    "undefined--@arg msg: string _ The message to send on dismount./n--@return: The result of the dismount action./nfunction/nBANETO_Dismount/n(/n)/n"
  ],
  [
    "PathHandlerNn [classic|retail]",
    "\nDescription: Handles the given path.",
    "undefined--@arg path: string _ The path to handle./n--@return: The result of the path handling./nfunction/nBANETO_PathHandlerNn/n(/n)/n"
  ],
  [
    "DelayOM [classic]",
    "\nDescription: Delays the object manager.",
    "undefined--@arg seconds: number _ The number of seconds to delay./n--@return: The result of the delay./nfunction/nBANETO_DelayOM/n(/n)/n"
  ],
  [
    "GetObjectFacing [classic|retail]",
    "\nDescription: Gets the facing direction of an object.",
    "undefined--@arg object: string _ The object to get the facing direction of./n--@return: The facing direction of the object./nfunction/nBANETO_GetObjectFacing/n(/n)/n"
  ],
  [
    "UpdateGotoPositionWa [classic|retail]",
    "\nDescription: Updates the goto position with WorldAnchor.",
    "undefined--@return: The result of the update./nfunction/nUpdateGotoPositionWa/n(/n)/n"
  ],
  [
    "FlyMount [classic|retail]",
    "\nDescription: Mounts the unit for flying.",
    "undefined--@return: The result of the mount action./nfunction/nBANETO_FlyMount/n(/n)/n"
  ],
  [
    "Mount [classic]",
    "\nDescription: Mounts the unit.",
    "undefined--@return: The result of the mount action./nfunction/nBANETO_Mount/n(/n)/n"
  ],
  [
    "GetClosestKnownTaxi [classic|retail]",
    "\nDescription: Gets the closest known taxi.",
    "undefined--@return: The closest known taxi./nfunction/nBANETO_GetClosestKnownTaxi/n(/n)/n"
  ],
  [
    "ProfileSetHomeMailbox [classic|retail]",
    "\nDescription: Sets the home mailbox with specified coordinates and ID.",
    "undefined--@arg x: number _ The x coordinate./n--@arg y: number _ The y coordinate./n--@arg z: number _ The z coordinate./n--@arg id: string _ The ID of the mailbox./n--@return: The result of the set action./nfunction/nBANETO_ProfileSetHomeMailbox/n(/n,/n,/n,/n)/n"
  ],
  [
    "SetHomeMailbox [classic|retail]",
    "\nDescription: Sets the home mailbox.",
    "undefined--@return: The result of the set action./nfunction/nBANETO_SetHomeMailbox/n(/n)/n"
  ],
  [
    "CheckHomeMailbox [classic|retail]",
    "\nDescription: Checks the home mailbox.",
    "undefined--@return: The result of the check./nfunction/nBANETO_CheckHomeMailbox/n(/n)/n"
  ],
  [
    "GetClosestMailbox [classic|retail]",
    "\nDescription: Gets the closest mailbox.",
    "undefined--@return: The closest mailbox./nfunction/nBANETO_GetClosestMailbox/n(/n)/n"
  ],
  [
    "GetClosestClassTrainer [classic|retail]",
    "\nDescription: Gets the closest class trainer of a specified class.",
    "undefined--@arg classEnglishName: string _ The English name of the class./n--@return: The closest class trainer of the specified class./nfunction/nBANETO_GetClosestClassTrainer/n(/n)/n"
  ],
  [
    "GetClosestProfTrainer [classic|retail]",
    "\nDescription: Gets the closest profession trainer of a specified profession.",
    "undefined--@arg profEnglishName: string _ The English name of the profession./n--@return: The closest profession trainer of the specified profession./nfunction/nBANETO_GetClosestProfTrainer/n(/n)/n"
  ],
  [
    "GetClosestTaxiExit [classic|retail]",
    "\nDescription: Gets the closest taxi exit.",
    "undefined--@return: The closest taxi exit./nfunction/nBANETO_GetClosestTaxiExit/n(/n)/n"
  ],
  [
    "GetClosestTaxiEntry [classic|retail]",
    "\nDescription: Gets the closest taxi entry.",
    "undefined--@return: The closest taxi entry./nfunction/nBANETO_GetClosestTaxiEntry/n(/n)/n"
  ],
  [
    "IsFlightmasterOnMyContinent [classic|retail]",
    "\nDescription: Checks whether the flight master is on the same continent.",
    "undefined--@arg id: string _ The ID of the flight master./n--@return: Boolean indicating whether the flight master is on the same continent./nfunction/nBANETO_IsFlightmasterOnMyContinent/n(/n)/n"
  ],
  [
    "GetLuaBoxDestination [classic|retail]",
    "\nDescription: Retrieves the destination from Lua Box.",
    "undefined--@return: Destination coordinates or object./nfunction/nBANETO_GetLuaBoxDestination/n(/n)/n"
  ],
  [
    "GetEwtDestination [classic|retail]",
    "\nDescription: Retrieves the destination from Ewt.",
    "undefined--@return: Destination coordinates or object./nfunction/nBANETO_GetEwtDestination/n(/n)/n"
  ],
  [
    "IsKickNeededUnitCheck [classic|retail]",
    "\nDescription: Checks whether a kick is needed for the specified unit.",
    "undefined--@arg unit: string _ The unit to check./n--@return: Boolean indicating whether a kick is needed./nfunction/nBANETO_IsKickNeededUnitCheck/n(/n)/n"
  ],
  [
    "IsKickNeeded [classic|retail]",
    "\nDescription: Checks whether a kick is needed.",
    "undefined--@return: Boolean indicating whether a kick is needed./nfunction/nBANETO_IsKickNeeded/n(/n)/n"
  ],
  [
    "IsTaxiNeeded [classic|retail]",
    "\nDescription: Checks whether a taxi is needed.",
    "undefined--@return: Boolean indicating whether a taxi is needed./nfunction/nBANETO_IsTaxiNeeded/n(/n)/n"
  ],
  [
    "IsOnCustomVendorPath [classic]",
    "\nDescription: Checks whether the player is on a custom vendor path.",
    "undefined--@return: Boolean indicating whether the player is on a custom vendor path./nfunction/nBANETO_IsOnCustomVendorPath/n(/n)/n"
  ],
  [
    "GetExecuteFlyAscend [classic]",
    "\nDescription: Executes a fly ascend.",
    "undefined--@return: Result of the execution./nfunction/nBANETO_GetExecuteFlyAscend/n(/n)/n"
  ],
  [
    "IsMountNeeded [classic|retail]",
    "\nDescription: Checks whether a mount is needed.",
    "undefined--@return: Boolean indicating whether a mount is needed./nfunction/nBANETO_IsMountNeeded/n(/n)/n"
  ],
  [
    "HasMount [classic|retail]",
    "\nDescription: Checks whether the player has a mount.",
    "undefined--@return: Boolean indicating whether the player has a mount./nfunction/nBANETO_HasMount/n(/n)/n"
  ],
  [
    "HasMountItem [classic|retail]",
    "\nDescription: Checks whether the player has a mount item.",
    "undefined--@return: Boolean indicating whether the player has a mount item./nfunction/nBANETO_HasMountItem/n(/n)/n"
  ],
  [
    "GetPlayerPointer [classic|retail]",
    "\nDescription: Retrieves the player's pointer.",
    "undefined--@return: Player's pointer./nfunction/nBANETO_GetPlayerPointer/n(/n)/n"
  ],
  [
    "IsAnEnemyPolymorphedNovaCheck [classic|retail]",
    "\nDescription: Checks whether an enemy is polymorphed and ready for Nova.",
    "undefined--@return: Boolean indicating whether an enemy is polymorphed and ready for Nova./nfunction/nBANETO_IsAnEnemyPolymorphedNovaCheck/n(/n)/n"
  ],
  [
    "IsLootStateNeededV2 [classic|retail]",
    "\nDescription: Checks whether the loot state is needed (version 2).",
    "undefined--@return: Boolean indicating whether the loot state is needed./nfunction/nBANETO_IsLootStateNeededV2/n(/n)/n"
  ],
  [
    "SelectNextMultidotTarget [classic|retail]",
    "\nDescription: Selects the next target to apply multiple damage over time spells.",
    "undefined--@return: Target selection result./nfunction/nBANETO_SelectNextMultidotTarget/n(/n)/n"
  ],
  [
    "CountItemTypeInBagsForDisc [classic|retail]",
    "\nDescription: Counts the given item type in the player's bags for Discord.",
    "undefined--@arg itemTypeC: string _ The item type to count./n--@return: Number of items of the given type./nfunction/nBANETO_CountItemTypeInBagsForDisc/n(/n)/n"
  ],
  [
    "DiscordSendWhisperOutgoing [classic|retail]",
    "\nDescription: Sends an outgoing whisper to Discord.",
    "undefined--@arg msg: string _ The message to send./nfunction/nBANETO_DiscordSendWhisperOutgoing/n(/n)/n"
  ],
  [
    "DiscordSendWhisper [classic|retail]",
    "\nDescription: Sends a whisper to a sender via Discord.",
    "undefined--@arg sender: string _ The sender to whisper to./n--@arg msg: string _ The message to send./nfunction/nBANETO_DiscordSendWhisper/n(/n,/n)/n"
  ],
  [
    "DiscordSendProfileInfo [classic]",
    "\nDescription: Sends the profile information to Discord.",
    "undefinedfunction/nBANETO_DiscordSendProfileInfo/n(/n)/n"
  ],
  [
    "DiscordSendPluginCustomText [classic|retail]",
    "\nDescription: Sends a custom text to Discord from the plugin.",
    "undefined--@arg text: string _ The custom text to send./nfunction/nBANETO_DiscordSendPluginCustomText/n(/n)/n"
  ],
  [
    "DiscordSendTargeted [classic|retail]",
    "\nDescription: Sends a targeted name to Discord.",
    "undefined--@arg name: string _ The name of the target to send./nfunction/nBANETO_DiscordSendTargeted/n(/n)/n"
  ],
  [
    "DiscordSendPluginMobFound [classic|retail]",
    "\nDescription: Sends a message to Discord when a Mob is found by the plugin.",
    "undefined--@arg id: number _ The ID of the Mob that was found./nfunction/nBANETO_DiscordSendPluginMobFound/n(/n)/n"
  ],
  [
    "DiscordSendStuck [classic|retail]",
    "\nDescription: Sends a message to Discord when the character is stuck.",
    "undefinedfunction/nBANETO_DiscordSendStuck/n(/n)/n"
  ],
  [
    "DiscordSendBgStart [classic|retail]",
    "\nDescription: Sends a message to Discord when the battleground starts.",
    "undefinedfunction/nBANETO_DiscordSendBgStart/n(/n)/n"
  ],
  [
    "DiscordSendDeath [classic|retail]",
    "\nDescription: Sends a message to Discord when the character dies.",
    "undefinedfunction/nBANETO_DiscordSendDeath/n(/n)/n"
  ],
  [
    "DiscordSendPluginItemFound [classic|retail]",
    "\nDescription: Sends a message to Discord when the plugin finds an item.",
    "undefinedfunction/nBANETO_DiscordSendPluginItemFound/n(/n)/n"
  ],
  [
    "DiscordSendTest [classic|retail]",
    "\nDescription: Sends a test message to Discord.",
    "undefinedfunction/nBANETO_DiscordSendTest/n(/n)/n"
  ],
  [
    "GetXpPercent [classic|retail]",
    "\nDescription: Retrieves the percentage of the current experience.",
    "undefined--@return: number _ The current experience percentage./nfunction/nBANETO_GetXpPercent/n(/n)/n"
  ],
  [
    "DiscordSendStatus [classic|retail]",
    "\nDescription: Sends the status to Discord.",
    "undefinedfunction/nBANETO_DiscordSendStatus/n(/n)/n"
  ],
  [
    "SelectNextMultidotTargetPriest [classic]",
    "\nDescription: Selects the next target to apply multiple damage over time spells as a priest.",
    "undefinedfunction/nBANETO_SelectNextMultidotTargetPriest/n(/n)/n"
  ],
  [
    "IsFightBlockedByMageMultipull [classic|retail]",
    "\nDescription: Checks whether the fight is blocked by a mage multipull.",
    "undefined--@return: boolean _ true if the fight is blocked, false otherwise./nfunction/nBANETO_IsFightBlockedByMageMultipull/n(/n)/n"
  ],
  [
    "IsAnEnemyNotFullMultidotted [classic|retail]",
    "\nDescription: Checks whether an enemy is not fully affected by multiple damage over time spells.",
    "undefined--@return: boolean _ true if the enemy is not fully affected, false otherwise./nfunction/nBANETO_IsAnEnemyNotFullMultidotted/n(/n)/n"
  ],
  [
    "IsAnEnemyPlaguedPriest [classic]",
    "\nDescription: Checks if a specified enemy unit is a Plagued Priest.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAnEnemyPlaguedPriest/n(/n)/n"
  ],
  [
    "IsAnEnemyNotFullMultidottedPriest [classic]",
    "\nDescription: Checks if a specified enemy Priest unit is not fully multidotted.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAnEnemyNotFullMultidottedPriest/n(/n)/n"
  ],
  [
    "IsAnEnemyPolymorphed [classic|retail]",
    "\nDescription: Checks if a specified enemy unit is polymorphed.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAnEnemyPolymorphed/n(/n)/n"
  ],
  [
    "SwingTimerTest [classic]",
    "\nDescription: Tests the swing timer of the player character.",
    "undefined--@return: number (the time remaining until the next auto_attack)/nfunction/nBANETO_SwingTimerTest/n(/n)/n"
  ],
  [
    "SwingTimer [classic]",
    "\nDescription: Returns the player's swing timer.",
    "undefined--@return: number (the time remaining until the next auto_attack)/nfunction/nBANETO_SwingTimer/n(/n)/n"
  ],
  [
    "SpellStopCasting [classic|retail]",
    "\nDescription: Stops the current spell being cast.",
    "undefinedfunction/nBANETO_SpellStopCasting/n(/n)/n"
  ],
  [
    "RetargetLowestHealthMob [classic|retail]",
    "\nDescription: Changes target to the enemy mob with the lowest health.",
    "undefinedfunction/nBANETO_RetargetLowestHealthMob/n(/n)/n"
  ],
  [
    "RetargetGoodMobAfterMultidot [classic|retail]",
    "\nDescription: Changes target to a good mob after multidot.",
    "undefinedfunction/nBANETO_RetargetGoodMobAfterMultidot/n(/n)/n"
  ],
  [
    "RetargetGoodMobAfterMultidotPriest [classic]",
    "\nDescription: Changes target to a good mob after multidot, with preference for Priests.",
    "undefinedfunction/nBANETO_RetargetGoodMobAfterMultidotPriest/n(/n)/n"
  ],
  [
    "RetargetGoodMobAfterPoly [classic|retail]",
    "\nDescription: Changes target to a good mob after a polymorph effect.",
    "undefinedfunction/nBANETO_RetargetGoodMobAfterPoly/n(/n)/n"
  ],
  [
    "TargetPolymorphedMob [classic|retail]",
    "\nDescription: Targets a polymorphed mob.",
    "undefinedfunction/nBANETO_TargetPolymorphedMob/n(/n)/n"
  ],
  [
    "TargetAndPolymorph [classic|retail]",
    "\nDescription: Targets and polymorphs a specified mob.",
    "undefinedfunction/nBANETO_TargetAndPolymorph/n(/n)/n"
  ],
  [
    "IsUnitMultidotted [classic|retail]",
    "\nDescription: Checks if a specified unit is multidotted.",
    "undefined--@arg unit: string (unit to be checked)/n--@return: boolean/nfunction/nBANETO_IsUnitMultidotted/n(/n)/n"
  ],
  [
    "IsUnitMultidottedPriest [classic]",
    "\nDescription: Checks if a specified unit is multidotted, with preference for Priests.",
    "undefined--@arg unit: string (unit to be checked)/n--@return: boolean/nfunction/nBANETO_IsUnitMultidottedPriest/n(/n)/n"
  ],
  [
    "IsUnitPolymorphed [classic|retail]",
    "\nDescription: Checks if a specified unit is polymorphed.",
    "undefined--@arg unit: string (unit to be checked)/n--@return: boolean/nfunction/nBANETO_IsUnitPolymorphed/n(/n)/n"
  ],
  [
    "Object [classic|retail]",
    "\nDescription: Creates a new Object with the given value.",
    "undefined--@arg arg: mixed/n--@return: Object/nfunction/nBANETO_Object/n(/n)/n"
  ],
  [
    "ClearTarget [classic|retail]",
    "\nDescription: Clears the current target.",
    "undefinedfunction/nBANETO_ClearTarget/n(/n)/n"
  ],
  [
    "SelectActiveEnemyAroundPlayer [classic|retail]",
    "\nDescription: Selects an active enemy within a certain radius around the player.",
    "undefined--@arg radius: number/n--@return: unitId (unit identifier of the selected enemy)/nfunction/nBANETO_SelectActiveEnemyAroundPlayer/n(/n)/n"
  ],
  [
    "CancelEnrageBuffing [classic]",
    "\nDescription: Cancels the enrage buffing state of the player character.",
    "undefinedfunction/nBANETO_CancelEnrageBuffing/n(/n)/n"
  ],
  [
    "GetNumEnemiesAroundUnit [classic|retail]",
    "\nDescription: Retrieves the number of enemy units around a specified unit.",
    "undefined--@arg unit: string (unit identifier)/n--@arg radius: number/n--@return: number/nfunction/nGetNumEnemiesAroundUnit/n(/n,/n)/n"
  ],
  [
    "SetRETAIL_WQUEST [classic|retail]",
    "\nDescription: Sets the value of the RETAIL_WQUEST variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetRETAIL_WQUEST/n(/n)/n"
  ],
  [
    "SetOZ_RAREFARM_QUESTSCAN [classic|retail]",
    "\nDescription: Sets the value of the OZ_RAREFARM_QUESTSCAN variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetOZ_RAREFARM_QUESTSCAN/n(/n)/n"
  ],
  [
    "UnitThreatSituation [classic|retail]",
    "\nDescription: Checks the threat level between two units.",
    "undefined--@arg unit1: string/n--@arg unit2: string/n--@return: number/nfunction/nBANETO_UnitThreatSituation/n(/n,/n)/n"
  ],
  [
    "SetBLOCKMOVING_REICHI [classic|retail]",
    "\nDescription: Sets the value of the BLOCKMOVING_REICHI variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetBLOCKMOVING_REICHI/n(/n)/n"
  ],
  [
    "SetBLACKLIST_SPOTS [classic|retail]",
    "\nDescription: Sets the value of the BLACKLIST_SPOTS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetBLACKLIST_SPOTS/n(/n)/n"
  ],
  [
    "SetDEFINED_TARGET_IDS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_TARGET_IDS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_TARGET_IDS/n(/n)/n"
  ],
  [
    "SetDEFINED_CENTERS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_CENTERS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_CENTERS/n(/n)/n"
  ],
  [
    "SetDEFINED_QUEST_IDS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_QUEST_IDS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_QUEST_IDS/n(/n)/n"
  ],
  [
    "SetDEFINED_QUEST_PICKUP_NPCS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_QUEST_PICKUP_NPCS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_QUEST_PICKUP_NPCS/n(/n)/n"
  ],
  [
    "SetQUEST_TURNIN_NPCS [classic|retail]",
    "\nDescription: Sets the value of the QUEST_TURNIN_NPCS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetQUEST_TURNIN_NPCS/n(/n)/n"
  ],
  [
    "SetDEFINED_QUESTSTEP_TYPES [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_QUESTSTEP_TYPES variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_QUESTSTEP_TYPES/n(/n)/n"
  ],
  [
    "SetDEFINED_VENDOR_GOODS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_VENDOR_GOODS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_VENDOR_GOODS/n(/n)/n"
  ],
  [
    "SetDEFINED_VENDOR_REPAIR [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_VENDOR_REPAIR variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_VENDOR_REPAIR/n(/n)/n"
  ],
  [
    "SetDEFINED_VENDOR_SELL [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_VENDOR_SELL variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_VENDOR_SELL/n(/n)/n"
  ],
  [
    "SetEATINGDRINKING_RETAIL_DELAY_AMOUNT [classic|retail]",
    "\nDescription: Sets the value of the EATINGDRINKING_RETAIL_DELAY_AMOUNT variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetEATINGDRINKING_RETAIL_DELAY_AMOUNT/n(/n)/n"
  ],
  [
    "SetSTOPFIGHT_EVADE [classic|retail]",
    "\nDescription: Blacklists the FIGHTING state until the specified timestamp expires. If you already are in FIGHTING state you need to call BANETO_SetSTOPFIGHT_EVADE(true) to leave it!",
    "undefined--@arg timestamp: Example would be GetTime()+10/nfunction/nBANETO_SetSTOPFIGHT_EVADE/n(/n)/n"
  ],
  [
    "SetBLOCKMOVING [classic|retail]",
    "\nDescription: Sets the value of the BLOCKMOVING variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetBLOCKMOVING/n(/n)/n"
  ],
  [
    "SetIsLocalQuester [classic|retail]",
    "\nDescription: Sets the value of the IsLocalQuester variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetIsLocalQuester/n(/n)/n"
  ],
  [
    "SetFIGHTING_EMERGENCY_LEAVE [classic|retail]",
    "\nDescription: Sets the value of the FIGHTING_EMERGENCY_LEAVE variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetFIGHTING_EMERGENCY_LEAVE/n(/n)/n"
  ],
  [
    "SetRETAIL_GOSSIP_QUEST [classic|retail]",
    "\nDescription: Sets the value of the RETAIL_GOSSIP_QUEST variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetRETAIL_GOSSIP_QUEST/n(/n)/n"
  ],
  [
    "SetSPELLONLOCATION_ID [classic|retail]",
    "\nDescription: Sets the value of the SPELLONLOCATION_ID variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetSPELLONLOCATION_ID/n(/n)/n"
  ],
  [
    "HasTotemActive [classic|retail]",
    "\nDescription: Checks if a specific totem with the given ID is active.",
    "undefined--@arg idTotem: number/n--@return: boolean/nfunction/nBANETO_HasTotemActive/n(/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundVectorNotInfight [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific position who are not currently in a fight",
    "undefined--@arg x: number _ The X coordinate of the position/n--@arg y: number _ The Y coordinate of the position/n--@arg z: number _ The Z coordinate of the position/n--@arg radius: number _ The radius within which to look for enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundVectorNotInfight/n(/n,/n,/n,/n)/n"
  ],
  [
    "FindNextAssistPositionNew [classic]",
    "\nDescription: Finds the next position to assist a player character",
    "undefined--@return: string _ The coordinates of the next assist position/nfunction/nBANETO_FindNextAssistPositionNew/n(/n)/n"
  ],
  [
    "FindNextAssistPosition [classic|retail]",
    "\nDescription: Finds the next position to assist a player character",
    "undefined--@return: string _ The coordinates of the next assist position/nfunction/nBANETO_FindNextAssistPosition/n(/n)/n"
  ],
  [
    "GetNumPlayersAroundUnit [classic|retail]",
    "\nDescription: Counts the number of players around a specific unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count players/n--@return: number _ The number of players found/nfunction/nGetNumPlayersAroundUnit/n(/n,/n)/n"
  ],
  [
    "GetNumFriendsAroundUnitPvp [classic|retail]",
    "\nDescription: Counts the number of friendly units around a specific unit in PvP",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count friendly units/n--@return: number _ The number of friendly units found/nfunction/nGetNumFriendsAroundUnitPvp/n(/n,/n)/n"
  ],
  [
    "CountPlayersAroundMe [classic|retail]",
    "\nDescription: Counts the number of players around the current player character",
    "undefined--@arg radius: number _ The radius within which to count players/n--@return: number _ The number of players found/nfunction/nCountPlayersAroundMe/n(/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundUnitPvp [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific unit in PvP",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count hostile enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundUnitPvp/n(/n,/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundUnitBlacklistFunc [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific unit, excluding those on a blacklist",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count hostile enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundUnitBlacklistFunc/n(/n,/n)/n"
  ],
  [
    "GetNumPossibleEnemiesAroundUnit [classic|retail]",
    "\nDescription: Counts the number of potential enemies around a specific unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count potential enemies/n--@return: number _ The number of potential enemies found/nfunction/nGetNumPossibleEnemiesAroundUnit/n(/n,/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundUnit [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count hostile enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundUnit/n(/n,/n)/n"
  ],
  [
    "Print [classic|retail]",
    "\nDescription: Prints a message to the console",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_Print/n(/n)/n"
  ],
  [
    "PrintError [classic|retail]",
    "\nDescription: Prints an error message to the console",
    "undefined--@arg message: string _ The error message to be printed/n--@return: nil/nfunction/nBANETO_PrintError/n(/n)/n"
  ],
  [
    "SetBamboLog [classic|retail]",
    "\nDescription: Toggles the logging functionality of the BANETO module",
    "undefined--@arg bool: boolean _ True to enable logging, false to disable it/n--@return: nil/nfunction/nBANETO_SetBamboLog/n(/n)/n"
  ],
  [
    "PrintPalaDebug [classic]",
    "\nDescription: Prints a debug message for the Paladin class",
    "undefined--@arg message: string _ The debug message to be printed/n--@return: nil/nfunction/nBANETO_PrintPalaDebug/n(/n)/n"
  ],
  [
    "PrintDungeonDebug [classic]",
    "\nDescription: Prints a debug message for dungeon activities",
    "undefined--@arg message: string _ The debug message to be printed/n--@return: nil/nfunction/nBANETO_PrintDungeonDebug/n(/n)/n"
  ],
  [
    "PrintBambo [classic|retail]",
    "\nDescription: Prints a message to the console with the prefix \"Bambo\"",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintBambo/n(/n)/n"
  ],
  [
    "PrintGatherLandingDebug [classic]",
    "\nDescription: Prints a debug message for the GatherLanding module",
    "undefined--@arg message: string _ The debug message to be printed/n--@return: nil/nfunction/nBANETO_PrintGatherLandingDebug/n(/n)/n"
  ],
  [
    "PrintWarning [classic|retail]",
    "\nDescription: Prints a warning message to the console",
    "undefined--@arg message: string _ The warning message to be printed/n--@return: nil/nfunction/nBANETO_PrintWarning/n(/n)/n"
  ],
  [
    "PrintSuccess [classic|retail]",
    "\nDescription: Prints a success message to the console",
    "undefined--@arg message: string _ The success message to be printed/n--@return: nil/nfunction/nBANETO_PrintSuccess/n(/n)/n"
  ],
  [
    "PrintFight [classic|retail]",
    "\nDescription: Prints a message related to fighting activities to the console",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintFight/n(/n)/n"
  ],
  [
    "PrintMeme [classic|retail]",
    "\nDescription: Prints a meme message to the console",
    "undefined--@arg message: string _ The meme message to be printed/n--@return: nil/nfunction/nBANETO_PrintMeme/n(/n)/n"
  ],
  [
    "PrintProfile [classic|retail]",
    "\nDescription: Prints a message related to profile activities to the console",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintProfile/n(/n)/n"
  ],
  [
    "PrintStateWithDelay [classic|retail]",
    "\nDescription: Prints a message with a delay",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintStateWithDelay/n(/n)/n"
  ],
  [
    "PrintState [classic|retail]",
    "\nDescription: Prints a message",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintState/n(/n)/n"
  ],
  [
    "PrintDev [classic|retail]",
    "\nDescription: Prints a message for development purposes",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintDev/n(/n)/n"
  ],
  [
    "GetVersion [classic|retail]",
    "\nDescription: Gets the version of the BANETO module",
    "undefined--@return: string _ The version of the BANETO module/nfunction/nBANETO_GetVersion/n(/n)/n"
  ],
  [
    "GetRawgoldPerHour [classic|retail]",
    "\nDescription: Gets the raw gold earnings per hour",
    "undefined--@return: number _ The raw gold earnings per hour/nfunction/nBANETO_GetRawgoldPerHour/n(/n)/n"
  ],
  [
    "GetXpPerHour [classic|retail]",
    "\nDescription: Gets the experience points gain rate per hour",
    "undefined--@return: number _ The experience points gain rate per hour/nfunction/nBANETO_GetXpPerHour/n(/n)/n"
  ],
  [
    "StashStatsValues [classic|retail]",
    "\nDescription: Stores the stats values",
    "undefined--@return: nil/nfunction/nBANETO_StashStatsValues/n(/n)/n"
  ],
  [
    "UseWand [classic|retail]",
    "\nDescription: Uses a wand",
    "undefined--@return: nil/nfunction/nUseWand/n(/n)/n"
  ],
  [
    "IsWandBlocked [classic]",
    "\nDescription: Checks if the use of wand is blocked",
    "undefined--@return: boolean _ Returns true if the use of wand is blocked, false otherwise/nfunction/nIsWandBlocked/n(/n)/n"
  ],
  [
    "testLos [classic|retail]",
    "\nDescription: Tests the line of sight",
    "undefined--@return: boolean _ Returns true if the line of sight is clear, false otherwise/nfunction/ntestLos/n(/n)/n"
  ],
  [
    "IsUnitInLos [classic|retail]",
    "\nDescription: Checks if a unit is in the line of sight",
    "undefined--@arg object: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit is in the line of sight, false otherwise/nfunction/nBANETO_IsUnitInLos/n(/n)/n"
  ],
  [
    "IsTargetInLos [classic|retail]",
    "\nDescription: Checks if the target is in the line of sight",
    "undefined--@return: boolean _ Returns true if the target is in the line of sight, false otherwise/nfunction/nBANETO_IsTargetInLos/n(/n)/n"
  ],
  [
    "GetTotalBagSlots [classic|retail]",
    "\nDescription: Gets the total number of bag slots",
    "undefined--@return: number _ The total number of bag slots/nfunction/nBANETO_GetTotalBagSlots/n(/n)/n"
  ],
  [
    "GetFreeBagSlots [classic|retail]",
    "\nDescription: Gets the number of free bag slots",
    "undefined--@return: number _ The number of free bag slots/nfunction/nBANETO_GetFreeBagSlots/n(/n)/n"
  ],
  [
    "CancelShapeshift [classic|retail]",
    "\nDescription: Cancels the shapeshift effect",
    "undefined--@return: nil/nfunction/nBANETO_CancelShapeshift/n(/n)/n"
  ],
  [
    "CancelShapeshift [classic|retail]",
    "\nDescription: Cancels the shapeshift effect",
    "undefined--@return: nil/nfunction/nCancelShapeshift/n(/n)/n"
  ],
  [
    "GetShapeshiftDruid [classic|retail]",
    "\nDescription: Gets the current shapeshift form for a druid",
    "undefined--@return: string _ The current shapeshift form for a druid/nfunction/nGetShapeshiftDruid/n(/n)/n"
  ],
  [
    "HasDebuffWithCount [classic|retail]",
    "\nDescription: Checks if a unit has a specific debuff with a count",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: number _ Returns the count of the specified debuff on the unit, 0 if the unit does not have the debuff/nfunction/nBANETO_HasDebuffWithCount/n(/n,/n,/n)/n"
  ],
  [
    "GetBuffCooldown [classic|retail]",
    "\nDescription: Gets the cooldown of a buff on a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: number _ Returns the cooldown of the buff in seconds/nfunction/nBANETO_GetBuffCooldown/n(/n,/n)/n"
  ],
  [
    "HasBuffWithCount [classic|retail]",
    "\nDescription: Checks if a unit has a specific buff with a count",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: number _ Returns the count of the specified buff on the unit, 0 if the unit does not have the buff/nfunction/nBANETO_HasBuffWithCount/n(/n,/n,/n)/n"
  ],
  [
    "HasBuff [classic|retail]",
    "\nDescription: Checks if a unit has a specific buff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: boolean _ Returns true if the unit has the specified buff, false otherwise/nfunction/nBANETO_HasBuff/n(/n,/n,/n)/n"
  ],
  [
    "GetUnitSpeed [classic|retail]",
    "\nDescription: Gets the speed of a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: number _ Returns the speed of the unit/nfunction/nBANETO_GetUnitSpeed/n(/n)/n"
  ],
  [
    "ShamanPoisonDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Shaman has a poison debuff",
    "undefined--@return: boolean _ Returns true if the Shaman has a poison debuff, false otherwise/nfunction/nBANETO_ShamanPoisonDebuffCheck/n(/n)/n"
  ],
  [
    "HasPoisonDebuffCheck [classic|retail]",
    "\nDescription: Checks if a unit has a poison debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a poison debuff, false otherwise/nfunction/nBANETO_HasPoisonDebuffCheck/n(/n)/n"
  ],
  [
    "HasMagicCheck [classic|retail]",
    "\nDescription: Checks if a unit has a magic debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a magic debuff, false otherwise/nfunction/nBANETO_HasMagicCheck/n(/n)/n"
  ],
  [
    "HasSicknessDebuffCheck [classic|retail]",
    "\nDescription: Checks if a unit has a sickness debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a sickness debuff, false otherwise/nfunction/nBANETO_HasSicknessDebuffCheck/n(/n)/n"
  ],
  [
    "HasCurseDebuffCheck [classic|retail]",
    "\nDescription: Checks if a unit has a curse debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a curse debuff, false otherwise/nfunction/nBANETO_HasCurseDebuffCheck/n(/n)/n"
  ],
  [
    "ShamanSicknessDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Shaman has a sickness debuff",
    "undefined--@return: boolean _ Returns true if the Shaman has a sickness debuff, false otherwise/nfunction/nBANETO_ShamanSicknessDebuffCheck/n(/n)/n"
  ],
  [
    "DelayMountingAndFlying [classic|retail]",
    "\nDescription: Delays mounting and flying for a specified time",
    "undefined--@arg seconds: number _ The delay in seconds/n--@return: nil/nfunction/nBANETO_DelayMountingAndFlying/n(/n)/n"
  ],
  [
    "DelayMeshPathing [classic|retail]",
    "\nDescription: Delays mesh pathing for a specified time",
    "undefined--@arg seconds: number _ The delay in seconds/n--@return: nil/nfunction/nBANETO_DelayMeshPathing/n(/n)/n"
  ],
  [
    "DelayTargeting [classic|retail]",
    "\nDescription: Delays targeting for a specified time",
    "undefined--@arg seconds: number _ The delay in seconds/n--@return: nil/nfunction/nBANETO_DelayTargeting/n(/n)/n"
  ],
  [
    "PaladinPurifyDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Paladin has a purify debuff",
    "undefined--@return: boolean _ Returns true if the Paladin has a purify debuff, false otherwise/nfunction/nBANETO_PaladinPurifyDebuffCheck/n(/n)/n"
  ],
  [
    "DruidCurseDebuffCheck [classic]",
    "\nDescription: Checks if the Druid has a curse debuff",
    "undefined--@return: boolean _ Returns true if the Druid has a curse debuff, false otherwise/nfunction/nBANETO_DruidCurseDebuffCheck/n(/n)/n"
  ],
  [
    "DruidPoisonDebuffCheck [classic]",
    "\nDescription: Checks if the Druid has a poison debuff",
    "undefined--@return: boolean _ Returns true if the Druid has a poison debuff, false otherwise/nfunction/nBANETO_DruidPoisonDebuffCheck/n(/n)/n"
  ],
  [
    "PriestCureDiseaseDebuffCheck [classic]",
    "\nDescription: Checks if the Priest can cure a disease debuff",
    "undefined--@return: boolean _ Returns true if the Priest can cure a disease debuff, false otherwise/nfunction/nBANETO_PriestCureDiseaseDebuffCheck/n(/n)/n"
  ],
  [
    "PaladinCleanseDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Paladin can cleanse a debuff",
    "undefined--@return: boolean _ Returns true if the Paladin can cleanse a debuff, false otherwise/nfunction/nBANETO_PaladinCleanseDebuffCheck/n(/n)/n"
  ],
  [
    "formatItemForHekili [classic|retail]",
    "\nDescription: Formats an item for Hekili",
    "undefined--@arg itemArg: string _ The item to be formatted/n--@return: string _ The formatted item/nfunction/nformatItemForHekili/n(/n)/n"
  ],
  [
    "isHekiliLoaded [classic|retail]",
    "\nDescription: Checks if Hekili is loaded",
    "undefined--@return: boolean _ Returns true if Hekili is loaded, false otherwise/nfunction/nisHekiliLoaded/n(/n)/n"
  ],
  [
    "Hekili [classic|retail]",
    "\nDescription: Returns the Hekili state",
    "undefined--@return: string _ Returns the Hekili state/nfunction/nBANETO_Hekili/n(/n)/n"
  ],
  [
    "GetBuffDuration [classic|retail]",
    "\nDescription: Gets the duration of a buff on a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: number _ Returns the duration of the buff in seconds/nfunction/nBANETO_GetBuffDuration/n(/n,/n)/n"
  ],
  [
    "GetDebuffDuration [classic|retail]",
    "\nDescription: Gets the duration of a debuff on a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: number _ Returns the duration of the debuff in seconds/nfunction/nBANETO_GetDebuffDuration/n(/n,/n)/n"
  ],
  [
    "HasStealableCheck [classic|retail]",
    "\nDescription: Checks if a unit has a stealable buff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a stealable buff, false otherwise/nfunction/nBANETO_HasStealableCheck/n(/n)/n"
  ],
  [
    "HasHelpfulMagicCheck [classic|retail]",
    "\nDescription: Checks if a unit has a helpful magic buff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a helpful magic buff, false otherwise/nfunction/nBANETO_HasHelpfulMagicCheck/n(/n)/n"
  ],
  [
    "HasEnrageCheck [classic|retail]",
    "\nDescription: Checks if a unit has an enrage effect",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has an enrage effect, false otherwise/nfunction/nBANETO_HasEnrageCheck/n(/n)/n"
  ],
  [
    "HasDebuffWithOwnerCheck [classic|retail]",
    "\nDescription: Checks if a unit has a specific debuff with a specific owner",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: boolean _ Returns true if the unit has the specified debuff with the specified owner, false otherwise/nfunction/nBANETO_HasDebuffWithOwnerCheck/n(/n,/n)/n"
  ],
  [
    "CountDebuffsAroundUnit [classic|retail]",
    "\nDescription: Counts the number of units around a specified unit with a specific debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg debuff: string _ The name of the debuff/n--@arg range: number _ The range to check for units with the debuff/n--@return: number _ Returns the number of units with the debuff within the specified range/nfunction/nBANETO_CountDebuffsAroundUnit/n(/n,/n,/n)/n"
  ],
  [
    "HasDebuff [classic|retail]",
    "\nDescription: Checks if a unit has a specific debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: boolean _ Returns true if the unit has the specified debuff, false otherwise/nfunction/nBANETO_HasDebuff/n(/n,/n,/n)/n"
  ],
  [
    "IsItemFood [classic|retail]",
    "\nDescription: Checks if an item is food",
    "undefined--@arg itemid: number _ The ID of the item/n--@return: boolean _ Returns true if the item is food, false otherwise/nfunction/nBANETO_IsItemFood/n(/n)/n"
  ],
  [
    "IsItemDrink [classic|retail]",
    "\nDescription: Checks if an item is drink",
    "undefined--@arg itemid: number _ The ID of the item/n--@return: boolean _ Returns true if the item is drink, false otherwise/nfunction/nBANETO_IsItemDrink/n(/n)/n"
  ],
  [
    "FindDrinkInBags [classic|retail]",
    "\nDescription: Finds drink in bags",
    "undefined--@return: bagID number bagID of the found drink, nil if not found/nfunction/nBANETO_FindDrinkInBags/n(/n)/n"
  ],
  [
    "IsWellFed [classic|retail]",
    "\nDescription: Checks if the player is well fed",
    "undefined--@return: boolean _ Returns true if the player is well fed, false otherwise/nfunction/nBANETO_IsWellFed/n(/n)/n"
  ],
  [
    "FindBuffFoodInBags [classic|retail]",
    "\nDescription: Finds buff food in bags",
    "undefined--@return: bagID number bagID of the found buff food, nil if not found/nfunction/nBANETO_FindBuffFoodInBags/n(/n)/n"
  ],
  [
    "ScanGraveyards [classic|retail]",
    "\nDescription: Scans for graveyards",
    "undefined--@return: table _ Returns a table of graveyard locations/nfunction/nBANETO_ScanGraveyards/n(/n)/n"
  ],
  [
    "GetClosestGraveyard [classic|retail]",
    "\nDescription: Gets the closest graveyard",
    "undefined--@return: string _ Returns the location of the closest graveyard/nfunction/nBANETO_GetClosestGraveyard/n(/n)/n"
  ],
  [
    "FindFoodInBags [classic|retail]",
    "\nDescription: Finds food in bags",
    "undefined--@return: bagID number bagID of the found food, nil if not found/nfunction/nBANETO_FindFoodInBags/n(/n)/n"
  ],
  [
    "GetFoodAmountInBags [classic|retail]",
    "\nDescription: Gets the amount of food in bags",
    "undefined--@return: number _ Returns the amount of food in bags/nfunction/nBANETO_GetFoodAmountInBags/n(/n)/n"
  ],
  [
    "HttpGETRequestCustom [classic|retail]",
    "\nDescription: Sends a HTTP GET request to a specified URL and handles the response with a specified callback handler",
    "undefined--@arg url: string _ The URL to send the request to/nfunction/n-- The callback handler to process the response/nreturn/n:/nnil/n]/n]/n--/nfunction/nHttpGETRequestCustom/n(/n,/n)/n"
  ],
  [
    "HttpGet [classic|retail]",
    "\nDescription: Sends a HTTP GET request to a specified URL and handles the response with a specified callback function",
    "undefined--@arg url1: string _ The URL to send the request to/nfunction/nreturn/n:/nnil/n]/n]/n--/nfunction/nBANETO_HttpGet/n(/n,/n)/n"
  ],
  [
    "HttpPost [classic|retail]",
    "\nDescription: Sends a HTTP POST request to a specified URL with a specified payload and handles the response with a specified callback function",
    "undefined--@arg url1: string _ The URL to send the request to/n--@arg payload: json _ The payload to send with the request/nfunction/nreturn/n:/nnil/n]/n]/n--/nfunction/nBANETO_HttpPost/n(/n,/n,/n)/n"
  ],
  [
    "HttpPut [classic|retail]",
    "\nDescription: Sends a HTTP PUT request to a specified URL with a specified payload and handles the response with a specified callback function",
    "undefined--@arg url1: string _ The URL to send the request to/n--@arg payload: json _ The payload to send with the request/nfunction/nreturn/n:/nnil/n]/n]/n--/nfunction/nBANETO_HttpPut/n(/n,/n,/n)/n"
  ],
  [
    "HttpRequestCustom [classic|retail]",
    "\nDescription: Sends a HTTP request to a specified URL",
    "undefined--@arg url: string _ The URL to send the request to/n--@return: string _ The response from the HTTP request/nfunction/nHttpRequestCustom/n(/n)/n"
  ],
  [
    "GoAnon [classic|retail]",
    "\nDescription: Hides characterspecific information so you can take screenshots or record videos without exposing your account to risk.",
    "undefined--@return: nil/nfunction/nBANETO_GoAnon/n(/n)/n"
  ],
  [
    "LoadOneZeroProfilelist [classic|retail]",
    "\nDescription: Loads the OneZero profile list",
    "undefined--@return: table _ Returns a table of the OneZero profiles/nfunction/nBANETO_LoadOneZeroProfilelist/n(/n)/n"
  ],
  [
    "IsOzDbAllowed [classic|retail]",
    "\nDescription: Checks if the Oz database is allowed",
    "undefined--@return: boolean _ Returns true if the Oz database is allowed, false otherwise/nfunction/nBANETO_IsOzDbAllowed/n(/n)/n"
  ],
  [
    "IsOzAllowed [classic|retail]",
    "\nDescription: Checks if Oz is allowed",
    "undefined--@return: boolean _ Returns true if Oz is allowed, false otherwise/nfunction/nBANETO_IsOzAllowed/n(/n)/n"
  ],
  [
    "LoadOneZeroDb [classic|retail]",
    "\nDescription: Loads the OneZero database",
    "undefined--@return: table _ Returns a table of the OneZero database/nfunction/nBANETO_LoadOneZeroDb/n(/n)/n"
  ],
  [
    "LoadOneZeroAuth [classic|retail]",
    "\nDescription: Loads the OneZero authentication",
    "undefined--@return: string _ Returns the OneZero authentication string/nfunction/nBANETO_LoadOneZeroAuth/n(/n)/n"
  ],
  [
    "GetDrinkAmountInBags [classic|retail]",
    "\nDescription: Retrieves the amount of drink items in bags.",
    "undefined--@return: number The number of drink items in bags./nfunction/nBANETO_GetDrinkAmountInBags/n(/n)/n"
  ],
  [
    "GetBestAmmoType [classic|retail]",
    "\nDescription: Determines the best ammo type available.",
    "undefined--@return: string The name of the best ammo type./nfunction/nBANETO_GetBestAmmoType/n(/n)/n"
  ],
  [
    "EquipBestAmmoType [classic|retail]",
    "\nDescription: Equips the best ammo type available.",
    "undefined--@return: nil/nfunction/nBANETO_EquipBestAmmoType/n(/n)/n"
  ],
  [
    "ForceQuit [classic|retail]",
    "\nDescription: Forces the game client to quit.",
    "undefined--@return: nil/nfunction/nBANETO_ForceQuit/n(/n)/n"
  ],
  [
    "GetAmmoAmountInBags [classic|retail]",
    "\nDescription: Retrieves the amount of ammo in bags.",
    "undefined--@return: number The number of ammo items in bags./nfunction/nBANETO_GetAmmoAmountInBags/n(/n)/n"
  ],
  [
    "UnitHealth [classic|retail]",
    "\nDescription: Retrieves the health of a specific unit in percentage.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The health of the unit./nfunction/nBANETO_UnitHealth/n(/n)/n"
  ],
  [
    "UnitHealthRaw [classic|retail]",
    "\nDescription: Retrieves the health of a specific unit.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The health of the unit./nfunction/nBANETO_UnitHealthRaw/n(/n)/n"
  ],
  [
    "UnitManaPercent [classic|retail]",
    "\nDescription: Retrieves the percentage of mana of a specific unit. Always returns 100 for class 1 and class 4.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The percentage of mana of the unit./nfunction/nBANETO_UnitManaPercent/n(/n)/n"
  ],
  [
    "UnitMana [classic|retail]",
    "\nDescription: Retrieves the mana of a specific unit in percentage.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The mana of the unit./nfunction/nBANETO_UnitMana/n(/n)/n"
  ],
  [
    "GetObjectWithCoordinates [classic|retail]",
    "\nDescription: Retrieves an object with specific coordinates.",
    "undefined--@arg x: number, The X_coordinate of the object./n--@arg y: number, The Y_coordinate of the object./n--@arg z: number, The Z_coordinate of the object./n--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithCoordinates/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetObjectWithIdTiny [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID in close proximity.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdTiny/n(/n)/n"
  ],
  [
    "GetObjectWithIdClose [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID in close proximity.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdClose/n(/n)/n"
  ],
  [
    "GetObjectWithIdMedium [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID in medium proximity.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdMedium/n(/n)/n"
  ],
  [
    "GetObjectWithIdIncludingBlacklistCheck [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID, includes blacklist check.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdIncludingBlacklistCheck/n(/n)/n"
  ],
  [
    "GetObjectWithId [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithId/n(/n)/n"
  ],
  [
    "CheckMammothSpammer [classic|retail]",
    "\nDescription: Checks for Mammoth spammers.",
    "undefined--@return: boolean True if a spammer is detected, otherwise false./nfunction/nBANETO_CheckMammothSpammer/n(/n)/n"
  ],
  [
    "IsInsideDungeon [classic]",
    "\nDescription: Checks if the player is inside a dungeon.",
    "undefined--@return: boolean True if the player is inside a dungeon, otherwise false./nfunction/nBANETO_IsInsideDungeon/n(/n)/n"
  ],
  [
    "TestHs [classic]",
    "\nDescription: Tests the hearthstone.",
    "undefined--@return: nil/nfunction/nBANETO_TestHs/n(/n)/n"
  ],
  [
    "MakesHsUsageSense [classic|retail]",
    "\nDescription: Checks if using hearthstone makes sense at the moment.",
    "undefined--@return: boolean True if using the hearthstone makes sense, otherwise false./nfunction/nBANETO_MakesHsUsageSense/n(/n)/n"
  ],
  [
    "GetObjectLocationWithId [classic|retail]",
    "\nDescription: Retrieves the location of an object with a specific ID.",
    "undefined--@arg id: string, The ID of the object./n--@return: x number The X_coordinate of the object./nfunction/nGetObjectLocationWithId/n(/n)/n"
  ],
  [
    "IsMailboxObject [classic|retail]",
    "\nDescription: Checks if an object is a mailbox.",
    "undefined--@arg id: string, The ID of the object./n--@return: boolean True if the object is a mailbox, otherwise false./nfunction/nBANETO_IsMailboxObject/n(/n)/n"
  ],
  [
    "MailboxInteract [classic|retail]",
    "\nDescription: Interacts with a mailbox.",
    "undefined--@return: nil/nfunction/nBANETO_MailboxInteract/n(/n)/n"
  ],
  [
    "GetSkillLineIndexWithTradeName [classic]",
    "\nDescription: Retrieves the index of a skill line with a specific trade name.",
    "undefined--@arg tradename: string, The name of the trade./n--@return: number The index of the skill line./nfunction/nBANETO_GetSkillLineIndexWithTradeName/n(/n)/n"
  ],
  [
    "GetSkillLineIndexWithItemId [classic|retail]",
    "\nDescription: Retrieves the index of a skill line with a specific item ID.",
    "undefined--@arg itemid: string, The ID of the item./n--@return: number The index of the skill line./nfunction/nBANETO_GetSkillLineIndexWithItemId/n(/n)/n"
  ],
  [
    "GetAcherusEtage [classic]",
    "\nDescription: Determines the current floor in Acherus.",
    "undefined--@return: number The current floor./nfunction/nBANETO_GetAcherusEtage/n(/n)/n"
  ],
  [
    "MoveAcherusEtage [classic]",
    "\nDescription: Moves between floors in Acherus.",
    "undefined--@arg upOrDown: string, Direction to move (\"up\" or \"down\")./n--@return: nil/nfunction/nBANETO_MoveAcherusEtage/n(/n)/n"
  ],
  [
    "Craft [classic|retail]",
    "\nDescription: Crafts an item with a specific index.",
    "undefined--@arg index: number, The index of the item to craft./n--@return: nil/nfunction/nBANETO_Craft/n(/n)/n"
  ],
  [
    "UseContainerItem [classic|retail]",
    "\nDescription: Uses an item from a bag.",
    "undefined--@arg i: bag Index/n--@arg z: slot/nfunction/nBANETO_UseContainerItem/n(/n,/n)/n"
  ],
  [
    "GetSpellCooldown [classic|retail]",
    "\nDescription: Get a spell's cooldown in seconds.",
    "undefined--@arg spellid: number/n--@return: duration/nfunction/nBANETO_GetSpellCooldown/n(/n)/n"
  ],
  [
    "StartPetAttackWarlock [classic]",
    "\nDescription: Instruct your Warlock pet to attack.",
    "undefinedfunction/nBANETO_StartPetAttackWarlock/n(/n)/n"
  ],
  [
    "StartPetAttack [classic]",
    "\nDescription: Instruct your pet to attack.",
    "undefinedfunction/nBANETO_StartPetAttack/n(/n)/n"
  ],
  [
    "DelayStateTick [classic|retail]",
    "\nDescription: Delay the next state tick by seconds.",
    "undefined--@arg seconds: number/nfunction/nBANETO_DelayStateTick/n(/n)/n"
  ],
  [
    "HunterStopShot [classic]",
    "\nDescription: Stop auto casting spells.",
    "undefined--@arg name: string: name of spell to stop/nfunction/nBANETO_HunterStopShot/n(/n)/n"
  ],
  [
    "GetBanetoProfileType [classic]",
    "\nDescription: Returns the type of the currently loaded profile.",
    "undefined--@return: string/nfunction/nGetBanetoProfileType/n(/n)/n"
  ],
  [
    "PrintPlugin [classic|retail]",
    "\nDescription: Print something to the chat frame denoting a plugin.",
    "undefined--@arg message: string/nfunction/nBANETO_PrintPlugin/n(/n)/n"
  ],
  [
    "GetSessionTime [classic|retail]",
    "\nDescription: Returns the number of seconds the bot has been loaded.",
    "undefined--@return: number/nfunction/nBANETO_GetSessionTime/n(/n)/n"
  ],
  [
    "reloadUi [classic|retail]",
    "\nDescription: Reload the UI.",
    "undefinedfunction/nreloadUi/n(/n)/n"
  ],
  [
    "LoadOfficialPaid [classic|retail]",
    "\nDescription: Load an official (paid) profile",
    "undefined--@arg packName: string/n--@arg profile: string/nfunction/nBANETO_LoadOfficialPaid/n(/n,/n)/n"
  ],
  [
    "GetPlayerCorpsePosition [classic|retail]",
    "\nDescription: Get the player's corpse position",
    "undefined--@return: x number the x coordinate of the player's corpse/nfunction/nBANETO_GetPlayerCorpsePosition/n(/n)/n"
  ],
  [
    "GetState [classic|retail]",
    "\nDescription: Returns the state the bot is currently in.",
    "undefined--@return: string/nfunction/nBANETO_GetState/n(/n)/n"
  ],
  [
    "IsFlyingAscendNeeded [classic|retail]",
    "\nDescription: Checks if ascending flight is required for the player's current position.",
    "undefined--@return: boolean: Returns true if ascending flight is needed, false otherwise./nfunction/nBANETO_IsFlyingAscendNeeded/n(/n)/n"
  ],
  [
    "GetZoneId [classic|retail]",
    "\nDescription: Return the zone's ID.",
    "undefined--@return: number/nfunction/nBANETO_GetZoneId/n(/n)/n"
  ],
  [
    "GetMapId [classic|retail]",
    "\nDescription: Return the map's ID.",
    "undefined--@return: ID number the map ID/nfunction/nBANETO_GetMapId/n(/n)/n"
  ],
  [
    "StopMovementWithoutDeletingPath [classic|retail]",
    "\nDescription: Stop movement but keep the path available.",
    "undefinedfunction/nBANETO_StopMovementWithoutDeletingPath/n(/n)/n"
  ],
  [
    "CanUseRepairBotInsideDungeon [classic]",
    "\nDescription: Check if the bot can use a repair bot inside a dungeon.",
    "undefined--@return: boolean/nfunction/nBANETO_CanUseRepairBotInsideDungeon/n(/n)/n"
  ],
  [
    "HasRepBotItem [classic]",
    "\nDescription: Check to see if the player has a repair bot item.",
    "undefined--@return: boolean/nfunction/nBANETO_HasRepBotItem/n(/n)/n"
  ],
  [
    "FindRepBot [classic]",
    "\nDescription: Finds the closest repair bot to the player",
    "undefined--@return: object/nfunction/nBANETO_FindRepBot/n(/n)/n"
  ],
  [
    "SetBanetoTarget [classic|retail]",
    "\nDescription: Set the BANETO_TARGET variable, anytime you change targets (@see UnlockedTargetUnit) you should call this function.",
    "undefined--@arg unit: string/nfunction/nBANETO_SetBanetoTarget/n(/n)/n"
  ],
  [
    "StopMovement [classic|retail]",
    "\nDescription: Stop all movement and clear path.",
    "undefinedfunction/nBANETO_StopMovement/n(/n)/n"
  ],
  [
    "LoadCustomTravelProfile [classic|retail]",
    "\nDescription: Load a custom travel profile",
    "undefined--@arg profileName: string/nfunction/nBANETO_LoadCustomTravelProfile/n(/n)/n"
  ],
  [
    "IsPackQuester [classic|retail]",
    "\nDescription: Is the packName a Quest pack.",
    "undefined--@arg packName: string/n--@return: boolean/nfunction/nBANETO_IsPackQuester/n(/n)/n"
  ],
  [
    "GetFirstProfileOfPack [classic|retail]",
    "\nDescription: Get the first profile of a given pack.",
    "undefined--@arg packName: string/n--@return: string/nfunction/nBANETO_GetFirstProfileOfPack/n(/n)/n"
  ],
  [
    "GetTarget [classic|retail]",
    "\nDescription: Return the current baneto internal target, do not confuse it with your wow target.",
    "undefined--@return: object/nfunction/nBANETO_GetTarget/n(/n)/n"
  ],
  [
    "IsPaidPackInstalled [classic|retail]",
    "\nDescription: Is a paid pack already installed?",
    "undefined--@arg packName: string/n--@return: boolean/nfunction/nBANETO_IsPaidPackInstalled/n(/n)/n"
  ],
  [
    "InstallPaidPack [classic|retail]",
    "\nDescription: Install a paid pack",
    "undefined--@arg packName: string/nfunction/nBANETO_InstallPaidPack/n(/n)/n"
  ],
  [
    "LoadTravelProfile [classic|retail]",
    "\nDescription: Load a predefined travel profile.",
    "undefined--@arg name: string/nfunction/nBANETO_LoadTravelProfile/n(/n)/n"
  ],
  [
    "GameObjectType [classic|retail]",
    "\nDescription: Get a gameObject's type",
    "undefined--@arg gameObject: GameObject/n--@return: number/nfunction/nBANETO_GameObjectType/n(/n)/n"
  ],
  [
    "LoadBgProfile [classic|retail]",
    "\nDescription: Load a battleground profile.",
    "undefined--@arg name: string/nfunction/nBANETO_LoadBgProfile/n(/n)/n"
  ],
  [
    "IsTrainStateRequired [classic|retail]",
    "\nDescription: Check if the character should visit a class trainer.",
    "undefined--@return: boolean/nfunction/nBANETO_IsTrainStateRequired/n(/n)/n"
  ],
  [
    "IsProfTrainStateRequired [classic|retail]",
    "\nDescription: Check if the character should visit a profession trainer.",
    "undefined--@return: boolean/nfunction/nBANETO_IsProfTrainStateRequired/n(/n)/n"
  ],
  [
    "AreWeDazed [classic|retail]",
    "\nDescription: Check if the character is dazed.",
    "undefined--@return: boolean/nfunction/nBANETO_AreWeDazed/n(/n)/n"
  ],
  [
    "IsReviveSecure [classic|retail]",
    "\nDescription: Check if it's safe to revive.",
    "undefined--@return: boolean/nfunction/nBANETO_IsReviveSecure/n(/n)/n"
  ],
  [
    "GetRandomPointOnCircleNEW [classic|retail]",
    "\nDescription: Get a random point on a specified circle",
    "undefined--@arg centerX: number/n--@arg centerY: number/n--@arg centerZ: number/n--@arg radius: number/n--@return: x number the x coordinate of the generated point/nfunction/nBANETO_GetRandomPointOnCircleNEW/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetRandomPointInCircleNEW [classic|retail]",
    "\nDescription: Get a random point in a specified circle",
    "undefined--@arg centerX: number/n--@arg centerY: number/n--@arg centerZ: number/n--@arg radius: number/n--@return: x number the x coordinate of the generated point/nfunction/nBANETO_GetRandomPointInCircleNEW/n(/n,/n,/n,/n)/n"
  ],
  [
    "DebugProfessionSkills [classic]",
    "\nDescription: Outputs debugging information related to the player's professions.",
    "undefinedfunction/nBANETO_DebugProfessionSkills/n(/n)/n"
  ],
  [
    "DistanceToProfileIsOkay [classic]",
    "\nDescription: Checks if the current player's distance to the set profile is within an acceptable range.",
    "undefined--@return: boolean: Returns true if the distance is acceptable, false otherwise./nfunction/nBANETO_DistanceToProfileIsOkay/n(/n)/n"
  ],
  [
    "StartStop [classic|retail]",
    "\nDescription: Toggle Baneto operation, starting or stopping as required.",
    "undefinedfunction/nBANETO_StartStop/n(/n)/n"
  ],
  [
    "GetCurrentCenterIndex [classic|retail]",
    "\nDescription: Get the index of the currently active spot in the profile.",
    "undefined--@return: number: The index of the current spot./nfunction/nBANETO_GetCurrentCenterIndex/n(/n)/n"
  ],
  [
    "Start [classic|retail]",
    "\nDescription: Start Baneto bot.",
    "undefinedfunction/nBANETO_Start/n(/n)/n"
  ],
  [
    "IsLastProfileATaskInTaskmanager [classic|retail]",
    "\nDescription: Check if the last loaded profile was part of a task in the task manager.",
    "undefined--@return: boolean: Returns true if the last profile was a task, false otherwise./nfunction/nBANETO_IsLastProfileATaskInTaskmanager/n(/n)/n"
  ],
  [
    "StartTaskmanager [classic|retail]",
    "\nDescription: Initiate task manager.",
    "undefinedfunction/nBANETO_StartTaskmanager/n(/n)/n"
  ],
  [
    "GetCurrentTaskmanagerProfile [classic|retail]",
    "\nDescription: Get the name of the currently active task manager profile.",
    "undefined--@return: string: The name of the current task manager profile./nfunction/nBANETO_GetCurrentTaskmanagerProfile/n(/n)/n"
  ],
  [
    "RemoveTaskByIndex [classic|retail]",
    "\nDescription: Remove a task from the task manager by its index.",
    "undefined--@arg index: number: The index of the task to be removed./nfunction/nBANETO_RemoveTaskByIndex/n(/n)/n"
  ],
  [
    "VisualizeTask [classic|retail]",
    "\nDescription: Visualize a task for a specified duration.",
    "undefined--@arg name: string: The name of the task to visualize./n--@arg duration: number: The duration for which to visualize the task (in seconds)./nfunction/nBANETO_VisualizeTask/n(/n,/n)/n"
  ],
  [
    "AddTask [classic|retail]",
    "\nDescription: Add a task to the task manager.",
    "undefined--@arg taskType: string: The type of the task./n--@arg taskDuration: number: The duration of the task (in seconds)./n--@arg fileName: string: The name of the task file./n--@arg isLocal: boolean: If true, the task file is local. If false, it's remote./nfunction/nBANETO_AddTask/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetCenterIndexInFlyingPath [classic|retail]",
    "\nDescription: Get the index of the center in the current flying path.",
    "undefined--@arg path: table: The flying path as an array of coordinates./n--@return: number: The index of the center in the flying path./nfunction/nBANETO_GetCenterIndexInFlyingPath/n(/n)/n"
  ],
  [
    "GetCenterIndexInPath [classic|retail]",
    "\nDescription: Get the index of the center in the current path.",
    "undefined--@arg path: table: The path as an array of coordinates./n--@return: number: The index of the center in the path./nfunction/nBANETO_GetCenterIndexInPath/n(/n)/n"
  ],
  [
    "GetCenterIndexForPath [classic|retail]",
    "\nDescription: Get the index of the center for the specified path type.",
    "undefined--@arg type: string: The type of path./n--@return: number: The index of the center for the specified path./nfunction/nBANETO_GetCenterIndexForPath/n(/n)/n"
  ],
  [
    "GetClosestPathIndex [classic|retail]",
    "\nDescription: Get the closest index of the path to the player's current position.",
    "undefined--@return: number: The closest index of the path./nfunction/nBANETO_GetClosestPathIndex/n(/n)/n"
  ],
  [
    "GetCenterIndexForGrinder [classic|retail]",
    "\nDescription: Get the index of the center for the current grinder.",
    "undefined--@return: number: The index of the center for the grinder./nfunction/nBANETO_GetCenterIndexForGrinder/n(/n)/n"
  ],
  [
    "FlyingPathDeleter [classic|retail]",
    "\nDescription: Delete the current flying path.",
    "undefinedfunction/nBANETO_FlyingPathDeleter/n(/n)/n"
  ],
  [
    "GroundPathDeleter [classic|retail]",
    "\nDescription: Delete the current ground path.",
    "undefinedfunction/nBANETO_GroundPathDeleter/n(/n)/n"
  ],
  [
    "TurnStop [classic|retail]",
    "\nDescription: Stop turning.",
    "undefinedfunction/nBANETO_TurnStop/n(/n)/n"
  ],
  [
    "ResetFlyingPath [classic]",
    "\nDescription: Reset the current flying path.",
    "undefinedfunction/nBANETO_ResetFlyingPath/n(/n)/n"
  ],
  [
    "Stop [classic|retail]",
    "\nDescription: Stop Baneto operation.",
    "undefinedfunction/nBANETO_Stop/n(/n)/n"
  ],
  [
    "GetWorstEnemyInBg [classic|retail]",
    "\nDescription: Get the favorable enemy in the battleground.",
    "undefined--@return: string: The name of the favorable enemy./nfunction/nBANETO_GetWorstEnemyInBg/n(/n)/n"
  ],
  [
    "GetBestFriendInBg [classic|retail]",
    "\nDescription: Get the most favorable friend in the battleground.",
    "undefined--@return: string: The name of the most favorable friend./nfunction/nBANETO_GetBestFriendInBg/n(/n)/n"
  ],
  [
    "IsLastProfileBattleground [classic|retail]",
    "\nDescription: Check if the last loaded profile was for a battleground.",
    "undefined--@return: boolean: Returns true if the last profile was for a battleground, false otherwise./nfunction/nBANETO_IsLastProfileBattleground/n(/n)/n"
  ],
  [
    "IsLastProfileDungeon [classic|retail]",
    "\nDescription: Check if the last loaded profile was for a dungeon.",
    "undefined--@return: boolean: Returns true if the last profile was for a dungeon, false otherwise./nfunction/nBANETO_IsLastProfileDungeon/n(/n)/n"
  ],
  [
    "IsLastProfileQuesting [classic|retail]",
    "\nDescription: Check if the last loaded profile was for questing.",
    "undefined--@return: boolean: Returns true if the last profile was for questing, false otherwise./nfunction/nBANETO_IsLastProfileQuesting/n(/n)/n"
  ],
  [
    "IsLastProfileEternal [classic|retail]",
    "\nDescription: Check if the last loaded profile was for an eternal event.",
    "undefined--@return: boolean: Returns true if the last profile was for an eternal event, false otherwise./nfunction/nBANETO_IsLastProfileEternal/n(/n)/n"
  ],
  [
    "IsLastProfileGathering [classic|retail]",
    "\nDescription: Check if the last loaded profile was for gathering.",
    "undefined--@return: boolean: Returns true if the last profile was for gathering, false otherwise./nfunction/nBANETO_IsLastProfileGathering/n(/n)/n"
  ],
  [
    "IsLastProfileTraveling [classic|retail]",
    "\nDescription: Check if the last loaded profile was for traveling.",
    "undefined--@return: boolean: Returns true if the last profile was for traveling, false otherwise./nfunction/nBANETO_IsLastProfileTraveling/n(/n)/n"
  ],
  [
    "IsLastProfileGold [classic|retail]",
    "\nDescription: Check if the last loaded profile was for gold farming.",
    "undefined--@return: boolean: Returns true if the last profile was for gold farming, false otherwise./nfunction/nBANETO_IsLastProfileGold/n(/n)/n"
  ],
  [
    "IsNearQuestSpots [classic]",
    "\nDescription: Check if the player is near quest spots.",
    "undefined--@return: boolean: Returns true if the player is near quest spots, false otherwise./nfunction/nBANETO_IsNearQuestSpots/n(/n)/n"
  ],
  [
    "GetLastProfile [classic|retail]",
    "\nDescription: Get the last loaded profile.",
    "undefined--@return: string: The name of the last loaded profile./nfunction/nBANETO_GetLastProfile/n(/n)/n"
  ],
  [
    "ReloadLastProfile [classic|retail]",
    "\nDescription: Reload the last loaded profile.",
    "undefinedfunction/nBANETO_ReloadLastProfile/n(/n)/n"
  ],
  [
    "ReloadAndStartLastProfile [classic|retail]",
    "\nDescription: Reload and start the last loaded profile.",
    "undefinedfunction/nBANETO_ReloadAndStartLastProfile/n(/n)/n"
  ],
  [
    "Customer [classic|retail]",
    "\nDescription: Return the Baneto username.",
    "undefined--@return: string: The username of the Baneto customer./nfunction/nBANETO_Customer/n(/n)/n"
  ],
  [
    "AddItemToNeverSell [classic|retail]",
    "\nDescription: Add an item to the list that should never be sold.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToNeverSell/n(/n)/n"
  ],
  [
    "IsItemInUsageList [classic|retail]",
    "\nDescription: Check if the specified item is in the usage list.",
    "undefined--@arg itemname: string: The name of the item./n--@return: boolean: Returns true if the item is in the usage list, false otherwise./nfunction/nBANETO_IsItemInUsageList/n(/n)/n"
  ],
  [
    "RemoveItemFromUsageList [classic|retail]",
    "\nDescription: Remove an item from the usage list.",
    "undefined--@arg itemname: string: The name of the item to be removed./nfunction/nBANETO_RemoveItemFromUsageList/n(/n)/n"
  ],
  [
    "VisualizeUsageList [classic|retail]",
    "\nDescription: Display the items in the usage list.",
    "undefinedfunction/nBANETO_VisualizeUsageList/n(/n)/n"
  ],
  [
    "AddItemToUsageList [classic|retail]",
    "\nDescription: Add an item to the usage list.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToUsageList/n(/n)/n"
  ],
  [
    "AddItemToDeleteList [classic|retail]",
    "\nDescription: Add an item to the list that should automatically be deleted.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToDeleteList/n(/n)/n"
  ],
  [
    "AddItemToNeverDisenchant [classic|retail]",
    "\nDescription: Add an item to the list that should never be disenchanted.",
    "undefined--@arg itemname: string: The name of the item to be added./nfunction/nBANETO_AddItemToNeverDisenchant/n(/n)/n"
  ],
  [
    "AddItemToAlwaysMail [classic|retail]",
    "\nDescription: Add an item to the list that should always be mailed.",
    "undefined--@arg itemname: string/nfunction/nBANETO_AddItemToAlwaysMail/n(/n)/n"
  ],
  [
    "AddItemToNeverMail [classic|retail]",
    "\nDescription: Add an item to the list that should never be mailed.",
    "undefined--@arg itemname: string/nfunction/nBANETO_AddItemToNeverMail/n(/n)/n"
  ],
  [
    "IsEntryInGlobalBlacklist [classic|retail]",
    "\nDescription: Checks whether an ID is in the global blacklist from the user's blacklist tab.",
    "undefined--@arg id: <value>/n--@return: boolean/nfunction/nBANETO_IsEntryInGlobalBlacklist/n(/n)/n"
  ],
  [
    "RemoveItemFromNeverSell [classic|retail]",
    "\nDescription: Remove an item from the list that should never be sold.",
    "undefined--@arg itemname: string/nfunction/nBANETO_RemoveItemFromNeverSell/n(/n)/n"
  ],
  [
    "RemoveItemFromDeleteList [classic|retail]",
    "\nDescription: Remove an item from the list that should be deleted.",
    "undefined--@arg itemname: string/nfunction/nBANETO_RemoveItemFromDeleteList/n(/n)/n"
  ],
  [
    "RemoveItemFromNeverDisenchant [classic|retail]",
    "\nDescription: Remove an item from the list that should never be disenchanted.",
    "undefined--@arg itemname: string/nfunction/nBANETO_RemoveItemFromNeverDisenchant/n(/n)/n"
  ],
  [
    "IsEntryInGlobalObjectlist [classic|retail]",
    "\nDescription: Check if an entry exists in the global object list.",
    "undefined--@arg id: number: The ID of the entry to be checked./n--@return: boolean: Returns true if the entry exists in the global object list, false otherwise./nfunction/nBANETO_IsEntryInGlobalObjectlist/n(/n)/n"
  ],
  [
    "VisualizeGlobalObjectList [classic|retail]",
    "\nDescription: Display the global object list.",
    "undefinedfunction/nBANETO_VisualizeGlobalObjectList/n(/n)/n"
  ],
  [
    "RemoveCustomObjectIDGlobal [classic|retail]",
    "\nDescription: Remove a custom object ID from the global list.",
    "undefined--@arg id: number: The ID of the object to be removed./nfunction/nBANETO_RemoveCustomObjectIDGlobal/n(/n)/n"
  ],
  [
    "DefineCustomObjectIDGlobal [classic|retail]",
    "\nDescription: Add a custom object ID to the global list.",
    "undefined--@arg id: number: The ID of the object to be added./nfunction/nBANETO_DefineCustomObjectIDGlobal/n(/n)/n"
  ],
  [
    "RemoveEntryFromGlobalMobIdBlacklist [classic|retail]",
    "\nDescription: Remove an entry from the global mob ID blocklist.",
    "undefined--@arg id: number: The ID of the mob to be removed from the blocklist./nfunction/nBANETO_RemoveEntryFromGlobalMobIdBlacklist/n(/n)/n"
  ],
  [
    "RemoveItemFromNeverMail [classic|retail]",
    "\nDescription: Remove an item from the list that should never be mailed.",
    "undefined--@arg itemname: string: The name of the item to be removed./nfunction/nBANETO_RemoveItemFromNeverMail/n(/n)/n"
  ],
  [
    "RemoveItemFromAlwaysMail [classic|retail]",
    "\nDescription: Remove an item from the list that should always be mailed.",
    "undefined--@arg itemname: string: The name of the item to be removed./nfunction/nBANETO_RemoveItemFromAlwaysMail/n(/n)/n"
  ],
  [
    "ClearUserList [classic|retail]",
    "\nDescription: Clear a user list.",
    "undefined--@arg listname: string: The name of the list to be cleared./n--@arg force: boolean: Whether to force clear the list./nfunction/nBANETO_ClearUserList/n(/n,/n)/n"
  ],
  [
    "VisualizeGlobalMobIdBlacklist [classic|retail]",
    "\nDescription: Display the global mob ID blacklist.",
    "undefinedfunction/nBANETO_VisualizeGlobalMobIdBlacklist/n(/n)/n"
  ],
  [
    "VisualizeDoNotSellList [classic|retail]",
    "\nDescription: Display the \"Do Not Sell\" list.",
    "undefinedfunction/nBANETO_VisualizeDoNotSellList/n(/n)/n"
  ],
  [
    "VisualizeDeleteList [classic|retail]",
    "\nDescription: Display the delete list.",
    "undefinedfunction/nBANETO_VisualizeDeleteList/n(/n)/n"
  ],
  [
    "VisualizeDoNotDisenchantList [classic|retail]",
    "\nDescription: Display the \"Do Not Disenchant\" list.",
    "undefinedfunction/nBANETO_VisualizeDoNotDisenchantList/n(/n)/n"
  ],
  [
    "VisualizeDoNotMailList [classic|retail]",
    "\nDescription: Display the \"Do Not Mail\" list.",
    "undefinedfunction/nBANETO_VisualizeDoNotMailList/n(/n)/n"
  ],
  [
    "VisualizeAlwaysMailList [classic|retail]",
    "\nDescription: Display the \"Always Mail\" list.",
    "undefinedfunction/nBANETO_VisualizeAlwaysMailList/n(/n)/n"
  ],
  [
    "SpellbookDebug [classic|retail]",
    "\nDescription: Output debugging information for the spellbook.",
    "undefinedfunction/nBANETO_SpellbookDebug/n(/n)/n"
  ],
  [
    "CastSpellOnGround [classic|retail]",
    "\nDescription: Cast a spell on the ground near a specified unit.",
    "undefined--@arg spellid: number: The ID of the spell to be cast./n--@arg unit: unit: The unit near which to cast the spell./nfunction/nBANETO_CastSpellOnGround/n(/n,/n)/n"
  ],
  [
    "IsSpellKnownNoSettingsCheck [classic]",
    "\nDescription: Check if a spell is known by the character without checking the settings.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is known, false otherwise./nfunction/nBANETO_IsSpellKnownNoSettingsCheck/n(/n)/n"
  ],
  [
    "IsSpellKnown [classic|retail]",
    "\nDescription: Check if a spell is known by the character.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is known, false otherwise./nfunction/nBANETO_IsSpellKnown/n(/n)/n"
  ],
  [
    "IsSpellUsableNoSettingsCheck [classic]",
    "\nDescription: Check if a spell is usable without checking the settings.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is usable, false otherwise./nfunction/nBANETO_IsSpellUsableNoSettingsCheck/n(/n)/n"
  ],
  [
    "BlockSpellTemp [classic]",
    "\nDescription: Temporarily block a spell.",
    "undefined--@arg spellid: number: The ID of the spell to be blocked./n--@arg seconds: number: The duration for which the spell should be blocked./nfunction/nBANETO_BlockSpellTemp/n(/n,/n)/n"
  ],
  [
    "IsSpellUsable [classic|retail]",
    "\nDescription: Check if a spell is usable.",
    "undefined--@arg spellid: number: The ID of the spell to be checked./n--@return: boolean: Returns true if the spell is usable, false otherwise./nfunction/nBANETO_IsSpellUsable/n(/n)/n"
  ],
  [
    "CanIBuffThisUnit [classic]",
    "\nDescription: Check if a specified unit can be buffed by the player.",
    "undefined--@arg unit: unit: The unit to be checked./n--@return: boolean: Returns true if the unit can be buffed, false otherwise./nfunction/nBANETO_CanIBuffThisUnit/n(/n)/n"
  ],
  [
    "FriendNeedsBuffScanner [classic]",
    "\nDescription: Scans whether a friend character needs buffing",
    "undefined--@return: boolean/nfunction/nBANETO_FriendNeedsBuffScanner/n(/n)/n"
  ],
  [
    "IsFriendGettingAttackedDungeon [classic]",
    "\nDescription: Checks if a friend is being attacked within a dungeon",
    "undefined--@return: boolean/nfunction/nBANETO_IsFriendGettingAttackedDungeon/n(/n)/n"
  ],
  [
    "SelectFriendLowHpDungeon [classic]",
    "\nDescription: Selects a friend with low HP within a dungeon",
    "undefined--@return: boolean/nfunction/nBANETO_SelectFriendLowHpDungeon/n(/n)/n"
  ],
  [
    "PlayerHasMana [classic]",
    "\nDescription: Checks if the player has sufficient mana",
    "undefined--@return: boolean/nfunction/nBANETO_PlayerHasMana/n(/n)/n"
  ],
  [
    "IsPlayerRooted [classic|retail]",
    "\nDescription: Checks if the player is rooted or unable to move",
    "undefined--@return: boolean/nfunction/nBANETO_IsPlayerRooted/n(/n)/n"
  ],
  [
    "UbrsThrowPull [classic]",
    "\nDescription: Initiates a ranged pull in UBRS at the specified coordinates within a certain radius",
    "undefined--@arg x: number/n--@arg y: number/n--@arg z: number/n--@arg radius: number/nfunction/nBANETO_UbrsThrowPull/n(/n,/n,/n,/n)/n"
  ],
  [
    "RangePullThrow [classic]",
    "\nDescription: Initiates a ranged pull throw",
    "undefinedfunction/nBANETO_RangePullThrow/n(/n)/n"
  ],
  [
    "NumAvailableRunesDk [classic|retail]",
    "\nDescription: Returns the number of available runes of a specific type for a Death Knight",
    "undefined--@arg runeType: string/n--@return: number/nfunction/nBANETO_NumAvailableRunesDk/n(/n)/n"
  ],
  [
    "GetCombatRange [classic|retail]",
    "\nDescription: Returns the combat range of the player",
    "undefined--@return: number/nfunction/nBANETO_GetCombatRange/n(/n)/n"
  ],
  [
    "ClearGuidBlacklist [classic|retail]",
    "\nDescription: Clears the GUID blacklist",
    "undefinedfunction/nBANETO_ClearGuidBlacklist/n(/n)/n"
  ],
  [
    "ClearGuidEngagedlist [classic|retail]",
    "\nDescription: Clears the GUID engaged list",
    "undefinedfunction/nBANETO_ClearGuidEngagedlist/n(/n)/n"
  ],
  [
    "AddMobToGuidBlacklist [classic|retail]",
    "\nDescription: Adds the specified unit to the GUID blacklist",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToGuidBlacklist/n(/n)/n"
  ],
  [
    "AddMobToPolymorphList [classic|retail]",
    "\nDescription: Adds the specified unit to the list of mobs to be polymorphed",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToPolymorphList/n(/n)/n"
  ],
  [
    "AddMobToPriestPainedList [classic|retail]",
    "\nDescription: Adds the specified unit to a list of pained units for a priest",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToPriestPainedList/n(/n)/n"
  ],
  [
    "AddMobToGuidGatheredList [classic|retail]",
    "\nDescription: Adds the specified unit to the GUID gathered list",
    "undefined--@arg unit: string/nfunction/nBANETO_AddMobToGuidGatheredList/n(/n)/n"
  ],
  [
    "IsGuidContainedInGuidGatherlist [classic|retail]",
    "\nDescription: Checks if a GUID is in the gathered list",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInGuidGatherlist/n(/n)/n"
  ],
  [
    "DeleteEntryInGuidBlacklist [classic|retail]",
    "\nDescription: Deletes an entry in the GUID blacklist using the provided GUID",
    "undefined--@arg guid: string/nfunction/nBANETO_DeleteEntryInGuidBlacklist/n(/n)/n"
  ],
  [
    "IsGuidContainedInGuidBlacklist [classic|retail]",
    "\nDescription: Checks if a GUID is in the GUID blacklist",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInGuidBlacklist/n(/n)/n"
  ],
  [
    "IsGuidContainedInEngagedList [classic|retail]",
    "\nDescription: Checks if a GUID is in the engaged list",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInEngagedList/n(/n)/n"
  ],
  [
    "IsMobContainedInPolymorphedList [classic|retail]",
    "\nDescription: Checks if a mob is in the polymorphed list using its GUID",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsMobContainedInPolymorphedList/n(/n)/n"
  ],
  [
    "IsGuidContainedInPainedList [classic|retail]",
    "\nDescription: Checks if a GUID is in the pained list",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInPainedList/n(/n)/n"
  ],
  [
    "SetActiveCenterIndexDungeon [classic]",
    "\nDescription: Sets the active center index for a dungeon",
    "undefined--@arg arg: number/nfunction/nBANETO_SetActiveCenterIndexDungeon/n(/n)/n"
  ],
  [
    "GetActiveCenterIndexDungeon [classic]",
    "\nDescription: Gets the active center index for a dungeon",
    "undefined--@return: number/nfunction/nBANETO_GetActiveCenterIndexDungeon/n(/n)/n"
  ],
  [
    "GetActiveCenterIndex [classic|retail]",
    "\nDescription: Gets the active center index",
    "undefined--@return: number/nfunction/nBANETO_GetActiveCenterIndex/n(/n)/n"
  ],
  [
    "HasKeyInKeyRing [classic]",
    "\nDescription: Checks if a key exists in the keyring using its item ID",
    "undefined--@arg itemid: number/n--@return: boolean/nfunction/nBANETO_HasKeyInKeyRing/n(/n)/n"
  ],
  [
    "DeleteItemInKeyRing [classic]",
    "\nDescription: Deletes an item in the keyring using its item ID",
    "undefined--@arg itemid: number/nfunction/nBANETO_DeleteItemInKeyRing/n(/n)/n"
  ],
  [
    "DeleteItem [classic|retail]",
    "\nDescription: Deletes an item using its item ID",
    "undefined--@arg itemid: number/nfunction/nBANETO_DeleteItem/n(/n)/n"
  ],
  [
    "CustomUsageItems [classic|retail]",
    "\nDescription: Handles custom item usage",
    "undefinedfunction/nBANETO_CustomUsageItems/n(/n)/n"
  ],
  [
    "GetItemCooldown [classic|retail]",
    "\nDescription: Gets the cooldown of an item using its index",
    "undefined--@arg i: number/n--@return: number/nfunction/nGetItemCooldown/n(/n)/n"
  ],
  [
    "GetContainerItemLink [classic|retail]",
    "\nDescription: Gets the item link of an item in a container using the container and item indices",
    "undefined--@arg i: number/n--@arg z: number/n--@return: string/nfunction/nGetContainerItemLink/n(/n,/n)/n"
  ],
  [
    "GetContainerNumSlots [classic|retail]",
    "\nDescription: Gets the number of slots in a container using its index",
    "undefined--@arg i: number/n--@return: number/nfunction/nGetContainerNumSlots/n(/n)/n"
  ],
  [
    "GetContainerItemID [classic|retail]",
    "\nDescription: Gets the item ID of an item in a container using the container and item indices",
    "undefined--@arg i: number/n--@arg z: number/n--@return: number/nfunction/nGetContainerItemID/n(/n,/n)/n"
  ],
  [
    "GetContainerNumFreeSlots [classic|retail]",
    "\nDescription: Gets the number of free slots in a container using its index",
    "undefined--@arg i: number/n--@return: number/nfunction/nGetContainerNumFreeSlots/n(/n)/n"
  ],
  [
    "GetContainerItemInfo [classic|retail]",
    "\nDescription: Gets information about an item in a container using the container and item indices",
    "undefined--@arg i: number/n--@arg z: number/n--@return: table/nfunction/nGetContainerItemInfo/n(/n,/n)/n"
  ],
  [
    "DeleteCursorItem [classic|retail]",
    "\nDescription: Deletes the item currently on the cursor",
    "undefinedfunction/nBANETO_DeleteCursorItem/n(/n)/n"
  ],
  [
    "DeleteItems [classic|retail]",
    "\nDescription: Deletes items based on predefined rules",
    "undefinedfunction/nBANETO_DeleteItems/n(/n)/n"
  ],
  [
    "SetSettingString [classic|retail]",
    "\nDescription: Sets a setting string to a specific value. Can be found in player settings .lua file in settings folders.",
    "undefined--@arg settingname: string/n--@arg value: string/nfunction/nBANETO_SetSettingString/n(/n,/n)/n"
  ],
  [
    "IsSomeoneTargetingUs [classic|retail]",
    "\nDescription: Checks if the player is being targeted by someone",
    "undefined--@return: boolean/nfunction/nBANETO_IsSomeoneTargetingUs/n(/n)/n"
  ],
  [
    "SecondsUntilWowClose [classic|retail]",
    "\nDescription: Gets the time in seconds until the WoW client is closed",
    "undefined--@return: number/nfunction/nBANETO_SecondsUntilWowClose/n(/n)/n"
  ],
  [
    "IsFullyLoaded [classic|retail]",
    "\nDescription: Checks if the WoW client is fully loaded",
    "undefined--@return: boolean/nfunction/nBANETO_IsFullyLoaded/n(/n)/n"
  ],
  [
    "SetSettingBool [classic|retail]",
    "\nDescription: Sets a setting boolean to a specific value",
    "undefined--@arg settingname: string/n--@arg value: boolean/nfunction/nBANETO_SetSettingBool/n(/n,/n)/n"
  ],
  [
    "IsFaultySkinMob [classic]",
    "\nDescription: Checks if the mob is actually a gather mob instead of skinnable.",
    "undefined--@arg mobid: object/n--@return: boolean/nfunction/nBANETO_IsFaultySkinMob/n(/n)/n"
  ],
  [
    "PestilenceCheck [classic]",
    "\nDescription: Checks if Pestilence is active.",
    "undefined--@return: boolean/nfunction/nBANETO_PestilenceCheck/n(/n)/n"
  ],
  [
    "GetQuestStepProgression [classic|retail]",
    "\nDescription: Gets the progression of a specific step of a quest.",
    "undefined--@arg questId: number/n--@arg step: number/n--@return: progression/nfunction/nBANETO_GetQuestStepProgression/n(/n,/n)/n"
  ],
  [
    "FindClosestBatlemaster [classic]",
    "\nDescription: Finds the closest battle master.",
    "undefined--@arg isMultiQueue: boolean/n--@return: batlemaster/nfunction/nBANETO_FindClosestBatlemaster/n(/n)/n"
  ],
  [
    "MillOrProspect [classic]",
    "\nDescription: Mills or prospects an item.",
    "undefined--@arg whichOne: string/n--@arg item: string/n--@return: void/nfunction/nBANETO_MillOrProspect/n(/n,/n)/n"
  ],
  [
    "IsProspectingItem [classic]",
    "\nDescription: Checks if an item is prospectable.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsProspectingItem/n(/n)/n"
  ],
  [
    "IsMillingItem [classic]",
    "\nDescription: Checks if an item is millable.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsMillingItem/n(/n)/n"
  ],
  [
    "IsMillOrProspectItemBlacklisted [classic]",
    "\nDescription: Checks if an item is blacklisted for milling or prospecting.",
    "undefined--@arg itemid: number/n--@return: boolean/nfunction/nBANETO_IsMillOrProspectItemBlacklisted/n(/n)/n"
  ],
  [
    "CanMillOrProspect [classic]",
    "\nDescription: Checks if the current state allows milling or prospecting.",
    "undefined--@return: boolean/nfunction/nBANETO_CanMillOrProspect/n(/n)/n"
  ],
  [
    "IsCraftingStateNeeded [classic]",
    "\nDescription: Checks if crafting state is needed.",
    "undefined--@return: boolean/nfunction/nBANETO_IsCraftingStateNeeded/n(/n)/n"
  ],
  [
    "IsMovementSlowedByDebuff [classic]",
    "\nDescription: Checks if movement is slowed by debuff.",
    "undefined--@return: boolean/nfunction/nBANETO_IsMovementSlowedByDebuff/n(/n)/n"
  ],
  [
    "LoadSettings [classic|retail]",
    "\nDescription: Loads settings.",
    "undefined--@return: void/nfunction/nBANETO_LoadSettings/n(/n)/n"
  ],
  [
    "DefineMailRecipient [classic|retail]",
    "\nDescription: Defines the recipient of a mail.",
    "undefined--@arg name: string/n--@return: void/nfunction/nBANETO_DefineMailRecipient/n(/n)/n"
  ],
  [
    "GetMailRecipient [classic|retail]",
    "\nDescription: Gets the mail recipient.",
    "undefined--@return: string/nfunction/nBANETO_GetMailRecipient/n(/n)/n"
  ],
  [
    "LoadDungeonProfileFromBackend [classic]",
    "\nDescription: Loads a Dungeon profile from backend.",
    "undefined--@arg profilename: string/n--@return: void/nfunction/nBANETO_LoadDungeonProfileFromBackend/n(/n)/n"
  ],
  [
    "ExecuteCustomDungeonPulse [classic]",
    "\nDescription: Executes custom Dungeon pulse.",
    "undefined--@return: void/nfunction/nBANETO_ExecuteCustomDungeonPulse/n(/n)/n"
  ],
  [
    "ExportItemDeletionList [classic]",
    "\nDescription: Exports the list of items to be deleted.",
    "undefined--@return: table/nfunction/nBANETO_ExportItemDeletionList/n(/n)/n"
  ],
  [
    "ExportSellingBlacklists [classic]",
    "\nDescription: Exports the blacklists for selling items.",
    "undefined--@return: table/nfunction/nBANETO_ExportSellingBlacklists/n(/n)/n"
  ],
  [
    "ExportIdBlacklists [classic]",
    "\nDescription: Exports the blacklists of item IDs.",
    "undefined--@return: table/nfunction/nBANETO_ExportIdBlacklists/n(/n)/n"
  ],
  [
    "ExportCustomWorldObjects [classic|retail]",
    "\nDescription: Exports the list of custom World Objects.",
    "undefined--@return: table/nfunction/nBANETO_ExportCustomWorldObjects/n(/n)/n"
  ],
  [
    "ExportNeverMailList [classic|retail]",
    "\nDescription: Exports the list of items never to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ExportNeverMailList/n(/n)/n"
  ],
  [
    "ExportAlwaysMailList [classic|retail]",
    "\nDescription: Exports the list of items always to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ExportAlwaysMailList/n(/n)/n"
  ],
  [
    "ExportNeverDisenchant [classic|retail]",
    "\nDescription: Exports the list of items never to be disenchanted.",
    "undefined--@return: table/nfunction/nBANETO_ExportNeverDisenchant/n(/n)/n"
  ],
  [
    "ExportUsageItems [classic|retail]",
    "\nDescription: Exports the list of items for usage.",
    "undefined--@return: table/nfunction/nBANETO_ExportUsageItems/n(/n)/n"
  ],
  [
    "ExportGuildbankItems [classic|retail]",
    "\nDescription: Exports the list of items for the guild bank.",
    "undefined--@return: table/nfunction/nBANETO_ExportGuildbankItems/n(/n)/n"
  ],
  [
    "ExportAreaBlacklists [classic|retail]",
    "\nDescription: Exports the blacklist of areas.",
    "undefined--@return: table/nfunction/nBANETO_ExportAreaBlacklists/n(/n)/n"
  ],
  [
    "ExportTravelpoints [classic|retail]",
    "\nDescription: Exports the list of travel points.",
    "undefined--@return: table/nfunction/nBANETO_ExportTravelpoints/n(/n)/n"
  ],
  [
    "ImportItemDeletionList [classic]",
    "\nDescription: Imports the list of items to be deleted.",
    "undefined--@return: table/nfunction/nBANETO_ImportItemDeletionList/n(/n)/n"
  ],
  [
    "ImportSellingBlacklists [classic|retail]",
    "\nDescription: Imports the blacklists for selling items.",
    "undefined--@return: table/nfunction/nBANETO_ImportSellingBlacklists/n(/n)/n"
  ],
  [
    "ExportUnstuckRoutes [classic|retail]",
    "\nDescription: Exports the unstuck routes.",
    "undefined--@return: table/nfunction/nBANETO_ExportUnstuckRoutes/n(/n)/n"
  ],
  [
    "ImportUnstuckRoutes [classic|retail]",
    "\nDescription: Imports the unstuck routes.",
    "undefined--@return: table/nfunction/nBANETO_ImportUnstuckRoutes/n(/n)/n"
  ],
  [
    "ImportUnstuckRoute [classic|retail]",
    "\nDescription: Imports an unstuck route with specified coordinates and trigger radius.",
    "undefined--@arg index: number/n--@arg x: number/n--@arg y: number/n--@arg z: number/n--@arg radiusTrigger: number/n--@return: void/nfunction/nBANETO_ImportUnstuckRoute/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "ImportIdBlacklists [classic|retail]",
    "\nDescription: Imports the blacklists of item IDs.",
    "undefined--@return: table/nfunction/nBANETO_ImportIdBlacklists/n(/n)/n"
  ],
  [
    "ImportAreaBlacklists [classic|retail]",
    "\nDescription: Imports the blacklist of areas.",
    "undefined--@return: table/nfunction/nBANETO_ImportAreaBlacklists/n(/n)/n"
  ],
  [
    "ImportTravelpoints [classic|retail]",
    "\nDescription: Imports the list of travel points.",
    "undefined--@return: table/nfunction/nBANETO_ImportTravelpoints/n(/n)/n"
  ],
  [
    "ImportCustomWorldObjects [classic|retail]",
    "\nDescription: Imports the list of custom World Objects.",
    "undefined--@return: table/nfunction/nBANETO_ImportCustomWorldObjects/n(/n)/n"
  ],
  [
    "ImportNeverMail [classic|retail]",
    "\nDescription: Imports the list of items never to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ImportNeverMail/n(/n)/n"
  ],
  [
    "ImportAlwaysMail [classic|retail]",
    "\nDescription: Imports the list of items always to be mailed.",
    "undefined--@return: table/nfunction/nBANETO_ImportAlwaysMail/n(/n)/n"
  ],
  [
    "ImportNeverDisenchant [classic|retail]",
    "\nDescription: Imports the list of items never to be disenchanted.",
    "undefined--@return: table/nfunction/nBANETO_ImportNeverDisenchant/n(/n)/n"
  ],
  [
    "ImportUsageItems [classic|retail]",
    "\nDescription: Imports the list of items for usage.",
    "undefined--@return: table/nfunction/nBANETO_ImportUsageItems/n(/n)/n"
  ],
  [
    "ImportGuilbankItems [classic|retail]",
    "\nDescription: Imports the list of items for the guild bank.",
    "undefined--@return: table/nfunction/nBANETO_ImportGuilbankItems/n(/n)/n"
  ],
  [
    "SCAN_FISHINGSWARMS [classic|retail]",
    "\nDescription: Scans for fishing swarms.",
    "undefined--@return: void/nfunction/nBANETO_SCAN_FISHINGSWARMS/n(/n)/n"
  ],
  [
    "GetCountGatherNode [classic|retail]",
    "\nDescription: Returns the count of gathered nodes.",
    "undefined--@return: number/nfunction/nBANETO_GetCountGatherNode/n(/n)/n"
  ],
  [
    "MissionControlInvString [classic|retail]",
    "\nDescription: Returns the inventory string from the Mission Control.",
    "undefined--@return: string/nfunction/nBANETO_MissionControlInvString/n(/n)/n"
  ],
  [
    "SendChatMessage [classic|retail]",
    "\nDescription: Sends a chat message through a specified channel in a certain language to a particular recipient.",
    "undefined--@arg chatmessage: string _ The message to send./n--@arg channel: string _ The chat channel to send the message to./n--@arg language: string _ The language in which to send the message./n--@arg recipient: string _ The recipient of the message./n--@return: None/nfunction/nBANETO_SendChatMessage/n(/n,/n,/n,/n)/n"
  ],
  [
    "McAction [classic|retail]",
    "\nDescription: Executes an action with the given argument in the game's mission control.",
    "undefined--@arg action: string _ The action to execute./n--@arg actionArg: string _ The argument for the action./n--@return: None/nfunction/nBANETO_McAction/n(/n,/n)/n"
  ],
  [
    "AddRecipientToFl [classic|retail]",
    "\nDescription: Adds a recipient to a friend list.",
    "undefined--@return: None/nfunction/nBANETO_AddRecipientToFl/n(/n)/n"
  ],
  [
    "FindBestSwarmLanding [classic|retail]",
    "\nDescription: Finds the best landing spot within the given swarm.",
    "undefined--@arg swarm: table _ The swarm to search./n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_FindBestSwarmLanding/n(/n)/n"
  ],
  [
    "IsFishingSwarm [classic|retail]",
    "\nDescription: Checks if the given ID corresponds to a fishing swarm.",
    "undefined--@arg id: number _ The ID to check./n--@return: boolean _ Whether the ID corresponds to a fishing swarm./nfunction/nBANETO_IsFishingSwarm/n(/n)/n"
  ],
  [
    "CheckNinjaGather [classic]",
    "\nDescription: Checks if a ninja gather attempt should be made.",
    "undefined--@return: boolean _ Whether a ninja gather should be attempted./nfunction/nBANETO_CheckNinjaGather/n(/n)/n"
  ],
  [
    "UnitCastingInfo [classic|retail]",
    "\nDescription: Retrieves information about a unit's casting status.",
    "undefined--@arg unit: string _ The unit or object/n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_UnitCastingInfo/n(/n)/n"
  ],
  [
    "UnitChannelInfo [classic|retail]",
    "\nDescription: Retrieves information about a unit's channeling status.",
    "undefined--@arg unit: string _ The unit or object/n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_UnitChannelInfo/n(/n)/n"
  ],
  [
    "DefineMailbox [classic]",
    "\nDescription: Defines a mailbox.",
    "undefined--@return: None/nfunction/nBANETO_DefineMailbox/n(/n)/n"
  ],
  [
    "SettingsCorrupted [classic|retail]",
    "\nDescription: Checks if the settings are corrupted.",
    "undefined--@return: boolean _ Whether the settings are corrupted./nfunction/nBANETO_SettingsCorrupted/n(/n)/n"
  ],
  [
    "CreateLfgListing [classic|retail]",
    "\nDescription: Creates an LFG listing with the given parameters.",
    "undefined--@arg activityID: number _ The ID of the activity./n--@arg itemLevel: number _ The minimum required item level./n--@arg honorLevel: number _ The minimum required honor level./n--@arg autoAccept: boolean _ Whether to automatically accept join requests./n--@arg privateGroup: boolean _ Whether the group is private./n--@arg questID: number _ The ID of the quest associated with the group./n--@return: None/nfunction/nBANETO_CreateLfgListing/n(/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "GetSetting [classic|retail]",
    "\nDescription: Retrieves a setting's value from the character's config file.",
    "undefined--@arg settingname: string _ The name of the setting to retrieve./n--@return: Unknown _ The value of the setting./nfunction/nBANETO_GetSetting/n(/n)/n"
  ],
  [
    "CacheSettings [classic|retail]",
    "\nDescription: Caches settings to a specified path.",
    "undefined--@arg path: string _ The path to cache the settings to./n--@arg string: string _ The settings to cache./n--@arg append: boolean _ Whether to append the settings or overwrite existing ones./n--@return: None/nfunction/nBANETO_CacheSettings/n(/n,/n,/n)/n"
  ],
  [
    "IsInsideNode [classic|retail]",
    "\nDescription: Checks if an object is inside a node.",
    "undefined--@arg object: string _ The ID of the object to check./n--@return: boolean _ Whether the object is inside a node./nfunction/nBANETO_IsInsideNode/n(/n)/n"
  ],
  [
    "SaveSettings [classic|retail]",
    "\nDescription: Saves the settings.",
    "undefined--@return: None/nfunction/nBANETO_SaveSettings/n(/n)/n"
  ],
  [
    "IsFightBlockedByQuester [classic|retail]",
    "\nDescription: Checks if a fight is blocked by a quester.",
    "undefined--@return: boolean _ Whether the fight is blocked./nfunction/nBANETO_IsFightBlockedByQuester/n(/n)/n"
  ],
  [
    "IsFleeNeeded [classic|retail]",
    "\nDescription: Checks if the character needs to flee.",
    "undefined--@return: boolean _ Whether the character needs to flee./nfunction/nBANETO_IsFleeNeeded/n(/n)/n"
  ],
  [
    "DkPvpBurst [classic]",
    "\nDescription: Executes a burst of PvP actions for a Death Knight.",
    "undefined--@return: None/nfunction/nDkPvpBurst/n(/n)/n"
  ],
  [
    "CastSpell [classic|retail]",
    "\nDescription: Casts a spell with the given ID, with the option to cast it while moving and on a specific target.",
    "undefined--@arg spellid: number _ The ID of the spell to cast./n--@arg canMove: boolean _ Whether the spell can be cast while moving./n--@arg target: string _ The ID of the target to cast the spell on./n--@return: None/nfunction/nBANETO_CastSpell/n(/n,/n,/n)/n"
  ],
  [
    "SurviveSpellsCast [classic|retail]",
    "\nDescription: Casts survival spells.",
    "undefined--@return: None/nfunction/nBANETO_SurviveSpellsCast/n(/n)/n"
  ],
  [
    "SurviveSpellsAllowed [classic|retail]",
    "\nDescription: Checks if survival spells are allowed.",
    "undefined--@return: boolean _ Whether survival spells are allowed./nfunction/nBANETO_SurviveSpellsAllowed/n(/n)/n"
  ],
  [
    "FishingLogic [classic]",
    "\nDescription: Executes the fishing logic.",
    "undefined--@return: None/nfunction/nBANETO_FishingLogic/n(/n)/n"
  ],
  [
    "DefineAllowSwarmFishing [classic]",
    "\nDescription: Defines whether swarm fishing is allowed.",
    "undefined--@arg bool: boolean _ Whether swarm fishing is allowed./n--@return: None/nfunction/nBANETO_DefineAllowSwarmFishing/n(/n)/n"
  ],
  [
    "DefineFishingSwarm [classic]",
    "\nDescription: Defines a fishing swarm.",
    "undefined--@arg id: number _ The ID of the swarm./n--@return: None/nfunction/nBANETO_DefineFishingSwarm/n(/n)/n"
  ],
  [
    "LoadFishy [classic|retail]",
    "\nDescription: Loads the fishing functionality for the given type of fish.",
    "undefined--@arg typeFish: string _ The type of fish to fish./n--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_LoadFishy/n(/n)/n"
  ],
  [
    "IsStateBlockedDueToSlaveBusy [classic]",
    "\nDescription: Checks whether the current state is blocked due to the \"slave\" character being busy.",
    "undefined--@return: boolean _ Whether the current state is blocked./nfunction/nBANETO_IsStateBlockedDueToSlaveBusy/n(/n)/n"
  ],
  [
    "Interact [classic|retail]",
    "\nDescription: Interacts with the given unit.",
    "undefined--@arg unit: string _ The ID of the unit to interact with./n--@return: None/nfunction/nBANETO_Interact/n(/n)/n"
  ],
  [
    "InteractNoDelay [classic|retail]",
    "\nDescription: Interacts with the given unit, without any delay.",
    "undefined--@arg unit: string _ The ID of the unit to interact with./n--@return: None/nfunction/nBANETO_InteractNoDelay/n(/n)/n"
  ],
  [
    "WMB_BobberCheck [classic|retail]",
    "\nDescription: Checks whether the given object is a bobber.",
    "undefined--@arg object: string _ The ID of the object to check./n--@return: boolean _ Whether the object is a bobber./nfunction/nBANETO_WMB_BobberCheck/n(/n)/n"
  ],
  [
    "SlopeJumper [classic|retail]",
    "\nDescription: Activates the slope jumping feature.",
    "undefined--@return: None/nfunction/nBANETO_SlopeJumper/n(/n)/n"
  ],
  [
    "GetObjctsTkr [classic|retail]",
    "\nDescription: Retrieves the objects tracker.",
    "undefined--@return: table of objects/nfunction/nBANETO_GetObjctsTkr/n(/n)/n"
  ],
  [
    "InteractWithBobber [classic|retail]",
    "\nDescription: Interacts with the bobber.",
    "undefined--@return: None/nfunction/nBANETO_InteractWithBobber/n(/n)/n"
  ],
  [
    "GetBobberPosition [classic|retail]",
    "\nDescription: Retrieves the position of the bobber.",
    "undefined--@return: table _ The position of the bobber (x, y, z)./nfunction/nBANETO_GetBobberPosition/n(/n)/n"
  ],
  [
    "GetBobberState [classic|retail]",
    "\nDescription: Retrieves the state of the bobber.",
    "undefined--@return: true if its splashing, false if its not ready yet/nfunction/nBANETO_GetBobberState/n(/n)/n"
  ],
  [
    "AttemptCombatLooting [classic|retail]",
    "\nDescription: Attempts to loot during combat.",
    "undefined--@return: None/nfunction/nBANETO_AttemptCombatLooting/n(/n)/n"
  ],
  [
    "SetSettingInt [classic|retail]",
    "\nDescription: Sets a setting boolean to a specific value. Can be found in player settings .lua file in settings folders.",
    "undefined--@arg settingname: string _ The name of the setting./n--@arg value: number _ The new value for the setting./n--@return: None/nfunction/nBANETO_SetSettingInt/n(/n,/n)/n"
  ],
  [
    "CancelBuffIceBlock [classic]",
    "\nDescription: Cancels the Ice Block buff.",
    "undefined--@return: None/nfunction/nCancelBuffIceBlock/n(/n)/n"
  ],
  [
    "StartCancelAllBuffs [classic]",
    "\nDescription: Starts the process of canceling all buffs.",
    "undefined--@return: None/nfunction/nStartCancelAllBuffs/n(/n)/n"
  ],
  [
    "CancelBuff [classic]",
    "\nDescription: Cancels a buff with the given ID.",
    "undefined--@arg id: number _ The ID of the buff to cancel./n--@return: None/nfunction/nCancelBuff/n(/n)/n"
  ],
  [
    "DisableMeshCheckNn [classic|retail]",
    "\nDescription: Disables the check for mesh (navigation mesh).",
    "undefined--@return: None/nfunction/nBANETO_DisableMeshCheckNn/n(/n)/n"
  ],
  [
    "CheckMeshNn [classic]",
    "\nDescription: Checks the mesh (navigation mesh).",
    "undefined--@return: boolean _ Whether the check was successful./nfunction/nBANETO_CheckMeshNn/n(/n)/n"
  ],
  [
    "UsePoison [classic|retail]",
    "\nDescription: Uses a poison with the given ID.",
    "undefined--@arg itemid: number _ The ID of the poison to use./n--@return: None/nfunction/nBANETO_UsePoison/n(/n)/n"
  ],
  [
    "UsePetFeedItem [classic|retail]",
    "\nDescription: Uses a pet feed item.",
    "undefined--@return: None/nfunction/nBANETO_UsePetFeedItem/n(/n)/n"
  ],
  [
    "GetTargetId [classic|retail]",
    "\nDescription: Retrieves the ID of the current target.",
    "undefined--@return: string _ The ID of the current target./nfunction/nBANETO_GetTargetId/n(/n)/n"
  ],
  [
    "ObjectCreator [classic|retail]",
    "\nDescription: Returns the creator or summoner of the object",
    "undefined--@arg obj: string _ The object to check who summoned it./n--@return: object or nil/nfunction/nBANETO_ObjectCreator/n(/n)/n"
  ],
  [
    "IsPetLuabox [classic|retail]",
    "\nDescription: Checks whether the given unit ID corresponds to a pet.",
    "undefined--@arg unitId: object/n--@return: boolean _ Whether the unit is a pet./nfunction/nBANETO_IsPetLuabox/n(/n)/n"
  ],
  [
    "MageConeAngleCheck [classic]",
    "\nDescription: Performs a check related to the cone angle for a mage character.",
    "undefined--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_MageConeAngleCheck/n(/n)/n"
  ],
  [
    "HasPetFeedItem [classic|retail]",
    "\nDescription: Checks whether the character's pet has a feed item.",
    "undefined--@return: boolean _ Whether the pet has a feed item./nfunction/nBANETO_HasPetFeedItem/n(/n)/n"
  ],
  [
    "HideInterface [classic|retail]",
    "\nDescription: Hides the game interface.",
    "undefined--@return: None/nfunction/nBANETO_HideInterface/n(/n)/n"
  ],
  [
    "ShowInterface [classic|retail]",
    "\nDescription: Shows the game interface.",
    "undefined--@return: None/nfunction/nBANETO_ShowInterface/n(/n)/n"
  ],
  [
    "UseItem [classic|retail]",
    "\nDescription: Uses an item, with an optional dismount.",
    "undefined--@arg itemid: number _ The ID of the item to use./n--@arg needsdismount: boolean _ Whether to dismount before using the item./n--@return: None/nfunction/nBANETO_UseItem/n(/n,/n)/n"
  ],
  [
    "GetProfessionSkill [classic|retail]",
    "\nDescription: Gets the skill level of a given profession.",
    "undefined--@arg name: string _ The name of the profession to check./n--@return: number _ The skill level of the profession./nfunction/nBANETO_GetProfessionSkill/n(/n)/n"
  ],
  [
    "FindFlyMountInBags [classic]",
    "\nDescription: Searches for a flying mount in the player's bags.",
    "undefined--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_FindFlyMountInBags/n(/n)/n"
  ],
  [
    "FindMountInBags [classic|retail]",
    "\nDescription: Searches for a mount in the player's bags.",
    "undefined--@return: Unknown _ Depends on the implementation./nfunction/nBANETO_FindMountInBags/n(/n)/n"
  ],
  [
    "ClearUnstuckTriggerCache [classic|retail]",
    "\nDescription: Clears the cache of unstuck triggers.",
    "undefined--@return: None/nfunction/nBANETO_ClearUnstuckTriggerCache/n(/n)/n"
  ],
  [
    "CheckUnstuckTriggers [classic|retail]",
    "\nDescription: Checks the unstuck triggers.",
    "undefined--@return: None/nfunction/nBANETO_CheckUnstuckTriggers/n(/n)/n"
  ],
  [
    "CancelRecordingUnstuckRoute [classic|retail]",
    "\nDescription: Cancels the recording of an unstuck route.",
    "undefined--@return: None/nfunction/nBANETO_CancelRecordingUnstuckRoute/n(/n)/n"
  ],
  [
    "SaveUnstuckRoute [classic|retail]",
    "\nDescription: Saves the recorded unstuck route.",
    "undefined--@return: None/nfunction/nBANETO_SaveUnstuckRoute/n(/n)/n"
  ],
  [
    "DeleteLastUnstuckSpot [classic|retail]",
    "\nDescription: Deletes the last recorded unstuck spot.",
    "undefined--@return: None/nfunction/nBANETO_DeleteLastUnstuckSpot/n(/n)/n"
  ],
  [
    "DefineProfileUnstuck [classic|retail]",
    "\nDescription: Defines a new unstuck location for a profile.",
    "undefined--@arg unstuckid: number _ Identifier for the unstuck location./n--@arg x: number _ The x_coordinate for the unstuck location./n--@arg y: number _ The y_coordinate for the unstuck location./n--@arg z: number _ The z_coordinate for the unstuck location./n--@arg radiusTrigger: number _ The radius in which the unstuck location triggers./n--@return: None/nfunction/nBANETO_DefineProfileUnstuck/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "DefineUnstuck [classic|retail]",
    "\nDescription: Defines a new unstuck location.",
    "undefined--@arg unstuckid: number _ Identifier for the unstuck location./n--@arg x: number _ The x_coordinate for the unstuck location./n--@arg y: number _ The y_coordinate for the unstuck location./n--@arg z: number _ The z_coordinate for the unstuck location./n--@arg radiusTrigger: number _ The radius in which the unstuck location triggers./n--@return: None/nfunction/nBANETO_DefineUnstuck/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "RecordNewUnstuckSpot [classic|retail]",
    "\nDescription: Records a new unstuck spot at the current player's location.",
    "undefined--@return: None/nfunction/nBANETO_RecordNewUnstuckSpot/n(/n)/n"
  ],
  [
    "DeleteLastUnstuckRoute [classic|retail]",
    "\nDescription: Deletes the last recorded unstuck route.",
    "undefined--@return: None/nfunction/nBANETO_DeleteLastUnstuckRoute/n(/n)/n"
  ],
  [
    "RecordNewUnstuckRoute [classic|retail]",
    "\nDescription: Records a new unstuck route based on the player's current movement.",
    "undefined--@return: None/nfunction/nBANETO_RecordNewUnstuckRoute/n(/n)/n"
  ],
  [
    "lerp [classic|retail]",
    "\nDescription: Returns a number between two numbers at a specific increment.",
    "undefined--@arg a: number _ Starting number./n--@arg b: number _ Ending number./n--@arg x: number _ The increment./n--@return: number _ The interpolated value./nfunction/nlerp/n(/n,/n,/n)/n"
  ],
  [
    "lerp2 [classic|retail]",
    "\nDescription: Returns a number between two numbers at a specific increment, within a certain range.",
    "undefined--@arg t: number _ Starting number./n--@arg b: number _ Ending number./n--@arg c: number _ The increment./n--@arg d: number _ The range within which to interpolate./n--@return: number _ The interpolated value./nfunction/nlerp2/n(/n,/n,/n,/n)/n"
  ],
  [
    "FaceDirectionSmooth [classic|retail]",
    "\nDescription: Makes the player character smoothly turn to a specified angle.",
    "undefined--@arg angle: number _ The angle to turn to, in degrees./n--@return: None/nfunction/nBANETO_FaceDirectionSmooth/n(/n)/n"
  ],
  [
    "FaceDirection [classic|retail]",
    "\nDescription: Makes the player character turn to a specified angle.",
    "undefined--@arg angle: number _ The angle to turn to, in degrees./n--@arg bool: boolean _ Whether to turn smoothly or not./n--@return: None/nfunction/nFaceDirection/n(/n,/n)/n"
  ],
  [
    "ObjectExists [classic|retail]",
    "\nDescription: Checks whether the specified object exists.",
    "undefined--@arg obj: string _ The ID of the object to check./n--@return: boolean _ Whether the object exists./nfunction/nBANETO_ObjectExists/n(/n)/n"
  ],
  [
    "GePlayerAngle [classic|retail]",
    "\nDescription: Gets the player's current angle, in radians.",
    "undefined--@return: number _ The player's current angle, in radians./nfunction/nBANETO_GePlayerAngle/n(/n)/n"
  ],
  [
    "BlockSmoothTurn [classic|retail]",
    "\nDescription: Blocks the player character from turning smoothly for a specified duration.",
    "undefined--@arg seconds: number _ The number of seconds to block smooth turning./n--@return: None/nfunction/nBANETO_BlockSmoothTurn/n(/n)/n"
  ],
  [
    "SetPlayerAnglesLuabox [classic|retail]",
    "\nDescription: Sets the player character's angle to a specified value.",
    "undefined--@arg angle: number _ The angle to set, in radians./n--@return: None/nfunction/nBANETO_SetPlayerAnglesLuabox/n(/n)/n"
  ],
  [
    "RunMacro [classic|retail]",
    "\nDescription: Runs a specified macro.",
    "undefined--@arg macroname: string _ The name of the macro to run./n--@return: None/nfunction/nBANETO_RunMacro/n(/n)/n"
  ],
  [
    "RunMacroText [classic|retail]",
    "\nDescription: Executes the macro defined by the given text.",
    "undefined--@arg text: string _ The macro text to execute./n--@return: None/nfunction/nBANETO_RunMacroText/n(/n)/n"
  ],
  [
    "lbrs_jumpOnLedge [classic]",
    "\nDescription: Executes a specific jumping sequence for lbrs on ledge.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_jumpOnLedge/n(/n)/n"
  ],
  [
    "lbrs_jumpOnSpike [classic]",
    "\nDescription: Executes a specific jumping sequence for lbrs on spike.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_jumpOnSpike/n(/n)/n"
  ],
  [
    "lbrs_activate [classic]",
    "\nDescription: Activates a certain token in lbrs.",
    "undefined--@arg token: string _ The token to activate./n--@return: None/nfunction/nBANETO_lbrs_activate/n(/n)/n"
  ],
  [
    "SitStandOrDescendStart [classic|retail]",
    "\nDescription: Toggles between sitting, standing, and descending based on the provided info.",
    "undefined--@arg info: string _ The action to execute (sit, stand, descend)./n--@return: None/nfunction/nBANETO_SitStandOrDescendStart/n(/n)/n"
  ],
  [
    "MoveBackwardStart [classic|retail]",
    "\nDescription: Starts the character moving backward.",
    "undefined--@return: None/nfunction/nBANETO_MoveBackwardStart/n(/n)/n"
  ],
  [
    "MoveBackwardStop [classic|retail]",
    "\nDescription: Stops the character moving backward.",
    "undefined--@return: None/nfunction/nBANETO_MoveBackwardStop/n(/n)/n"
  ],
  [
    "AscendStop [classic|retail]",
    "\nDescription: Stops ascending.",
    "undefined--@return: None/nfunction/nBANETO_AscendStop/n(/n)/n"
  ],
  [
    "DescendStop [classic|retail]",
    "\nDescription: Stops descending.",
    "undefined--@return: None/nfunction/nBANETO_DescendStop/n(/n)/n"
  ],
  [
    "JumpOrAscendStart [classic|retail]",
    "\nDescription: Starts jumping or ascending based on the provided info.",
    "undefined--@arg info: string _ The action to execute (jump, ascend)./n--@return: None/nfunction/nBANETO_JumpOrAscendStart/n(/n)/n"
  ],
  [
    "lbrs_ManipulatePath [classic]",
    "\nDescription: Manipulates the path for lbrs.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_ManipulatePath/n(/n)/n"
  ],
  [
    "SetWaPathToNilAndBufferToNil [classic|retail]",
    "\nDescription: Sets both the WA path and the buffer to nil.",
    "undefined--@return: None/nfunction/nBANETO_SetWaPathToNilAndBufferToNil/n(/n)/n"
  ],
  [
    "SetCenterIndexTo1 [classic|retail]",
    "\nDescription: Sets the center index of the path to 1.",
    "undefined--@return: None/nfunction/nBANETO_SetCenterIndexTo1/n(/n)/n"
  ],
  [
    "SetWaPathNil [classic|retail]",
    "\nDescription: Sets the WA path to nil.",
    "undefined--@arg fromWhere: string _ Information about the source or reason for the path to be set to nil./n--@return: None/nfunction/nBANETO_SetWaPathNil/n(/n)/n"
  ],
  [
    "lbrs_EnterPortal [classic]",
    "\nDescription: Triggers the sequence to enter the portal in LBRS.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_EnterPortal/n(/n)/n"
  ],
  [
    "lbrs_LeavePortal [classic]",
    "\nDescription: Triggers the sequence to leave the portal in LBRS.",
    "undefined--@return: None/nfunction/nBANETO_lbrs_LeavePortal/n(/n)/n"
  ],
  [
    "TestPathProblem [classic]",
    "\nDescription: Runs a test to identify any issues with the current path.",
    "undefined--@return: None/nfunction/nBANETO_TestPathProblem/n(/n)/n"
  ],
  [
    "TestPathProblem2 [classic]",
    "\nDescription: Runs a second test to identify any issues with the current path.",
    "undefined--@return: None/nfunction/nBANETO_TestPathProblem2/n(/n)/n"
  ],
  [
    "BrickMovement [classic]",
    "\nDescription: Stops the player character's movement, forcing them to stay in place.",
    "undefined--@return: None/nfunction/nBANETO_BrickMovement/n(/n)/n"
  ],
  [
    "Logout [classic|retail]",
    "\nDescription: Logs out the player character from the game.",
    "undefined--@return: None/nfunction/nBANETO_Logout/n(/n)/n"
  ],
  [
    "UnitTarget [classic|retail]",
    "\nDescription: Returns the target of the specified unit.",
    "undefined--@arg obj: the object of which we want to know the target/n--@return: object (the target of obj)/nfunction/nBANETO_UnitTarget/n(/n)/n"
  ],
  [
    "TappedTest [classic]",
    "\nDescription: Checks if the current target is tapped.",
    "undefined--@return: boolean _ True if the target is tapped, false otherwise./nfunction/nBANETO_TappedTest/n(/n)/n"
  ],
  [
    "TappedCheck [classic|retail]",
    "\nDescription: Checks and returns if the current target is tapped by the player or their group.",
    "undefined--@return: boolean _ True if the target is tapped by the player or their group, false otherwise./nfunction/nBANETO_TappedCheck/n(/n)/n"
  ],
  [
    "SetCurrentCenterIndex [classic|retail]",
    "\nDescription: Sets the current index for a certain center UI element (like action bars).",
    "undefined--@arg arg: number _ The index to set./n--@return: None/nfunction/nBANETO_SetCurrentCenterIndex/n(/n)/n"
  ],
  [
    "BodypullCheck [classic|retail]",
    "\nDescription: Checks if the player's body is pulled by a mob.",
    "undefined--@return: boolean _ True if body is being pulled, false otherwise./nfunction/nBANETO_BodypullCheck/n(/n)/n"
  ],
  [
    "JsonEncode [classic|retail]",
    "\nDescription: Converts a LUA table or value into a JSON_encoded string.",
    "undefined--@arg obj: table or value _ The LUA table or value to encode./n--@return: string _ The JSON_encoded string./nfunction/nBANETO_JsonEncode/n(/n)/n"
  ],
  [
    "JsonDecode [classic|retail]",
    "\nDescription: Decodes a JSON_encoded string into a LUA table.",
    "undefined--@arg string: string _ The JSON_encoded string to decode./n--@return: table _ The LUA table decoded from the JSON string./nfunction/nBANETO_JsonDecode/n(/n)/n"
  ],
  [
    "UnitExists [classic|retail]",
    "\nDescription: Checks if the given unit exists.",
    "undefined--@arg obj: unitId string _ The UnitID of the unit to check./n--@return: boolean _ True if the unit exists, false otherwise./nfunction/nBANETO_UnitExists/n(/n)/n"
  ],
  [
    "TargetNearest [classic|retail]",
    "\nDescription: Targets the nearest unit to the player.",
    "undefined--@return: None/nfunction/nBANETO_TargetNearest/n(/n)/n"
  ],
  [
    "UseAction [classic|retail]",
    "\nDescription: Performs the action associated with the specified action slot.",
    "undefined--@arg act: number _ The action slot number./n--@return: None/nfunction/nBANETO_UseAction/n(/n)/n"
  ],
  [
    "BlockPathAvoidance [classic|retail]",
    "\nDescription: Enables or disables path avoidance.",
    "undefined--@arg bool: boolean _ True to enable path avoidance, false to disable it./n--@return: None/nfunction/nBANETO_BlockPathAvoidance/n(/n)/n"
  ],
  [
    "GetAnglesBetweenPositions [classic|retail]",
    "\nDescription: Gets the angles between two positions in the 3D world.",
    "undefined--@return: number _ The angle in radians between the two positions./nfunction/nBANETO_GetAnglesBetweenPositions/n(/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "MeshTo [classic|retail]",
    "\nDescription: Moves the player to the specified coordinates using pathfinding.",
    "undefined--@return: None/nfunction/nBANETO_MeshTo/n(/n,/n,/n)/n"
  ],
  [
    "RunString [classic|retail]",
    "\nDescription: Executes the specified LUA code.",
    "undefined--@arg string: string _ The LUA code to execute./n--@return: Various _ The results of the executed LUA code./nfunction/nBANETO_RunString/n(/n)/n"
  ],
  [
    "DelayGroundUnstucking [classic|retail]",
    "\nDescription: Delays the ground unstucking method by the specified amount of seconds.",
    "undefined--@arg seconds: number _ The number of seconds to delay the unstucking method./n--@return: None/nfunction/nBANETO_DelayGroundUnstucking/n(/n)/n"
  ],
  [
    "CallFullStuckMethod [classic|retail]",
    "\nDescription: Calls the full method for unstucking the player character.",
    "undefined--@return: None/nfunction/nBANETO_CallFullStuckMethod/n(/n)/n"
  ],
  [
    "GetPath [classic|retail]",
    "\nDescription: Retrieves the current path of the player character.",
    "undefined--@return: table _ The current path as a table of coordinates./nfunction/nBANETO_GetPath/n(/n)/n"
  ],
  [
    "ObjectFlags1 [classic|retail]",
    "\nDescription: Retrieves the first set of flags for the specified object.",
    "undefined--@arg obj: Object _ The object to retrieve the flags for./n--@return: number _ The first set of flags for the object./nfunction/nBANETO_ObjectFlags1/n(/n)/n"
  ],
  [
    "ObjectFlags2 [classic|retail]",
    "\nDescription: Retrieves the second set of flags for the specified object.",
    "undefined--@arg obj: Object _ The object to retrieve the flags for./n--@return: number _ The second set of flags for the object./nfunction/nBANETO_ObjectFlags2/n(/n)/n"
  ],
  [
    "UnitIsSkinnable [classic|retail]",
    "\nDescription: Checks if the specified unit can be skinned.",
    "undefined--@arg obj: unitId string _ The UnitID of the unit to check./n--@return: boolean _ True if the unit can be skinned, false otherwise./nfunction/nBANETO_UnitIsSkinnable/n(/n)/n"
  ],
  [
    "UnitIsLooting [classic|retail]",
    "\nDescription: Checks if the specified unit is currently looting.",
    "undefined--@arg obj: unitId string _ The UnitID of the unit to check./n--@return: boolean _ True if the unit is currently looting, false otherwise./nfunction/nBANETO_UnitIsLooting/n(/n)/n"
  ],
  [
    "UnitFeignDeathed [classic|retail]",
    "\nDescription: Checks whether a unit is feigning death.",
    "undefined--@arg obj: string _ The unit to check./n--@return: Boolean indicating whether the unit is feigning death./nfunction/nBANETO_UnitFeignDeathed/n(/n)/n"
  ],
  [
    "IsWaterBelowUs [classic]",
    "\nDescription: Checks whether there is water below us.",
    "undefined--@return: Boolean indicating whether there is water below./nfunction/nBANETO_IsWaterBelowUs/n(/n)/n"
  ],
  [
    "FlyingRaycastBlock [classic]",
    "\nDescription: Performs a raycast to detect obstacles while flying.",
    "undefined--@return: Boolean indicating whether there is an obstacle./nfunction/nBANETO_FlyingRaycastBlock/n(/n)/n"
  ],
  [
    "FlyingRaycast [classic|retail]",
    "\nDescription: Performs a raycast while flying.",
    "undefined--@return: Raycast result./nfunction/nBANETO_FlyingRaycast/n(/n)/n"
  ],
  [
    "FlyingRaycastClose [classic|retail]",
    "\nDescription: Performs a close proximity raycast while flying.",
    "undefined--@return: Raycast result./nfunction/nBANETO_FlyingRaycastClose/n(/n)/n"
  ],
  [
    "IsFlyingStuck [classic|retail]",
    "\nDescription: Checks whether the flying unit is stuck.",
    "undefined--@return: Boolean indicating whether the flying unit is stuck./nfunction/nBANETO_IsFlyingStuck/n(/n)/n"
  ],
  [
    "StrafeLeftStart [classic|retail]",
    "\nDescription: Starts strafing to the left.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeLeftStart/n(/n)/n"
  ],
  [
    "StrafeLeftStop [classic|retail]",
    "\nDescription: Stops strafing to the left.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeLeftStop/n(/n)/n"
  ],
  [
    "StrafeRightStart [classic|retail]",
    "\nDescription: Starts strafing to the right.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeRightStart/n(/n)/n"
  ],
  [
    "StrafeRightStop [classic|retail]",
    "\nDescription: Stops strafing to the right.",
    "undefined--@return: Strafe result./nfunction/nBANETO_StrafeRightStop/n(/n)/n"
  ],
  [
    "FlyingUnstucker [classic|retail]",
    "\nDescription: Unstucks the flying unit.",
    "undefined--@return: Unstuck result./nfunction/nBANETO_FlyingUnstucker/n(/n)/n"
  ],
  [
    "SetFlyingPitch [classic|retail]",
    "\nDescription: Sets the flying pitch.",
    "undefined--@arg val: number _ The value to set the pitch to./n--@return: The result of setting the pitch./nfunction/nBANETO_SetFlyingPitch/n(/n)/n"
  ],
  [
    "GetFlyingPitch [classic|retail]",
    "\nDescription: Gets the current flying pitch.",
    "undefined--@return: The current flying pitch./nfunction/nBANETO_GetFlyingPitch/n(/n)/n"
  ],
  [
    "SetToOldFlyingNav [classic|retail]",
    "\nDescription: Sets the navigation to old flying.",
    "undefined--@return: Result of the setting./nfunction/nBANETO_SetToOldFlyingNav/n(/n)/n"
  ],
  [
    "FlyingNavigator [classic|retail]",
    "\nDescription: Executes the flying navigator.",
    "undefined--@return: Flying navigator result./nfunction/nBANETO_FlyingNavigator/n(/n)/n"
  ],
  [
    "FaceDirection [classic]",
    "\nDescription: Faces a specified direction.",
    "undefined--@arg dir: string _ The direction to face./n--@return: The result of facing the direction./nfunction/nBANETO_FaceDirection/n(/n)/n"
  ],
  [
    "IsRunning [classic|retail]",
    "\nDescription: Checks whether the unit is running.",
    "undefined--@return: Boolean indicating whether the unit is running./nfunction/nBANETO_IsRunning/n(/n)/n"
  ],
  [
    "FlyAscendExecute [classic|retail]",
    "\nDescription: Executes the fly ascend action.",
    "undefined--@return: The result of the fly ascend action./nfunction/nBANETO_FlyAscendExecute/n(/n)/n"
  ],
  [
    "Dismount [classic|retail]",
    "\nDescription: Dismounts the unit.",
    "undefined--@arg msg: string _ The message to send on dismount./n--@return: The result of the dismount action./nfunction/nBANETO_Dismount/n(/n)/n"
  ],
  [
    "PathHandlerNn [classic|retail]",
    "\nDescription: Handles the given path.",
    "undefined--@arg path: string _ The path to handle./n--@return: The result of the path handling./nfunction/nBANETO_PathHandlerNn/n(/n)/n"
  ],
  [
    "DelayOM [classic]",
    "\nDescription: Delays the object manager.",
    "undefined--@arg seconds: number _ The number of seconds to delay./n--@return: The result of the delay./nfunction/nBANETO_DelayOM/n(/n)/n"
  ],
  [
    "GetObjectFacing [classic|retail]",
    "\nDescription: Gets the facing direction of an object.",
    "undefined--@arg object: string _ The object to get the facing direction of./n--@return: The facing direction of the object./nfunction/nBANETO_GetObjectFacing/n(/n)/n"
  ],
  [
    "UpdateGotoPositionWa [classic|retail]",
    "\nDescription: Updates the goto position with WorldAnchor.",
    "undefined--@return: The result of the update./nfunction/nUpdateGotoPositionWa/n(/n)/n"
  ],
  [
    "FlyMount [classic|retail]",
    "\nDescription: Mounts the unit for flying.",
    "undefined--@return: The result of the mount action./nfunction/nBANETO_FlyMount/n(/n)/n"
  ],
  [
    "Mount [classic]",
    "\nDescription: Mounts the unit.",
    "undefined--@return: The result of the mount action./nfunction/nBANETO_Mount/n(/n)/n"
  ],
  [
    "GetClosestKnownTaxi [classic|retail]",
    "\nDescription: Gets the closest known taxi.",
    "undefined--@return: The closest known taxi./nfunction/nBANETO_GetClosestKnownTaxi/n(/n)/n"
  ],
  [
    "ProfileSetHomeMailbox [classic|retail]",
    "\nDescription: Sets the home mailbox with specified coordinates and ID.",
    "undefined--@arg x: number _ The x coordinate./n--@arg y: number _ The y coordinate./n--@arg z: number _ The z coordinate./n--@arg id: string _ The ID of the mailbox./n--@return: The result of the set action./nfunction/nBANETO_ProfileSetHomeMailbox/n(/n,/n,/n,/n)/n"
  ],
  [
    "SetHomeMailbox [classic|retail]",
    "\nDescription: Sets the home mailbox.",
    "undefined--@return: The result of the set action./nfunction/nBANETO_SetHomeMailbox/n(/n)/n"
  ],
  [
    "CheckHomeMailbox [classic|retail]",
    "\nDescription: Checks the home mailbox.",
    "undefined--@return: The result of the check./nfunction/nBANETO_CheckHomeMailbox/n(/n)/n"
  ],
  [
    "GetClosestMailbox [classic|retail]",
    "\nDescription: Gets the closest mailbox.",
    "undefined--@return: The closest mailbox./nfunction/nBANETO_GetClosestMailbox/n(/n)/n"
  ],
  [
    "GetClosestClassTrainer [classic|retail]",
    "\nDescription: Gets the closest class trainer of a specified class.",
    "undefined--@arg classEnglishName: string _ The English name of the class./n--@return: The closest class trainer of the specified class./nfunction/nBANETO_GetClosestClassTrainer/n(/n)/n"
  ],
  [
    "GetClosestProfTrainer [classic|retail]",
    "\nDescription: Gets the closest profession trainer of a specified profession.",
    "undefined--@arg profEnglishName: string _ The English name of the profession./n--@return: The closest profession trainer of the specified profession./nfunction/nBANETO_GetClosestProfTrainer/n(/n)/n"
  ],
  [
    "GetClosestTaxiExit [classic|retail]",
    "\nDescription: Gets the closest taxi exit.",
    "undefined--@return: The closest taxi exit./nfunction/nBANETO_GetClosestTaxiExit/n(/n)/n"
  ],
  [
    "GetClosestTaxiEntry [classic|retail]",
    "\nDescription: Gets the closest taxi entry.",
    "undefined--@return: The closest taxi entry./nfunction/nBANETO_GetClosestTaxiEntry/n(/n)/n"
  ],
  [
    "IsFlightmasterOnMyContinent [classic|retail]",
    "\nDescription: Checks whether the flight master is on the same continent.",
    "undefined--@arg id: string _ The ID of the flight master./n--@return: Boolean indicating whether the flight master is on the same continent./nfunction/nBANETO_IsFlightmasterOnMyContinent/n(/n)/n"
  ],
  [
    "GetLuaBoxDestination [classic|retail]",
    "\nDescription: Retrieves the destination from Lua Box.",
    "undefined--@return: Destination coordinates or object./nfunction/nBANETO_GetLuaBoxDestination/n(/n)/n"
  ],
  [
    "GetEwtDestination [classic|retail]",
    "\nDescription: Retrieves the destination from Ewt.",
    "undefined--@return: Destination coordinates or object./nfunction/nBANETO_GetEwtDestination/n(/n)/n"
  ],
  [
    "IsKickNeededUnitCheck [classic|retail]",
    "\nDescription: Checks whether a kick is needed for the specified unit.",
    "undefined--@arg unit: string _ The unit to check./n--@return: Boolean indicating whether a kick is needed./nfunction/nBANETO_IsKickNeededUnitCheck/n(/n)/n"
  ],
  [
    "IsKickNeeded [classic|retail]",
    "\nDescription: Checks whether a kick is needed.",
    "undefined--@return: Boolean indicating whether a kick is needed./nfunction/nBANETO_IsKickNeeded/n(/n)/n"
  ],
  [
    "IsTaxiNeeded [classic|retail]",
    "\nDescription: Checks whether a taxi is needed.",
    "undefined--@return: Boolean indicating whether a taxi is needed./nfunction/nBANETO_IsTaxiNeeded/n(/n)/n"
  ],
  [
    "IsOnCustomVendorPath [classic]",
    "\nDescription: Checks whether the player is on a custom vendor path.",
    "undefined--@return: Boolean indicating whether the player is on a custom vendor path./nfunction/nBANETO_IsOnCustomVendorPath/n(/n)/n"
  ],
  [
    "GetExecuteFlyAscend [classic]",
    "\nDescription: Executes a fly ascend.",
    "undefined--@return: Result of the execution./nfunction/nBANETO_GetExecuteFlyAscend/n(/n)/n"
  ],
  [
    "IsMountNeeded [classic|retail]",
    "\nDescription: Checks whether a mount is needed.",
    "undefined--@return: Boolean indicating whether a mount is needed./nfunction/nBANETO_IsMountNeeded/n(/n)/n"
  ],
  [
    "HasMount [classic|retail]",
    "\nDescription: Checks whether the player has a mount.",
    "undefined--@return: Boolean indicating whether the player has a mount./nfunction/nBANETO_HasMount/n(/n)/n"
  ],
  [
    "HasMountItem [classic|retail]",
    "\nDescription: Checks whether the player has a mount item.",
    "undefined--@return: Boolean indicating whether the player has a mount item./nfunction/nBANETO_HasMountItem/n(/n)/n"
  ],
  [
    "GetPlayerPointer [classic|retail]",
    "\nDescription: Retrieves the player's pointer.",
    "undefined--@return: Player's pointer./nfunction/nBANETO_GetPlayerPointer/n(/n)/n"
  ],
  [
    "IsAnEnemyPolymorphedNovaCheck [classic|retail]",
    "\nDescription: Checks whether an enemy is polymorphed and ready for Nova.",
    "undefined--@return: Boolean indicating whether an enemy is polymorphed and ready for Nova./nfunction/nBANETO_IsAnEnemyPolymorphedNovaCheck/n(/n)/n"
  ],
  [
    "IsLootStateNeededV2 [classic|retail]",
    "\nDescription: Checks whether the loot state is needed (version 2).",
    "undefined--@return: Boolean indicating whether the loot state is needed./nfunction/nBANETO_IsLootStateNeededV2/n(/n)/n"
  ],
  [
    "SelectNextMultidotTarget [classic|retail]",
    "\nDescription: Selects the next target to apply multiple damage over time spells.",
    "undefined--@return: Target selection result./nfunction/nBANETO_SelectNextMultidotTarget/n(/n)/n"
  ],
  [
    "CountItemTypeInBagsForDisc [classic|retail]",
    "\nDescription: Counts the given item type in the player's bags for Discord.",
    "undefined--@arg itemTypeC: string _ The item type to count./n--@return: Number of items of the given type./nfunction/nBANETO_CountItemTypeInBagsForDisc/n(/n)/n"
  ],
  [
    "DiscordSendWhisperOutgoing [classic|retail]",
    "\nDescription: Sends an outgoing whisper to Discord.",
    "undefined--@arg msg: string _ The message to send./nfunction/nBANETO_DiscordSendWhisperOutgoing/n(/n)/n"
  ],
  [
    "DiscordSendWhisper [classic|retail]",
    "\nDescription: Sends a whisper to a sender via Discord.",
    "undefined--@arg sender: string _ The sender to whisper to./n--@arg msg: string _ The message to send./nfunction/nBANETO_DiscordSendWhisper/n(/n,/n)/n"
  ],
  [
    "DiscordSendProfileInfo [classic]",
    "\nDescription: Sends the profile information to Discord.",
    "undefinedfunction/nBANETO_DiscordSendProfileInfo/n(/n)/n"
  ],
  [
    "DiscordSendPluginCustomText [classic|retail]",
    "\nDescription: Sends a custom text to Discord from the plugin.",
    "undefined--@arg text: string _ The custom text to send./nfunction/nBANETO_DiscordSendPluginCustomText/n(/n)/n"
  ],
  [
    "DiscordSendTargeted [classic|retail]",
    "\nDescription: Sends a targeted name to Discord.",
    "undefined--@arg name: string _ The name of the target to send./nfunction/nBANETO_DiscordSendTargeted/n(/n)/n"
  ],
  [
    "DiscordSendPluginMobFound [classic|retail]",
    "\nDescription: Sends a message to Discord when a Mob is found by the plugin.",
    "undefined--@arg id: number _ The ID of the Mob that was found./nfunction/nBANETO_DiscordSendPluginMobFound/n(/n)/n"
  ],
  [
    "DiscordSendStuck [classic|retail]",
    "\nDescription: Sends a message to Discord when the character is stuck.",
    "undefinedfunction/nBANETO_DiscordSendStuck/n(/n)/n"
  ],
  [
    "DiscordSendBgStart [classic|retail]",
    "\nDescription: Sends a message to Discord when the battleground starts.",
    "undefinedfunction/nBANETO_DiscordSendBgStart/n(/n)/n"
  ],
  [
    "DiscordSendDeath [classic|retail]",
    "\nDescription: Sends a message to Discord when the character dies.",
    "undefinedfunction/nBANETO_DiscordSendDeath/n(/n)/n"
  ],
  [
    "DiscordSendPluginItemFound [classic|retail]",
    "\nDescription: Sends a message to Discord when the plugin finds an item.",
    "undefinedfunction/nBANETO_DiscordSendPluginItemFound/n(/n)/n"
  ],
  [
    "DiscordSendTest [classic|retail]",
    "\nDescription: Sends a test message to Discord.",
    "undefinedfunction/nBANETO_DiscordSendTest/n(/n)/n"
  ],
  [
    "GetXpPercent [classic|retail]",
    "\nDescription: Retrieves the percentage of the current experience.",
    "undefined--@return: number _ The current experience percentage./nfunction/nBANETO_GetXpPercent/n(/n)/n"
  ],
  [
    "DiscordSendStatus [classic|retail]",
    "\nDescription: Sends the status to Discord.",
    "undefinedfunction/nBANETO_DiscordSendStatus/n(/n)/n"
  ],
  [
    "SelectNextMultidotTargetPriest [classic]",
    "\nDescription: Selects the next target to apply multiple damage over time spells as a priest.",
    "undefinedfunction/nBANETO_SelectNextMultidotTargetPriest/n(/n)/n"
  ],
  [
    "IsFightBlockedByMageMultipull [classic|retail]",
    "\nDescription: Checks whether the fight is blocked by a mage multipull.",
    "undefined--@return: boolean _ true if the fight is blocked, false otherwise./nfunction/nBANETO_IsFightBlockedByMageMultipull/n(/n)/n"
  ],
  [
    "IsAnEnemyNotFullMultidotted [classic|retail]",
    "\nDescription: Checks whether an enemy is not fully affected by multiple damage over time spells.",
    "undefined--@return: boolean _ true if the enemy is not fully affected, false otherwise./nfunction/nBANETO_IsAnEnemyNotFullMultidotted/n(/n)/n"
  ],
  [
    "IsAnEnemyPlaguedPriest [classic]",
    "\nDescription: Checks if a specified enemy unit is a Plagued Priest.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAnEnemyPlaguedPriest/n(/n)/n"
  ],
  [
    "IsAnEnemyNotFullMultidottedPriest [classic]",
    "\nDescription: Checks if a specified enemy Priest unit is not fully multidotted.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAnEnemyNotFullMultidottedPriest/n(/n)/n"
  ],
  [
    "IsAnEnemyPolymorphed [classic|retail]",
    "\nDescription: Checks if a specified enemy unit is polymorphed.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAnEnemyPolymorphed/n(/n)/n"
  ],
  [
    "SwingTimerTest [classic]",
    "\nDescription: Tests the swing timer of the player character.",
    "undefined--@return: number (the time remaining until the next auto_attack)/nfunction/nBANETO_SwingTimerTest/n(/n)/n"
  ],
  [
    "SwingTimer [classic]",
    "\nDescription: Returns the player's swing timer.",
    "undefined--@return: number (the time remaining until the next auto_attack)/nfunction/nBANETO_SwingTimer/n(/n)/n"
  ],
  [
    "SpellStopCasting [classic|retail]",
    "\nDescription: Stops the current spell being cast.",
    "undefinedfunction/nBANETO_SpellStopCasting/n(/n)/n"
  ],
  [
    "RetargetLowestHealthMob [classic|retail]",
    "\nDescription: Changes target to the enemy mob with the lowest health.",
    "undefinedfunction/nBANETO_RetargetLowestHealthMob/n(/n)/n"
  ],
  [
    "RetargetGoodMobAfterMultidot [classic|retail]",
    "\nDescription: Changes target to a good mob after multidot.",
    "undefinedfunction/nBANETO_RetargetGoodMobAfterMultidot/n(/n)/n"
  ],
  [
    "RetargetGoodMobAfterMultidotPriest [classic]",
    "\nDescription: Changes target to a good mob after multidot, with preference for Priests.",
    "undefinedfunction/nBANETO_RetargetGoodMobAfterMultidotPriest/n(/n)/n"
  ],
  [
    "RetargetGoodMobAfterPoly [classic|retail]",
    "\nDescription: Changes target to a good mob after a polymorph effect.",
    "undefinedfunction/nBANETO_RetargetGoodMobAfterPoly/n(/n)/n"
  ],
  [
    "TargetPolymorphedMob [classic|retail]",
    "\nDescription: Targets a polymorphed mob.",
    "undefinedfunction/nBANETO_TargetPolymorphedMob/n(/n)/n"
  ],
  [
    "TargetAndPolymorph [classic|retail]",
    "\nDescription: Targets and polymorphs a specified mob.",
    "undefinedfunction/nBANETO_TargetAndPolymorph/n(/n)/n"
  ],
  [
    "IsUnitMultidotted [classic|retail]",
    "\nDescription: Checks if a specified unit is multidotted.",
    "undefined--@arg unit: string (unit to be checked)/n--@return: boolean/nfunction/nBANETO_IsUnitMultidotted/n(/n)/n"
  ],
  [
    "IsUnitMultidottedPriest [classic]",
    "\nDescription: Checks if a specified unit is multidotted, with preference for Priests.",
    "undefined--@arg unit: string (unit to be checked)/n--@return: boolean/nfunction/nBANETO_IsUnitMultidottedPriest/n(/n)/n"
  ],
  [
    "IsUnitPolymorphed [classic|retail]",
    "\nDescription: Checks if a specified unit is polymorphed.",
    "undefined--@arg unit: string (unit to be checked)/n--@return: boolean/nfunction/nBANETO_IsUnitPolymorphed/n(/n)/n"
  ],
  [
    "Object [classic|retail]",
    "\nDescription: Creates a new Object with the given value.",
    "undefined--@arg arg: mixed/n--@return: Object/nfunction/nBANETO_Object/n(/n)/n"
  ],
  [
    "ClearTarget [classic|retail]",
    "\nDescription: Clears the current target.",
    "undefinedfunction/nBANETO_ClearTarget/n(/n)/n"
  ],
  [
    "SelectActiveEnemyAroundPlayer [classic|retail]",
    "\nDescription: Selects an active enemy within a certain radius around the player.",
    "undefined--@arg radius: number/n--@return: unitId (unit identifier of the selected enemy)/nfunction/nBANETO_SelectActiveEnemyAroundPlayer/n(/n)/n"
  ],
  [
    "CancelEnrageBuffing [classic]",
    "\nDescription: Cancels the enrage buffing state of the player character.",
    "undefinedfunction/nBANETO_CancelEnrageBuffing/n(/n)/n"
  ],
  [
    "GetNumEnemiesAroundUnit [classic|retail]",
    "\nDescription: Retrieves the number of enemy units around a specified unit.",
    "undefined--@arg unit: string (unit identifier)/n--@arg radius: number/n--@return: number/nfunction/nGetNumEnemiesAroundUnit/n(/n,/n)/n"
  ],
  [
    "SetRETAIL_WQUEST [classic|retail]",
    "\nDescription: Sets the value of the RETAIL_WQUEST variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetRETAIL_WQUEST/n(/n)/n"
  ],
  [
    "SetOZ_RAREFARM_QUESTSCAN [classic|retail]",
    "\nDescription: Sets the value of the OZ_RAREFARM_QUESTSCAN variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetOZ_RAREFARM_QUESTSCAN/n(/n)/n"
  ],
  [
    "UnitThreatSituation [classic|retail]",
    "\nDescription: Checks the threat level between two units.",
    "undefined--@arg unit1: string/n--@arg unit2: string/n--@return: number/nfunction/nBANETO_UnitThreatSituation/n(/n,/n)/n"
  ],
  [
    "SetBLOCKMOVING_REICHI [classic|retail]",
    "\nDescription: Sets the value of the BLOCKMOVING_REICHI variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetBLOCKMOVING_REICHI/n(/n)/n"
  ],
  [
    "SetBLACKLIST_SPOTS [classic|retail]",
    "\nDescription: Sets the value of the BLACKLIST_SPOTS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetBLACKLIST_SPOTS/n(/n)/n"
  ],
  [
    "SetDEFINED_TARGET_IDS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_TARGET_IDS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_TARGET_IDS/n(/n)/n"
  ],
  [
    "SetDEFINED_CENTERS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_CENTERS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_CENTERS/n(/n)/n"
  ],
  [
    "SetDEFINED_QUEST_IDS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_QUEST_IDS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_QUEST_IDS/n(/n)/n"
  ],
  [
    "SetDEFINED_QUEST_PICKUP_NPCS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_QUEST_PICKUP_NPCS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_QUEST_PICKUP_NPCS/n(/n)/n"
  ],
  [
    "SetQUEST_TURNIN_NPCS [classic|retail]",
    "\nDescription: Sets the value of the QUEST_TURNIN_NPCS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetQUEST_TURNIN_NPCS/n(/n)/n"
  ],
  [
    "SetDEFINED_QUESTSTEP_TYPES [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_QUESTSTEP_TYPES variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_QUESTSTEP_TYPES/n(/n)/n"
  ],
  [
    "SetDEFINED_VENDOR_GOODS [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_VENDOR_GOODS variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_VENDOR_GOODS/n(/n)/n"
  ],
  [
    "SetDEFINED_VENDOR_REPAIR [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_VENDOR_REPAIR variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_VENDOR_REPAIR/n(/n)/n"
  ],
  [
    "SetDEFINED_VENDOR_SELL [classic|retail]",
    "\nDescription: Sets the value of the DEFINED_VENDOR_SELL variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetDEFINED_VENDOR_SELL/n(/n)/n"
  ],
  [
    "SetEATINGDRINKING_RETAIL_DELAY_AMOUNT [classic|retail]",
    "\nDescription: Sets the value of the EATINGDRINKING_RETAIL_DELAY_AMOUNT variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetEATINGDRINKING_RETAIL_DELAY_AMOUNT/n(/n)/n"
  ],
  [
    "SetSTOPFIGHT_EVADE [classic|retail]",
    "\nDescription: Blacklists the FIGHTING state until the specified timestamp expires. If you already are in FIGHTING state you need to call BANETO_SetSTOPFIGHT_EVADE(true) to leave it!",
    "undefined--@arg timestamp: Example would be GetTime()+10/nfunction/nBANETO_SetSTOPFIGHT_EVADE/n(/n)/n"
  ],
  [
    "SetBLOCKMOVING [classic|retail]",
    "\nDescription: Sets the value of the BLOCKMOVING variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetBLOCKMOVING/n(/n)/n"
  ],
  [
    "SetIsLocalQuester [classic|retail]",
    "\nDescription: Sets the value of the IsLocalQuester variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetIsLocalQuester/n(/n)/n"
  ],
  [
    "SetFIGHTING_EMERGENCY_LEAVE [classic|retail]",
    "\nDescription: Sets the value of the FIGHTING_EMERGENCY_LEAVE variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetFIGHTING_EMERGENCY_LEAVE/n(/n)/n"
  ],
  [
    "SetRETAIL_GOSSIP_QUEST [classic|retail]",
    "\nDescription: Sets the value of the RETAIL_GOSSIP_QUEST variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetRETAIL_GOSSIP_QUEST/n(/n)/n"
  ],
  [
    "SetSPELLONLOCATION_ID [classic|retail]",
    "\nDescription: Sets the value of the SPELLONLOCATION_ID variable.",
    "undefined--@arg arg: mixed/nfunction/nBANETO_SetSPELLONLOCATION_ID/n(/n)/n"
  ],
  [
    "HasTotemActive [classic|retail]",
    "\nDescription: Checks if a specific totem with the given ID is active.",
    "undefined--@arg idTotem: number/n--@return: boolean/nfunction/nBANETO_HasTotemActive/n(/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundVectorNotInfight [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific position who are not currently in a fight",
    "undefined--@arg x: number _ The X coordinate of the position/n--@arg y: number _ The Y coordinate of the position/n--@arg z: number _ The Z coordinate of the position/n--@arg radius: number _ The radius within which to look for enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundVectorNotInfight/n(/n,/n,/n,/n)/n"
  ],
  [
    "FindNextAssistPositionNew [classic]",
    "\nDescription: Finds the next position to assist a player character",
    "undefined--@return: string _ The coordinates of the next assist position/nfunction/nBANETO_FindNextAssistPositionNew/n(/n)/n"
  ],
  [
    "FindNextAssistPosition [classic|retail]",
    "\nDescription: Finds the next position to assist a player character",
    "undefined--@return: string _ The coordinates of the next assist position/nfunction/nBANETO_FindNextAssistPosition/n(/n)/n"
  ],
  [
    "GetNumPlayersAroundUnit [classic|retail]",
    "\nDescription: Counts the number of players around a specific unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count players/n--@return: number _ The number of players found/nfunction/nGetNumPlayersAroundUnit/n(/n,/n)/n"
  ],
  [
    "GetNumFriendsAroundUnitPvp [classic|retail]",
    "\nDescription: Counts the number of friendly units around a specific unit in PvP",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count friendly units/n--@return: number _ The number of friendly units found/nfunction/nGetNumFriendsAroundUnitPvp/n(/n,/n)/n"
  ],
  [
    "CountPlayersAroundMe [classic|retail]",
    "\nDescription: Counts the number of players around the current player character",
    "undefined--@arg radius: number _ The radius within which to count players/n--@return: number _ The number of players found/nfunction/nCountPlayersAroundMe/n(/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundUnitPvp [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific unit in PvP",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count hostile enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundUnitPvp/n(/n,/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundUnitBlacklistFunc [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific unit, excluding those on a blacklist",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count hostile enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundUnitBlacklistFunc/n(/n,/n)/n"
  ],
  [
    "GetNumPossibleEnemiesAroundUnit [classic|retail]",
    "\nDescription: Counts the number of potential enemies around a specific unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count potential enemies/n--@return: number _ The number of potential enemies found/nfunction/nGetNumPossibleEnemiesAroundUnit/n(/n,/n)/n"
  ],
  [
    "GetNumHostileEnemiesAroundUnit [classic|retail]",
    "\nDescription: Counts the number of hostile enemies around a specific unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg radius: number _ The radius within which to count hostile enemies/n--@return: number _ The number of hostile enemies found/nfunction/nGetNumHostileEnemiesAroundUnit/n(/n,/n)/n"
  ],
  [
    "Print [classic|retail]",
    "\nDescription: Prints a message to the console",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_Print/n(/n)/n"
  ],
  [
    "PrintError [classic|retail]",
    "\nDescription: Prints an error message to the console",
    "undefined--@arg message: string _ The error message to be printed/n--@return: nil/nfunction/nBANETO_PrintError/n(/n)/n"
  ],
  [
    "SetBamboLog [classic|retail]",
    "\nDescription: Toggles the logging functionality of the BANETO module",
    "undefined--@arg bool: boolean _ True to enable logging, false to disable it/n--@return: nil/nfunction/nBANETO_SetBamboLog/n(/n)/n"
  ],
  [
    "PrintPalaDebug [classic]",
    "\nDescription: Prints a debug message for the Paladin class",
    "undefined--@arg message: string _ The debug message to be printed/n--@return: nil/nfunction/nBANETO_PrintPalaDebug/n(/n)/n"
  ],
  [
    "PrintDungeonDebug [classic]",
    "\nDescription: Prints a debug message for dungeon activities",
    "undefined--@arg message: string _ The debug message to be printed/n--@return: nil/nfunction/nBANETO_PrintDungeonDebug/n(/n)/n"
  ],
  [
    "PrintBambo [classic|retail]",
    "\nDescription: Prints a message to the console with the prefix \"Bambo\"",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintBambo/n(/n)/n"
  ],
  [
    "PrintGatherLandingDebug [classic]",
    "\nDescription: Prints a debug message for the GatherLanding module",
    "undefined--@arg message: string _ The debug message to be printed/n--@return: nil/nfunction/nBANETO_PrintGatherLandingDebug/n(/n)/n"
  ],
  [
    "PrintWarning [classic|retail]",
    "\nDescription: Prints a warning message to the console",
    "undefined--@arg message: string _ The warning message to be printed/n--@return: nil/nfunction/nBANETO_PrintWarning/n(/n)/n"
  ],
  [
    "PrintSuccess [classic|retail]",
    "\nDescription: Prints a success message to the console",
    "undefined--@arg message: string _ The success message to be printed/n--@return: nil/nfunction/nBANETO_PrintSuccess/n(/n)/n"
  ],
  [
    "PrintFight [classic|retail]",
    "\nDescription: Prints a message related to fighting activities to the console",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintFight/n(/n)/n"
  ],
  [
    "PrintMeme [classic|retail]",
    "\nDescription: Prints a meme message to the console",
    "undefined--@arg message: string _ The meme message to be printed/n--@return: nil/nfunction/nBANETO_PrintMeme/n(/n)/n"
  ],
  [
    "PrintProfile [classic|retail]",
    "\nDescription: Prints a message related to profile activities to the console",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintProfile/n(/n)/n"
  ],
  [
    "PrintStateWithDelay [classic|retail]",
    "\nDescription: Prints a message with a delay",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintStateWithDelay/n(/n)/n"
  ],
  [
    "PrintState [classic|retail]",
    "\nDescription: Prints a message",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintState/n(/n)/n"
  ],
  [
    "PrintDev [classic|retail]",
    "\nDescription: Prints a message for development purposes",
    "undefined--@arg message: string _ The message to be printed/n--@return: nil/nfunction/nBANETO_PrintDev/n(/n)/n"
  ],
  [
    "GetVersion [classic|retail]",
    "\nDescription: Gets the version of the BANETO module",
    "undefined--@return: string _ The version of the BANETO module/nfunction/nBANETO_GetVersion/n(/n)/n"
  ],
  [
    "GetRawgoldPerHour [classic|retail]",
    "\nDescription: Gets the raw gold earnings per hour",
    "undefined--@return: number _ The raw gold earnings per hour/nfunction/nBANETO_GetRawgoldPerHour/n(/n)/n"
  ],
  [
    "GetXpPerHour [classic|retail]",
    "\nDescription: Gets the experience points gain rate per hour",
    "undefined--@return: number _ The experience points gain rate per hour/nfunction/nBANETO_GetXpPerHour/n(/n)/n"
  ],
  [
    "StashStatsValues [classic|retail]",
    "\nDescription: Stores the stats values",
    "undefined--@return: nil/nfunction/nBANETO_StashStatsValues/n(/n)/n"
  ],
  [
    "UseWand [classic|retail]",
    "\nDescription: Uses a wand",
    "undefined--@return: nil/nfunction/nUseWand/n(/n)/n"
  ],
  [
    "IsWandBlocked [classic]",
    "\nDescription: Checks if the use of wand is blocked",
    "undefined--@return: boolean _ Returns true if the use of wand is blocked, false otherwise/nfunction/nIsWandBlocked/n(/n)/n"
  ],
  [
    "testLos [classic|retail]",
    "\nDescription: Tests the line of sight",
    "undefined--@return: boolean _ Returns true if the line of sight is clear, false otherwise/nfunction/ntestLos/n(/n)/n"
  ],
  [
    "IsUnitInLos [classic|retail]",
    "\nDescription: Checks if a unit is in the line of sight",
    "undefined--@arg object: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit is in the line of sight, false otherwise/nfunction/nBANETO_IsUnitInLos/n(/n)/n"
  ],
  [
    "IsTargetInLos [classic|retail]",
    "\nDescription: Checks if the target is in the line of sight",
    "undefined--@return: boolean _ Returns true if the target is in the line of sight, false otherwise/nfunction/nBANETO_IsTargetInLos/n(/n)/n"
  ],
  [
    "GetTotalBagSlots [classic|retail]",
    "\nDescription: Gets the total number of bag slots",
    "undefined--@return: number _ The total number of bag slots/nfunction/nBANETO_GetTotalBagSlots/n(/n)/n"
  ],
  [
    "GetFreeBagSlots [classic|retail]",
    "\nDescription: Gets the number of free bag slots",
    "undefined--@return: number _ The number of free bag slots/nfunction/nBANETO_GetFreeBagSlots/n(/n)/n"
  ],
  [
    "CancelShapeshift [classic|retail]",
    "\nDescription: Cancels the shapeshift effect",
    "undefined--@return: nil/nfunction/nBANETO_CancelShapeshift/n(/n)/n"
  ],
  [
    "CancelShapeshift [classic|retail]",
    "\nDescription: Cancels the shapeshift effect",
    "undefined--@return: nil/nfunction/nCancelShapeshift/n(/n)/n"
  ],
  [
    "GetShapeshiftDruid [classic|retail]",
    "\nDescription: Gets the current shapeshift form for a druid",
    "undefined--@return: string _ The current shapeshift form for a druid/nfunction/nGetShapeshiftDruid/n(/n)/n"
  ],
  [
    "HasDebuffWithCount [classic|retail]",
    "\nDescription: Checks if a unit has a specific debuff with a count",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: number _ Returns the count of the specified debuff on the unit, 0 if the unit does not have the debuff/nfunction/nBANETO_HasDebuffWithCount/n(/n,/n,/n)/n"
  ],
  [
    "GetBuffCooldown [classic|retail]",
    "\nDescription: Gets the cooldown of a buff on a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: number _ Returns the cooldown of the buff in seconds/nfunction/nBANETO_GetBuffCooldown/n(/n,/n)/n"
  ],
  [
    "HasBuffWithCount [classic|retail]",
    "\nDescription: Checks if a unit has a specific buff with a count",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: number _ Returns the count of the specified buff on the unit, 0 if the unit does not have the buff/nfunction/nBANETO_HasBuffWithCount/n(/n,/n,/n)/n"
  ],
  [
    "HasBuff [classic|retail]",
    "\nDescription: Checks if a unit has a specific buff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: boolean _ Returns true if the unit has the specified buff, false otherwise/nfunction/nBANETO_HasBuff/n(/n,/n,/n)/n"
  ],
  [
    "GetUnitSpeed [classic|retail]",
    "\nDescription: Gets the speed of a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: number _ Returns the speed of the unit/nfunction/nBANETO_GetUnitSpeed/n(/n)/n"
  ],
  [
    "ShamanPoisonDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Shaman has a poison debuff",
    "undefined--@return: boolean _ Returns true if the Shaman has a poison debuff, false otherwise/nfunction/nBANETO_ShamanPoisonDebuffCheck/n(/n)/n"
  ],
  [
    "HasPoisonDebuffCheck [classic|retail]",
    "\nDescription: Checks if a unit has a poison debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a poison debuff, false otherwise/nfunction/nBANETO_HasPoisonDebuffCheck/n(/n)/n"
  ],
  [
    "HasMagicCheck [classic|retail]",
    "\nDescription: Checks if a unit has a magic debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a magic debuff, false otherwise/nfunction/nBANETO_HasMagicCheck/n(/n)/n"
  ],
  [
    "HasSicknessDebuffCheck [classic|retail]",
    "\nDescription: Checks if a unit has a sickness debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a sickness debuff, false otherwise/nfunction/nBANETO_HasSicknessDebuffCheck/n(/n)/n"
  ],
  [
    "HasCurseDebuffCheck [classic|retail]",
    "\nDescription: Checks if a unit has a curse debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a curse debuff, false otherwise/nfunction/nBANETO_HasCurseDebuffCheck/n(/n)/n"
  ],
  [
    "ShamanSicknessDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Shaman has a sickness debuff",
    "undefined--@return: boolean _ Returns true if the Shaman has a sickness debuff, false otherwise/nfunction/nBANETO_ShamanSicknessDebuffCheck/n(/n)/n"
  ],
  [
    "DelayMountingAndFlying [classic|retail]",
    "\nDescription: Delays mounting and flying for a specified time",
    "undefined--@arg seconds: number _ The delay in seconds/n--@return: nil/nfunction/nBANETO_DelayMountingAndFlying/n(/n)/n"
  ],
  [
    "DelayMeshPathing [classic|retail]",
    "\nDescription: Delays mesh pathing for a specified time",
    "undefined--@arg seconds: number _ The delay in seconds/n--@return: nil/nfunction/nBANETO_DelayMeshPathing/n(/n)/n"
  ],
  [
    "DelayTargeting [classic|retail]",
    "\nDescription: Delays targeting for a specified time",
    "undefined--@arg seconds: number _ The delay in seconds/n--@return: nil/nfunction/nBANETO_DelayTargeting/n(/n)/n"
  ],
  [
    "PaladinPurifyDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Paladin has a purify debuff",
    "undefined--@return: boolean _ Returns true if the Paladin has a purify debuff, false otherwise/nfunction/nBANETO_PaladinPurifyDebuffCheck/n(/n)/n"
  ],
  [
    "DruidCurseDebuffCheck [classic]",
    "\nDescription: Checks if the Druid has a curse debuff",
    "undefined--@return: boolean _ Returns true if the Druid has a curse debuff, false otherwise/nfunction/nBANETO_DruidCurseDebuffCheck/n(/n)/n"
  ],
  [
    "DruidPoisonDebuffCheck [classic]",
    "\nDescription: Checks if the Druid has a poison debuff",
    "undefined--@return: boolean _ Returns true if the Druid has a poison debuff, false otherwise/nfunction/nBANETO_DruidPoisonDebuffCheck/n(/n)/n"
  ],
  [
    "PriestCureDiseaseDebuffCheck [classic]",
    "\nDescription: Checks if the Priest can cure a disease debuff",
    "undefined--@return: boolean _ Returns true if the Priest can cure a disease debuff, false otherwise/nfunction/nBANETO_PriestCureDiseaseDebuffCheck/n(/n)/n"
  ],
  [
    "PaladinCleanseDebuffCheck [classic|retail]",
    "\nDescription: Checks if the Paladin can cleanse a debuff",
    "undefined--@return: boolean _ Returns true if the Paladin can cleanse a debuff, false otherwise/nfunction/nBANETO_PaladinCleanseDebuffCheck/n(/n)/n"
  ],
  [
    "formatItemForHekili [classic|retail]",
    "\nDescription: Formats an item for Hekili",
    "undefined--@arg itemArg: string _ The item to be formatted/n--@return: string _ The formatted item/nfunction/nformatItemForHekili/n(/n)/n"
  ],
  [
    "isHekiliLoaded [classic|retail]",
    "\nDescription: Checks if Hekili is loaded",
    "undefined--@return: boolean _ Returns true if Hekili is loaded, false otherwise/nfunction/nisHekiliLoaded/n(/n)/n"
  ],
  [
    "Hekili [classic|retail]",
    "\nDescription: Returns the Hekili state",
    "undefined--@return: string _ Returns the Hekili state/nfunction/nBANETO_Hekili/n(/n)/n"
  ],
  [
    "GetBuffDuration [classic|retail]",
    "\nDescription: Gets the duration of a buff on a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: number _ Returns the duration of the buff in seconds/nfunction/nBANETO_GetBuffDuration/n(/n,/n)/n"
  ],
  [
    "GetDebuffDuration [classic|retail]",
    "\nDescription: Gets the duration of a debuff on a unit",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: number _ Returns the duration of the debuff in seconds/nfunction/nBANETO_GetDebuffDuration/n(/n,/n)/n"
  ],
  [
    "HasStealableCheck [classic|retail]",
    "\nDescription: Checks if a unit has a stealable buff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a stealable buff, false otherwise/nfunction/nBANETO_HasStealableCheck/n(/n)/n"
  ],
  [
    "HasHelpfulMagicCheck [classic|retail]",
    "\nDescription: Checks if a unit has a helpful magic buff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has a helpful magic buff, false otherwise/nfunction/nBANETO_HasHelpfulMagicCheck/n(/n)/n"
  ],
  [
    "HasEnrageCheck [classic|retail]",
    "\nDescription: Checks if a unit has an enrage effect",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@return: boolean _ Returns true if the unit has an enrage effect, false otherwise/nfunction/nBANETO_HasEnrageCheck/n(/n)/n"
  ],
  [
    "HasDebuffWithOwnerCheck [classic|retail]",
    "\nDescription: Checks if a unit has a specific debuff with a specific owner",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@return: boolean _ Returns true if the unit has the specified debuff with the specified owner, false otherwise/nfunction/nBANETO_HasDebuffWithOwnerCheck/n(/n,/n)/n"
  ],
  [
    "CountDebuffsAroundUnit [classic|retail]",
    "\nDescription: Counts the number of units around a specified unit with a specific debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg debuff: string _ The name of the debuff/n--@arg range: number _ The range to check for units with the debuff/n--@return: number _ Returns the number of units with the debuff within the specified range/nfunction/nBANETO_CountDebuffsAroundUnit/n(/n,/n,/n)/n"
  ],
  [
    "HasDebuff [classic|retail]",
    "\nDescription: Checks if a unit has a specific debuff",
    "undefined--@arg unit: string _ The unitID of the target unit/n--@arg spellid: number _ The ID of the spell/n--@arg perfectmatch: boolean _ If true, matches id exactly. If false, partial matches are allowed. E.g. lower ranks/n--@return: boolean _ Returns true if the unit has the specified debuff, false otherwise/nfunction/nBANETO_HasDebuff/n(/n,/n,/n)/n"
  ],
  [
    "IsItemFood [classic|retail]",
    "\nDescription: Checks if an item is food",
    "undefined--@arg itemid: number _ The ID of the item/n--@return: boolean _ Returns true if the item is food, false otherwise/nfunction/nBANETO_IsItemFood/n(/n)/n"
  ],
  [
    "IsItemDrink [classic|retail]",
    "\nDescription: Checks if an item is drink",
    "undefined--@arg itemid: number _ The ID of the item/n--@return: boolean _ Returns true if the item is drink, false otherwise/nfunction/nBANETO_IsItemDrink/n(/n)/n"
  ],
  [
    "FindDrinkInBags [classic|retail]",
    "\nDescription: Finds drink in bags",
    "undefined--@return: bagID number bagID of the found drink, nil if not found/nfunction/nBANETO_FindDrinkInBags/n(/n)/n"
  ],
  [
    "IsWellFed [classic|retail]",
    "\nDescription: Checks if the player is well fed",
    "undefined--@return: boolean _ Returns true if the player is well fed, false otherwise/nfunction/nBANETO_IsWellFed/n(/n)/n"
  ],
  [
    "FindBuffFoodInBags [classic|retail]",
    "\nDescription: Finds buff food in bags",
    "undefined--@return: bagID number bagID of the found buff food, nil if not found/nfunction/nBANETO_FindBuffFoodInBags/n(/n)/n"
  ],
  [
    "ScanGraveyards [classic|retail]",
    "\nDescription: Scans for graveyards",
    "undefined--@return: table _ Returns a table of graveyard locations/nfunction/nBANETO_ScanGraveyards/n(/n)/n"
  ],
  [
    "GetClosestGraveyard [classic|retail]",
    "\nDescription: Gets the closest graveyard",
    "undefined--@return: string _ Returns the location of the closest graveyard/nfunction/nBANETO_GetClosestGraveyard/n(/n)/n"
  ],
  [
    "FindFoodInBags [classic|retail]",
    "\nDescription: Finds food in bags",
    "undefined--@return: bagID number bagID of the found food, nil if not found/nfunction/nBANETO_FindFoodInBags/n(/n)/n"
  ],
  [
    "GetFoodAmountInBags [classic|retail]",
    "\nDescription: Gets the amount of food in bags",
    "undefined--@return: number _ Returns the amount of food in bags/nfunction/nBANETO_GetFoodAmountInBags/n(/n)/n"
  ],
  [
    "HttpGETRequestCustom [classic|retail]",
    "\nDescription: Sends a HTTP GET request to a specified URL and handles the response with a specified callback handler",
    "undefined--@arg url: string _ The URL to send the request to/nfunction/n-- The callback handler to process the response/nreturn/n:/nnil/n]/n]/n--/nfunction/nHttpGETRequestCustom/n(/n,/n)/n"
  ],
  [
    "HttpGet [classic|retail]",
    "\nDescription: Sends a HTTP GET request to a specified URL and handles the response with a specified callback function",
    "undefined--@arg url1: string _ The URL to send the request to/nfunction/nreturn/n:/nnil/n]/n]/n--/nfunction/nBANETO_HttpGet/n(/n,/n)/n"
  ],
  [
    "HttpPost [classic|retail]",
    "\nDescription: Sends a HTTP POST request to a specified URL with a specified payload and handles the response with a specified callback function",
    "undefined--@arg url1: string _ The URL to send the request to/n--@arg payload: json _ The payload to send with the request/nfunction/nreturn/n:/nnil/n]/n]/n--/nfunction/nBANETO_HttpPost/n(/n,/n,/n)/n"
  ],
  [
    "HttpPut [classic|retail]",
    "\nDescription: Sends a HTTP PUT request to a specified URL with a specified payload and handles the response with a specified callback function",
    "undefined--@arg url1: string _ The URL to send the request to/n--@arg payload: json _ The payload to send with the request/nfunction/nreturn/n:/nnil/n]/n]/n--/nfunction/nBANETO_HttpPut/n(/n,/n,/n)/n"
  ],
  [
    "HttpRequestCustom [classic|retail]",
    "\nDescription: Sends a HTTP request to a specified URL",
    "undefined--@arg url: string _ The URL to send the request to/n--@return: string _ The response from the HTTP request/nfunction/nHttpRequestCustom/n(/n)/n"
  ],
  [
    "GoAnon [classic|retail]",
    "\nDescription: Hides characterspecific information so you can take screenshots or record videos without exposing your account to risk.",
    "undefined--@return: nil/nfunction/nBANETO_GoAnon/n(/n)/n"
  ],
  [
    "LoadOneZeroProfilelist [classic|retail]",
    "\nDescription: Loads the OneZero profile list",
    "undefined--@return: table _ Returns a table of the OneZero profiles/nfunction/nBANETO_LoadOneZeroProfilelist/n(/n)/n"
  ],
  [
    "IsOzDbAllowed [classic|retail]",
    "\nDescription: Checks if the Oz database is allowed",
    "undefined--@return: boolean _ Returns true if the Oz database is allowed, false otherwise/nfunction/nBANETO_IsOzDbAllowed/n(/n)/n"
  ],
  [
    "IsOzAllowed [classic|retail]",
    "\nDescription: Checks if Oz is allowed",
    "undefined--@return: boolean _ Returns true if Oz is allowed, false otherwise/nfunction/nBANETO_IsOzAllowed/n(/n)/n"
  ],
  [
    "LoadOneZeroDb [classic|retail]",
    "\nDescription: Loads the OneZero database",
    "undefined--@return: table _ Returns a table of the OneZero database/nfunction/nBANETO_LoadOneZeroDb/n(/n)/n"
  ],
  [
    "LoadOneZeroAuth [classic|retail]",
    "\nDescription: Loads the OneZero authentication",
    "undefined--@return: string _ Returns the OneZero authentication string/nfunction/nBANETO_LoadOneZeroAuth/n(/n)/n"
  ],
  [
    "GetDrinkAmountInBags [classic|retail]",
    "\nDescription: Retrieves the amount of drink items in bags.",
    "undefined--@return: number The number of drink items in bags./nfunction/nBANETO_GetDrinkAmountInBags/n(/n)/n"
  ],
  [
    "GetBestAmmoType [classic|retail]",
    "\nDescription: Determines the best ammo type available.",
    "undefined--@return: string The name of the best ammo type./nfunction/nBANETO_GetBestAmmoType/n(/n)/n"
  ],
  [
    "EquipBestAmmoType [classic|retail]",
    "\nDescription: Equips the best ammo type available.",
    "undefined--@return: nil/nfunction/nBANETO_EquipBestAmmoType/n(/n)/n"
  ],
  [
    "ForceQuit [classic|retail]",
    "\nDescription: Forces the game client to quit.",
    "undefined--@return: nil/nfunction/nBANETO_ForceQuit/n(/n)/n"
  ],
  [
    "GetAmmoAmountInBags [classic|retail]",
    "\nDescription: Retrieves the amount of ammo in bags.",
    "undefined--@return: number The number of ammo items in bags./nfunction/nBANETO_GetAmmoAmountInBags/n(/n)/n"
  ],
  [
    "UnitHealth [classic|retail]",
    "\nDescription: Retrieves the health of a specific unit in percentage.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The health of the unit./nfunction/nBANETO_UnitHealth/n(/n)/n"
  ],
  [
    "UnitHealthRaw [classic|retail]",
    "\nDescription: Retrieves the health of a specific unit.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The health of the unit./nfunction/nBANETO_UnitHealthRaw/n(/n)/n"
  ],
  [
    "UnitManaPercent [classic|retail]",
    "\nDescription: Retrieves the percentage of mana of a specific unit. Always returns 100 for class 1 and class 4.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The percentage of mana of the unit./nfunction/nBANETO_UnitManaPercent/n(/n)/n"
  ],
  [
    "UnitMana [classic|retail]",
    "\nDescription: Retrieves the mana of a specific unit in percentage.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: number The mana of the unit./nfunction/nBANETO_UnitMana/n(/n)/n"
  ],
  [
    "GetObjectWithCoordinates [classic|retail]",
    "\nDescription: Retrieves an object with specific coordinates.",
    "undefined--@arg x: number, The X_coordinate of the object./n--@arg y: number, The Y_coordinate of the object./n--@arg z: number, The Z_coordinate of the object./n--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithCoordinates/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetObjectWithIdTiny [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID in close proximity.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdTiny/n(/n)/n"
  ],
  [
    "GetObjectWithIdClose [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID in close proximity.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdClose/n(/n)/n"
  ],
  [
    "GetObjectWithIdMedium [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID in medium proximity.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdMedium/n(/n)/n"
  ],
  [
    "GetObjectWithIdIncludingBlacklistCheck [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID, includes blacklist check.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithIdIncludingBlacklistCheck/n(/n)/n"
  ],
  [
    "GetObjectWithId [classic|retail]",
    "\nDescription: Retrieves an object with a specific ID.",
    "undefined--@arg id: string, The ID of the object./n--@return: number The objectId of the object./nfunction/nGetObjectWithId/n(/n)/n"
  ],
  [
    "CheckMammothSpammer [classic|retail]",
    "\nDescription: Checks for Mammoth spammers.",
    "undefined--@return: boolean True if a spammer is detected, otherwise false./nfunction/nBANETO_CheckMammothSpammer/n(/n)/n"
  ],
  [
    "IsInsideDungeon [classic]",
    "\nDescription: Checks if the player is inside a dungeon.",
    "undefined--@return: boolean True if the player is inside a dungeon, otherwise false./nfunction/nBANETO_IsInsideDungeon/n(/n)/n"
  ],
  [
    "TestHs [classic]",
    "\nDescription: Tests the hearthstone.",
    "undefined--@return: nil/nfunction/nBANETO_TestHs/n(/n)/n"
  ],
  [
    "MakesHsUsageSense [classic|retail]",
    "\nDescription: Checks if using hearthstone makes sense at the moment.",
    "undefined--@return: boolean True if using the hearthstone makes sense, otherwise false./nfunction/nBANETO_MakesHsUsageSense/n(/n)/n"
  ],
  [
    "GetObjectLocationWithId [classic|retail]",
    "\nDescription: Retrieves the location of an object with a specific ID.",
    "undefined--@arg id: string, The ID of the object./n--@return: x number The X_coordinate of the object./nfunction/nGetObjectLocationWithId/n(/n)/n"
  ],
  [
    "IsMailboxObject [classic|retail]",
    "\nDescription: Checks if an object is a mailbox.",
    "undefined--@arg id: string, The ID of the object./n--@return: boolean True if the object is a mailbox, otherwise false./nfunction/nBANETO_IsMailboxObject/n(/n)/n"
  ],
  [
    "MailboxInteract [classic|retail]",
    "\nDescription: Interacts with a mailbox.",
    "undefined--@return: nil/nfunction/nBANETO_MailboxInteract/n(/n)/n"
  ],
  [
    "GetSkillLineIndexWithTradeName [classic]",
    "\nDescription: Retrieves the index of a skill line with a specific trade name.",
    "undefined--@arg tradename: string, The name of the trade./n--@return: number The index of the skill line./nfunction/nBANETO_GetSkillLineIndexWithTradeName/n(/n)/n"
  ],
  [
    "GetSkillLineIndexWithItemId [classic|retail]",
    "\nDescription: Retrieves the index of a skill line with a specific item ID.",
    "undefined--@arg itemid: string, The ID of the item./n--@return: number The index of the skill line./nfunction/nBANETO_GetSkillLineIndexWithItemId/n(/n)/n"
  ],
  [
    "GetAcherusEtage [classic]",
    "\nDescription: Determines the current floor in Acherus.",
    "undefined--@return: number The current floor./nfunction/nBANETO_GetAcherusEtage/n(/n)/n"
  ],
  [
    "MoveAcherusEtage [classic]",
    "\nDescription: Moves between floors in Acherus.",
    "undefined--@arg upOrDown: string, Direction to move (\"up\" or \"down\")./n--@return: nil/nfunction/nBANETO_MoveAcherusEtage/n(/n)/n"
  ],
  [
    "Craft [classic|retail]",
    "\nDescription: Crafts an item with a specific index.",
    "undefined--@arg index: number, The index of the item to craft./n--@return: nil/nfunction/nBANETO_Craft/n(/n)/n"
  ],
  [
    "--@arg itemname: string",
    "\nclassic",
    "undefined--@return: boolean True if the player has materials, otherwise false./nfunction/nBANETO_HasMaterialsForBandages/n(/n)/n"
  ],
  [
    "CraftBandages [classic|retail]",
    "\nDescription: Crafts bandages if materials are available.",
    "undefined--@return: nil/nfunction/nBANETO_CraftBandages/n(/n)/n"
  ],
  [
    "WriteFile [classic|retail]",
    "\nDescription: Writes content to a file.",
    "undefined--@arg path: string, The path of the file./n--@arg content: string, The content to write./n--@arg append: boolean, If true, the content will be appended to the file./n--@return: nil/nfunction/nBANETO_WriteFile/n(/n,/n,/n)/n"
  ],
  [
    "ReadFile [classic|retail]",
    "\nDescription: Reads content from a file.",
    "undefined--@arg path: string, The path of the file./n--@return: string The content of the file./nfunction/nBANETO_ReadFile/n(/n)/n"
  ],
  [
    "MailHandler [classic|retail]",
    "\nDescription: Handles the mailing system.",
    "undefined--@return: nil/nfunction/nBANETO_MailHandler/n(/n)/n"
  ],
  [
    "IsItemInBanetoCategories [classic|retail]",
    "\nDescription: Checks if an item is in the Baneto categories.",
    "undefined--@arg itemid: string, ID of the item to check./n--@return: boolean Returns true if the item is in Baneto categories, otherwise false./nfunction/nBANETO_IsItemInBanetoCategories/n(/n)/n"
  ],
  [
    "IsItemMailBlacklisted [classic|retail]",
    "\nDescription: Checks if an item is blacklisted for mailing.",
    "undefined--@arg itemid: string, ID of the item to check./n--@return: boolean Returns true if the item is blacklisted, otherwise false./nfunction/nBANETO_IsItemMailBlacklisted/n(/n)/n"
  ],
  [
    "IsItemInAlwaysMailList [classic|retail]",
    "\nDescription: Checks if an item is always mailed.",
    "undefined--@arg itemid: string, ID of the item to check./n--@return: boolean Returns true if the item is always mailed, otherwise false./nfunction/nBANETO_IsItemInAlwaysMailList/n(/n)/n"
  ],
  [
    "IsItemInNeverSellList [classic|retail]",
    "\nDescription: Checks if an item is never sold.",
    "undefined--@arg itemname: string, Name of the item to check./n--@return: boolean Returns true if the item is never sold, otherwise false./nfunction/nBANETO_IsItemInNeverSellList/n(/n)/n"
  ],
  [
    "IsItemInDoNotDisenchantList [classic|retail]",
    "\nDescription: Checks if an item is not to be disenchanted.",
    "undefined--@arg itemname: string, Name of the item to check./n--@return: boolean Returns true if the item is not to be disenchanted, otherwise false./nfunction/nBANETO_IsItemInDoNotDisenchantList/n(/n)/n"
  ],
  [
    "IsItemInDeleteList [classic|retail]",
    "\nDescription: Checks if an item is to be deleted.",
    "undefined--@arg itemname: string, Name of the item to check./n--@return: boolean Returns true if the item is to be deleted, otherwise false./nfunction/nBANETO_IsItemInDeleteList/n(/n)/n"
  ],
  [
    "EternalExtrawunschExecuter [classic|retail]",
    "\nDescription: Executes the Eternal Extrawunsch.",
    "undefined--@return: nil/nfunction/nBANETO_EternalExtrawunschExecuter/n(/n)/n"
  ],
  [
    "EternalExtrawunsch [classic|retail]",
    "\nDescription: Triggers the Eternal Extrawunsch.",
    "undefined--@return: nil/nfunction/nBANETO_EternalExtrawunsch/n(/n)/n"
  ],
  [
    "IsGroupAffectingCombat [classic]",
    "\nDescription: Checks if the group is affecting combat.",
    "undefined--@return: boolean Returns true if the group is affecting combat, otherwise false./nfunction/nBANETO_IsGroupAffectingCombat/n(/n)/n"
  ],
  [
    "ArcaneMageToggleMode [classic]",
    "\nDescription: Toggles the mode for an Arcane Mage.",
    "undefined--@return: nil/nfunction/nBANETO_ArcaneMageToggleMode/n(/n)/n"
  ],
  [
    "GetMyMaster [classic|retail]",
    "\nDescription: Gets the master of the calling unit.",
    "undefined--@return: string Returns the unit ID of the master./nfunction/nBANETO_GetMyMaster/n(/n)/n"
  ],
  [
    "GetMyDungeonLeader [classic]",
    "\nDescription: Gets the leader of the dungeon group.",
    "undefined--@return: string Returns the unit ID of the dungeon leader./nfunction/nBANETO_GetMyDungeonLeader/n(/n)/n"
  ],
  [
    "GetMyDungeonRole [classic]",
    "\nDescription: Gets the role of the calling unit in the dungeon group.",
    "undefined--@return: string Returns the role of the calling unit (Tank, Healer, DPS)./nfunction/nBANETO_GetMyDungeonRole/n(/n)/n"
  ],
  [
    "IsSomeoneTargetingUsZinara [classic|retail]",
    "\nDescription: Checks if someone is targeting us in Zinara.",
    "undefined--@return: boolean Returns true if someone is targeting us, otherwise false./nfunction/nBANETO_IsSomeoneTargetingUsZinara/n(/n)/n"
  ],
  [
    "IsSomeoneMissingInGroup [classic]",
    "\nDescription: Checks if someone is missing in the group.",
    "undefined--@return: boolean Returns true if someone is missing, otherwise false./nfunction/nBANETO_IsSomeoneMissingInGroup/n(/n)/n"
  ],
  [
    "IsGroupReadyForNextNode [classic]",
    "\nDescription: Checks if the group is ready for the next node.",
    "undefined--@return: boolean Returns true if the group is ready, otherwise false./nfunction/nBANETO_IsGroupReadyForNextNode/n(/n)/n"
  ],
  [
    "IsGroupRegenerating [classic]",
    "\nDescription: Checks if the group is regenerating.",
    "undefined--@return: boolean Returns true if the group is regenerating, otherwise false./nfunction/nBANETO_IsGroupRegenerating/n(/n)/n"
  ],
  [
    "IsGroupInvitingFinished [classic]",
    "\nDescription: Checks if the group inviting process is finished.",
    "undefined--@return: boolean Returns true if the process is finished, otherwise false./nfunction/nBANETO_IsGroupInvitingFinished/n(/n)/n"
  ],
  [
    "GroupInviting [classic]",
    "\nDescription: Invites group members.",
    "undefined--@return: nil/nfunction/nBANETO_GroupInviting/n(/n)/n"
  ],
  [
    "IsDungeonObject [classic]",
    "\nDescription: Checks if an object is a dungeon object.",
    "undefined--@arg object: string, Object ID to check./n--@return: boolean Returns true if the object is a dungeon object, otherwise false./nfunction/nBANETO_IsDungeonObject/n(/n)/n"
  ],
  [
    "GetDungeonObjectScanRange [classic]",
    "\nDescription: Gets the scan range for a dungeon object.",
    "undefined--@arg object: string, Object ID to check./n--@return: number Returns the scan range for the given object./nfunction/nBANETO_GetDungeonObjectScanRange/n(/n)/n"
  ],
  [
    "SCAN_DUNGEONOBJECTS [classic]",
    "\nDescription: Scans for dungeon objects.",
    "undefined--@return: object/nfunction/nBANETO_SCAN_DUNGEONOBJECTS/n(/n)/n"
  ],
  [
    "SCAN_DUNGEON [classic]",
    "\nDescription: Scans a specific area in the dungeon.",
    "undefined--@arg xCord: number, The X_coordinate of the scan center./n--@arg yCord: number, The Y_coordinate of the scan center./n--@arg zCord: number, The Z_coordinate of the scan center./n--@arg radius: number, The radius of the scan./n--@return: nil/nfunction/nBANETO_SCAN_DUNGEON/n(/n,/n,/n,/n)/n"
  ],
  [
    "SCAN_DEBUG [classic]",
    "\nDescription: Debugs the scan process.",
    "undefined--@return: nil/nfunction/nBANETO_SCAN_DEBUG/n(/n)/n"
  ],
  [
    "SCAN [classic|retail]",
    "\nDescription: Scans a specific area.",
    "undefined--@arg xCord: number, The X_coordinate of the scan center./n--@arg yCord: number, The Y_coordinate of the scan center./n--@arg zCord: number, The Z_coordinate of the scan center./n--@arg radius: number, The radius of the scan./n--@return: object/nfunction/nBANETO_SCAN/n(/n,/n,/n,/n)/n"
  ],
  [
    "IsUnitQuestTarget [classic|retail]",
    "\nDescription: Checks if a unit is a quest target.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: boolean Returns true if the unit is a quest target, otherwise false./nfunction/nBANETO_IsUnitQuestTarget/n(/n)/n"
  ],
  [
    "GetContinentId [classic|retail]",
    "\nDescription: Gets the current continent ID.",
    "undefined--@return: string Returns the current continent ID./nfunction/nBANETO_GetContinentId/n(/n)/n"
  ],
  [
    "SCANQUEST [classic|retail]",
    "\nDescription: Scans a specific area for quest objectives.",
    "undefined--@arg xCord: number, The X_coordinate of the scan center./n--@arg yCord: number, The Y_coordinate of the scan center./n--@arg zCord: number, The Z_coordinate of the scan center./n--@arg radius: number, The radius of the scan./n--@return: object/nfunction/nBANETO_SCANQUEST/n(/n,/n,/n,/n)/n"
  ],
  [
    "UnitIsLootable [classic|retail]",
    "\nDescription: Checks if a unit can be looted.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: boolean Returns true if the unit can be looted, otherwise false./nfunction/nUnitIsLootable/n(/n)/n"
  ],
  [
    "SCAN_BGASSIST [classic|retail]",
    "\nDescription: Assists in scanning the Battleground.",
    "undefined--@return: nil/nfunction/nBANETO_SCAN_BGASSIST/n(/n)/n"
  ],
  [
    "GetPossibleHealTargetInBg [classic|retail]",
    "\nDescription: Gets a possible heal target in the Battleground.",
    "undefined--@return: string Returns the Unit ID of the heal target./nfunction/nBANETO_GetPossibleHealTargetInBg/n(/n)/n"
  ],
  [
    "SCAN_BG_HEAL [classic]",
    "\nDescription: Scans for healing opportunities in the Battleground.",
    "undefined--@return: nil/nfunction/nBANETO_SCAN_BG_HEAL/n(/n)/n"
  ],
  [
    "SCAN_BG [classic|retail]",
    "\nDescription: Scans the Battleground.",
    "undefined--@return: object/nfunction/nBANETO_SCAN_BG/n(/n)/n"
  ],
  [
    "ObjectPosition [classic|retail]",
    "\nDescription: Gets the position of an object.",
    "undefined--@arg object: string, Object ID to check./n--@return: x number The X_coordinate of the object./nfunction/nBANETO_ObjectPosition/n(/n)/n"
  ],
  [
    "IsUnitInfrontOfUs [classic]",
    "\nDescription: Checks if a unit is in front of us.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: boolean Returns true if the unit is in front of us, otherwise false./nfunction/nBANETO_IsUnitInfrontOfUs/n(/n)/n"
  ],
  [
    "GetPointInfrontOfUsAngleWithDistance [classic|retail]",
    "\nDescription: Gets a point at a certain distance and angle in front of us.",
    "undefined--@arg distance: number, The distance from us./n--@arg angle: number, The angle in degrees./n--@return: x number The X_coordinate of the point./nfunction/nBANETO_GetPointInfrontOfUsAngleWithDistance/n(/n,/n)/n"
  ],
  [
    "GetPointInfrontOfUsWithDistance [classic|retail]",
    "\nDescription: Gets a point at a certain distance in front of us.",
    "undefined--@arg distance: number, The distance from us./n--@return: x number The X_coordinate of the point./nfunction/nBANETO_GetPointInfrontOfUsWithDistance/n(/n)/n"
  ],
  [
    "GetFacingValue [classic|retail]",
    "\nDescription: Gets the facing value towards a specific coordinate.",
    "undefined--@arg xMob: number, The X_coordinate of the target./n--@arg yMob: number, The Y_coordinate of the target./n--@arg zMob: number, The Z_coordinate of the target./n--@return: number Returns the facing value./nfunction/nBANETO_GetFacingValue/n(/n,/n,/n)/n"
  ],
  [
    "IsBrdHumanoid [classic|retail]",
    "\nDescription: Checks if an object is a Blackrock Depths (BRD) humanoid.",
    "undefined--@arg object: string, Object ID to check./n--@return: boolean Returns true if the object is a BRD humanoid, otherwise false./nfunction/nBANETO_IsBrdHumanoid/n(/n)/n"
  ],
  [
    "IsBrdFiremob [classic|retail]",
    "\nDescription: Checks if an object is a Blackrock Depths (BRD) fire mob.",
    "undefined--@arg object: string, Object ID to check./n--@return: boolean Returns true if the object is a BRD fire mob, otherwise false./nfunction/nBANETO_IsBrdFiremob/n(/n)/n"
  ],
  [
    "BrdIsFireMobAroundUs [classic|retail]",
    "\nDescription: Checks if there is a Blackrock Depths (BRD) fire mob around us.",
    "undefined--@return: boolean Returns true if there is a BRD fire mob around us, otherwise false./nfunction/nBANETO_BrdIsFireMobAroundUs/n(/n)/n"
  ],
  [
    "LoadNoro [classic|retail]",
    "\nDescription: Loads Noro.",
    "undefined--@return: nil/nfunction/nBANETO_LoadNoro/n(/n)/n"
  ],
  [
    "BrdNodeSkipperMode1 [classic|retail]",
    "\nDescription: Blackrock Depths (BRD) node skipper mode 1.",
    "undefined--@return: nil/nfunction/nBANETO_BrdNodeSkipperMode1/n(/n)/n"
  ],
  [
    "SCAN_BRD_MODE1 [classic|retail]",
    "\nDescription: Scans for Blackrock Depths (BRD) mode 1.",
    "undefined--@return: nil/nfunction/nBANETO_SCAN_BRD_MODE1/n(/n)/n"
  ],
  [
    "SCAN_DEAD [classic|retail]",
    "\nDescription: Scans for dead units.",
    "undefined--@return: nil/nfunction/nBANETO_SCAN_DEAD/n(/n)/n"
  ],
  [
    "SCAN_CANNIBALISM [classic]",
    "\nDescription: Scans for cannibalism.",
    "undefined--@return: nil/nfunction/nBANETO_SCAN_CANNIBALISM/n(/n)/n"
  ],
  [
    "SCAN_COMBATLOOT [classic|retail]",
    "\nDescription: Scans for combat loot.",
    "undefined--@return: nil/nfunction/nBANETO_SCAN_COMBATLOOT/n(/n)/n"
  ],
  [
    "UnitAffectingCombat [classic|retail]",
    "\nDescription: Checks if a unit is in combat.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: boolean Returns true if the unit is in combat, otherwise false./nfunction/nBANETO_UnitAffectingCombat/n(/n)/n"
  ],
  [
    "SCAN_LOOT [classic|retail]",
    "\nDescription: Scans for loot.",
    "undefined--@return: nil/nfunction/nBANETO_SCAN_LOOT/n(/n)/n"
  ],
  [
    "FindSkinFlag [classic]",
    "\nDescription: Finds a skin flag.",
    "undefined--@return: nil/nfunction/nBANETO_FindSkinFlag/n(/n)/n"
  ],
  [
    "ObjectSkinnable [classic|retail]",
    "\nDescription: Checks if an object is skinnable.",
    "undefined--@arg object: string, Object ID to check./n--@return: boolean Returns true if the object is skinnable, otherwise false./nfunction/nBANETO_ObjectSkinnable/n(/n)/n"
  ],
  [
    "SCAN_SKINNING [classic|retail]",
    "\nDescription: Scans for skinning.",
    "undefined--@return: object/nfunction/nBANETO_SCAN_SKINNING/n(/n)/n"
  ],
  [
    "GetTinkrObjectFromTarget [classic]",
    "\nDescription: Gets Tinkr object from target.",
    "undefined--@return: object/nfunction/nGetTinkrObjectFromTarget/n(/n)/n"
  ],
  [
    "UnitGUIDUnlocked [classic|retail]",
    "\nDescription: Checks if a unit's GUID is unlocked.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: boolean Returns true if the unit's GUID is unlocked, otherwise false./nfunction/nUnitGUIDUnlocked/n(/n)/n"
  ],
  [
    "ObjectId [classic|retail]",
    "\nDescription: Gets the ID of an object.",
    "undefined--@arg unit: string, unit or object to check./n--@return: string Returns the object ID./nfunction/nBANETO_ObjectId/n(/n)/n"
  ],
  [
    "IsUnitFlightmaster [classic|retail]",
    "\nDescription: Checks if a unit is a flightmaster.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: boolean Returns true if the unit is a flightmaster, otherwise false./nfunction/nBANETO_IsUnitFlightmaster/n(/n)/n"
  ],
  [
    "IsFlightmasterKnown [classic|retail]",
    "\nDescription: Checks if a specific flightmaster is known.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: boolean Returns true if the flightmaster is known, otherwise false./nfunction/nBANETO_IsFlightmasterKnown/n(/n)/n"
  ],
  [
    "IsFlightmasterIdKnownV2 [classic|retail]",
    "\nDescription: Version 2 of checking if a specific flightmaster by their ID is known.",
    "undefined--@arg id: string, Flightmaster ID to check./n--@return: boolean Returns true if the flightmaster ID is known, otherwise false./nfunction/nBANETO_IsFlightmasterIdKnownV2/n(/n)/n"
  ],
  [
    "IsFlightmasterKnownV2 [classic|retail]",
    "\nDescription: Version 2 of checking if a specific flightmaster is known.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: boolean Returns true if the flightmaster is known, otherwise false./nfunction/nBANETO_IsFlightmasterKnownV2/n(/n)/n"
  ],
  [
    "DefineKnownFlightmaster [classic|retail]",
    "\nDescription: Defines a flightmaster as known.",
    "undefined--@arg id: string, Flightmaster ID to define./n--@return: nil/nfunction/nBANETO_DefineKnownFlightmaster/n(/n)/n"
  ],
  [
    "DefineKnownFlightmasterV2 [classic|retail]",
    "\nDescription: Version 2 of defining a known flightmaster, with positional coordinates.",
    "undefined--@arg x: number, X_coordinate of the flightmaster's position./n--@arg y: number, Y_coordinate of the flightmaster's position./n--@arg z: number, Z_coordinate of the flightmaster's position./n--@arg id: string, Flightmaster ID to define./n--@return: nil/nfunction/nBANETO_DefineKnownFlightmasterV2/n(/n,/n,/n,/n)/n"
  ],
  [
    "SCAN_FPMASTER [classic]",
    "\nDescription: Scans for flightmasters.",
    "undefined--@return: nil/nfunction/nBANETO_SCAN_FPMASTER/n(/n)/n"
  ],
  [
    "IsCurrentSpell [classic|retail]",
    "\nDescription: Checks if a specific spell is currently active.",
    "undefined--@arg spellID: number, Spell ID to check./n--@return: boolean Returns true if the spell is currently active, otherwise false./nfunction/nBANETO_IsCurrentSpell/n(/n)/n"
  ],
  [
    "ClickPosition [classic|retail]",
    "\nDescription: Sends a click event at the specified world position.",
    "undefined--@arg x: number, X_coordinate of the click position./n--@arg y: number, Y_coordinate of the click position./n--@arg z: number, Z_coordinate of the click position./n--@return: nil/nfunction/nBANETO_ClickPosition/n(/n,/n,/n)/n"
  ],
  [
    "IsGatheringNodeRaw [classic|retail]",
    "\nDescription: Checks if an object is a raw gathering node.",
    "undefined--@arg objectid: number, Object ID to check./n--@return: boolean Returns true if the object is a raw gathering node, otherwise false./nfunction/nBANETO_IsGatheringNodeRaw/n(/n)/n"
  ],
  [
    "IsCustomGatherObject [classic|retail]",
    "\nDescription: Checks if an object is a custom gather object.",
    "undefined--@arg objectid: number, Object ID to check./n--@return: boolean Returns true if the object is a custom gather object, otherwise false./nfunction/nBANETO_IsCustomGatherObject/n(/n)/n"
  ],
  [
    "IsGatheringNodeV2 [classic]",
    "\nDescription: Version 2 of checking if an object is a gathering node.",
    "undefined--@arg objectid: number, Object ID to check./n--@return: boolean Returns true if the object is a gathering node, otherwise false./nfunction/nBANETO_IsGatheringNodeV2/n(/n)/n"
  ],
  [
    "IsGatheringNode [classic|retail]",
    "\nDescription: Checks if an object is a gathering node.",
    "undefined--@arg objectid: number, Object ID to check./n--@return: boolean Returns true if the object is a gathering node, otherwise false./nfunction/nBANETO_IsGatheringNode/n(/n)/n"
  ],
  [
    "IsWaterMob [classic|retail]",
    "\nDescription: Checks if a unit is a water mob.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: boolean Returns true if the unit is a water mob, otherwise false./nfunction/nBANETO_IsWaterMob/n(/n)/n"
  ],
  [
    "PrintObjectsAroundMe [classic|retail]",
    "\nDescription: Prints objects around the user.",
    "undefined--@return: nil/nfunction/nBANETO_PrintObjectsAroundMe/n(/n)/n"
  ],
  [
    "PrintMailboxAroundMe [classic|retail]",
    "\nDescription: Prints mailboxes around the user.",
    "undefined--@return: nil/nfunction/nBANETO_PrintMailboxAroundMe/n(/n)/n"
  ],
  [
    "SCAN_LOTUS [classic]",
    "\nDescription: Scans for Lotus.",
    "undefined--@return: nil/nfunction/nBANETO_SCAN_LOTUS/n(/n)/n"
  ],
  [
    "SetGhostInstantRelease [classic]",
    "\nDescription: Sets the option for ghost instant release.",
    "undefined--@arg bool: boolean, True to enable ghost instant release, false to disable./n--@return: nil/nfunction/nBANETO_SetGhostInstantRelease/n(/n)/n"
  ],
  [
    "TestOmLag2 [classic]",
    "\nDescription: Tests for out of memory lag, version 2.",
    "undefined--@return: nil/nfunction/nBANETO_TestOmLag2/n(/n)/n"
  ],
  [
    "TestOmLag [classic]",
    "\nDescription: Tests for out of memory lag.",
    "undefined--@return: nil/nfunction/nBANETO_TestOmLag/n(/n)/n"
  ],
  [
    "SCAN_GATHERING [classic|retail]",
    "\nDescription: Scans for gathering nodes.",
    "undefined--@return: object/nfunction/nBANETO_SCAN_GATHERING/n(/n)/n"
  ],
  [
    "GetDistanceBetweenObjects [classic|retail]",
    "\nDescription: Gets the distance between two objects.",
    "undefined--@arg object1: number, First object ID./n--@arg object2: number, Second object ID./n--@return: number Returns the distance between the two objects./nfunction/nGetDistanceBetweenObjects/n(/n,/n)/n"
  ],
  [
    "IsVendorOrTrainerBlacklisted [classic|retail]",
    "\nDescription: Checks if a vendor or trainer is blacklisted.",
    "undefined--@arg id: string, Vendor or trainer ID to check./n--@return: boolean Returns true if the vendor or trainer is blacklisted, otherwise false./nfunction/nIsVendorOrTrainerBlacklisted/n(/n)/n"
  ],
  [
    "IsUnitBlacklisted [classic|retail]",
    "\nDescription: Checks if a unit is blacklisted.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: boolean Returns true if the unit is blacklisted, otherwise false./nfunction/nIsUnitBlacklisted/n(/n)/n"
  ],
  [
    "DoesUserHaveWrongSetupSloader [classic|retail]",
    "\nDescription: Checks if the user has a wrong setup loader.",
    "undefined--@return: boolean Returns true if the user has a wrong setup loader, otherwise false./nfunction/nBANETO_DoesUserHaveWrongSetupSloader/n(/n)/n"
  ],
  [
    "ObjectType [classic|retail]",
    "\nDescription: Gets the type of an object.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: string Returns the type of the object./nfunction/nBANETO_ObjectType/n(/n)/n"
  ],
  [
    "IsUnitInBlacklistArea [classic|retail]",
    "\nDescription: Checks if a unit is in a blacklist area.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: boolean Returns true if the unit is in a blacklist area, otherwise false./nfunction/nIsUnitInBlacklistArea/n(/n)/n"
  ],
  [
    "IsUnitInBlacklistAreaClearPath [classic|retail]",
    "\nDescription: Checks if a unit is in a blacklist area and has a clear path.",
    "undefined--@arg unit: string, Unit ID to check./n--@return: boolean Returns true if the unit is in a blacklist area and has a clear path, otherwise false./nfunction/nIsUnitInBlacklistAreaClearPath/n(/n)/n"
  ],
  [
    "IsItemDisenchantBlacklisted [classic|retail]",
    "\nDescription: Checks if an item is blacklisted from disenchanting.",
    "undefined--@arg itemid: number, Item ID to check./n--@return: boolean Returns true if the item is blacklisted from disenchanting, otherwise false./nfunction/nBANETO_IsItemDisenchantBlacklisted/n(/n)/n"
  ],
  [
    "MarkItemidAsBought [classic|retail]",
    "\nDescription: Marks an item ID as bought.",
    "undefined--@arg itemid: number, Item ID to mark./n--@return: nil/nfunction/nBANETO_MarkItemidAsBought/n(/n)/n"
  ],
  [
    "WasItemIdBought [classic|retail]",
    "\nDescription: Checks if an item ID was bought.",
    "undefined--@arg itemidcheck: number, Item ID to check./n--@return: boolean Returns true if the item was bought, otherwise false./nfunction/nBANETO_WasItemIdBought/n(/n)/n"
  ],
  [
    "IsItemSellBlacklisted [classic|retail]",
    "\nDescription: Checks if an item is blacklisted from selling.",
    "undefined--@arg itemid: number, Item ID to check./n--@return: boolean Returns true if the item is blacklisted from selling, otherwise false./nfunction/nBANETO_IsItemSellBlacklisted/n(/n)/n"
  ],
  [
    "ClearOffmeshData [classic]",
    "\nDescription: Clears offmesh data.",
    "undefined--@return: nil/nfunction/nBANETO_ClearOffmeshData/n(/n)/n"
  ],
  [
    "DebugObjectLocation [classic]",
    "\nDescription: Debugs an object's location.",
    "undefined--@arg objectid: number, Object ID to debug./n--@return: nil/nfunction/nBANETO_DebugObjectLocation/n(/n)/n"
  ],
  [
    "AreWeInStormspire [classic]",
    "\nDescription: Checks if the user is in Stormspire.",
    "undefined--@return: boolean Returns true if the user is in Stormspire, otherwise false./nfunction/nBANETO_AreWeInStormspire/n(/n)/n"
  ],
  [
    "AreWeInThunderbluff [classic]",
    "\nDescription: Checks if the user is in Thunderbluff.",
    "undefined--@return: boolean Returns true if the user is in Thunderbluff, otherwise false./nfunction/nBANETO_AreWeInThunderbluff/n(/n)/n"
  ],
  [
    "AreWeInFreewindpost [classic]",
    "\nDescription: Checks if the user is in Freewindpost.",
    "undefined--@return: boolean Returns true if the user is in Freewindpost, otherwise false./nfunction/nBANETO_AreWeInFreewindpost/n(/n)/n"
  ],
  [
    "IsVectorInFreewindpost [classic]",
    "\nDescription: Checks if a vector is in Freewindpost.",
    "undefined--@arg x: number, X_coordinate of the vector./n--@arg y: number, Y_coordinate of the vector./n--@arg z: number, Z_coordinate of the vector./n--@return: boolean Returns true if the vector is in Freewindpost, otherwise false./nfunction/nBANETO_IsVectorInFreewindpost/n(/n,/n,/n)/n"
  ],
  [
    "IsVectorInStormspire [classic]",
    "\nDescription: Checks if a given vector is in Stormspire.",
    "undefined--@arg x: The x_coordinate of the vector./n--@arg y: The y_coordinate of the vector./n--@arg z: The z_coordinate of the vector./n--@return: Boolean indicating if the vector is in Stormspire./nfunction/nBANETO_IsVectorInStormspire/n(/n,/n,/n)/n"
  ],
  [
    "IsVectorInThunderbluff [classic]",
    "\nDescription: Checks if a given vector is in Thunderbluff.",
    "undefined--@arg x: The x_coordinate of the vector./n--@arg y: The y_coordinate of the vector./n--@arg z: The z_coordinate of the vector./n--@return: Boolean indicating if the vector is in Thunderbluff./nfunction/nBANETO_IsVectorInThunderbluff/n(/n,/n,/n)/n"
  ],
  [
    "IsDestinationInStormspire [classic]",
    "\nDescription: Checks if the current destination is in Stormspire.",
    "undefined--@return: Boolean indicating if the destination is in Stormspire./nfunction/nBANETO_IsDestinationInStormspire/n(/n)/n"
  ],
  [
    "IsDestinationInFreewindpost [classic]",
    "\nDescription: Checks if the current destination is in Freewindpost.",
    "undefined--@return: Boolean indicating if the destination is in Freewindpost./nfunction/nBANETO_IsDestinationInFreewindpost/n(/n)/n"
  ],
  [
    "IsDestinationInThunderbluff [classic]",
    "\nDescription: Checks if the current destination is in Thunderbluff.",
    "undefined--@return: Boolean indicating if the destination is in Thunderbluff./nfunction/nBANETO_IsDestinationInThunderbluff/n(/n)/n"
  ],
  [
    "CheckOffmeshTriggersOnMap [classic]",
    "\nDescription: Checks for offmesh triggers on the current map.",
    "undefined--@return: Boolean indicating if there are offmesh triggers on the current map./nfunction/nBANETO_CheckOffmeshTriggersOnMap/n(/n)/n"
  ],
  [
    "ScheduleOffmeshExec [classic]",
    "\nDescription: Schedules an offmesh execution.",
    "undefined--@arg offmeshname: The name of the offmesh to be executed./n--@return: No return value./nfunction/nBANETO_ScheduleOffmeshExec/n(/n)/n"
  ],
  [
    "TurnLeftStart [classic|retail]",
    "\nDescription: Starts the turn left command.",
    "undefined--@return: No return value./nfunction/nBANETO_TurnLeftStart/n(/n)/n"
  ],
  [
    "TurnRightStart [classic|retail]",
    "\nDescription: Starts the turn right command.",
    "undefined--@return: No return value./nfunction/nBANETO_TurnRightStart/n(/n)/n"
  ],
  [
    "TurnLeftStop [classic|retail]",
    "\nDescription: Stops the turn left command.",
    "undefined--@return: No return value./nfunction/nBANETO_TurnLeftStop/n(/n)/n"
  ],
  [
    "TurnRightStop [classic|retail]",
    "\nDescription: Stops the turn right command.",
    "undefined--@return: No return value./nfunction/nBANETO_TurnRightStop/n(/n)/n"
  ],
  [
    "UpdateServerFacing [classic|retail]",
    "\nDescription: Updates the server facing direction of the player character.",
    "undefined--@return: No return value./nfunction/nBANETO_UpdateServerFacing/n(/n)/n"
  ],
  [
    "MoveForwardStop [classic|retail]",
    "\nDescription: Stops the move forward command.",
    "undefined--@return: No return value./nfunction/nBANETO_MoveForwardStop/n(/n)/n"
  ],
  [
    "MoveForwardStart [classic|retail]",
    "\nDescription: Starts the move forward command.",
    "undefined--@return: No return value./nfunction/nBANETO_MoveForwardStart/n(/n)/n"
  ],
  [
    "ExecuteOffmeshConnection [classic]",
    "\nDescription: Executes an offmesh connection.",
    "undefined--@return: No return value./nfunction/nBANETO_ExecuteOffmeshConnection/n(/n)/n"
  ],
  [
    "HasBandageInInventory [classic|retail]",
    "\nDescription: Checks if the player character has a bandage in the inventory.",
    "undefined--@return: Boolean indicating if a bandage is in the inventory./nfunction/nBANETO_HasBandageInInventory/n(/n)/n"
  ],
  [
    "UseBandage [classic|retail]",
    "\nDescription: Triggers the use of a bandage.",
    "undefined--@return: No return value./nfunction/nBANETO_UseBandage/n(/n)/n"
  ],
  [
    "GetSpellTexture [classic|retail]",
    "\nDescription: Gets the texture of a spell.",
    "undefined--@arg id: The id of the spell./n--@return: The texture of the spell./nfunction/nBANETO_GetSpellTexture/n(/n)/n"
  ],
  [
    "UseBandageAfterGouge [classic|retail]",
    "\nDescription: Triggers the use of a bandage after a Gouge.",
    "undefined--@return: No return value./nfunction/nBANETO_UseBandageAfterGouge/n(/n)/n"
  ],
  [
    "UseMageManastones [classic|retail]",
    "\nDescription: Triggers the use of mage manastones.",
    "undefined--@return: No return value./nfunction/nBANETO_UseMageManastones/n(/n)/n"
  ],
  [
    "UseMotes [classic|retail]",
    "\nDescription: Triggers the use of motes.",
    "undefined--@return: No return value./nfunction/nBANETO_UseMotes/n(/n)/n"
  ],
  [
    "UseScrolls [classic|retail]",
    "\nDescription: Triggers the use of scrolls.",
    "undefined--@return: No return value./nfunction/nBANETO_UseScrolls/n(/n)/n"
  ],
  [
    "UseWarlockHealthstone [classic|retail]",
    "\nDescription: Triggers the use of warlock healthstones.",
    "undefined--@return: No return value./nfunction/nBANETO_UseWarlockHealthstone/n(/n)/n"
  ],
  [
    "UsePotions [classic|retail]",
    "\nDescription: Triggers the use of potions.",
    "undefined--@return: No return value./nfunction/nBANETO_UsePotions/n(/n)/n"
  ],
  [
    "AutoOpenItems [classic|retail]",
    "\nDescription: Automatically opens items in the player character's inventory.",
    "undefined--@return: No return value./nfunction/nBANETO_AutoOpenItems/n(/n)/n"
  ],
  [
    "HasItemToOpen [classic|retail]",
    "\nDescription: Checks if the player character has items to open in their inventory.",
    "undefined--@return: Boolean indicating if there are items to open./nfunction/nBANETO_HasItemToOpen/n(/n)/n"
  ],
  [
    "LoadDefaultSpellSettings [classic|retail]",
    "\nDescription: Loads default settings for spells.",
    "undefined--@return: No return value./nfunction/nBANETO_LoadDefaultSpellSettings/n(/n)/n"
  ],
  [
    "DefineCustomTravelVector [classic|retail]",
    "\nDescription: Defines a custom travel vector for the game character.",
    "undefined--@arg x: X coordinate in the game world./n--@arg y: Y coordinate in the game world./n--@arg z: Z coordinate in the game world./n--@arg mapid: ID of the game map./n--@arg name: Name assigned to the custom travel vector./n--@return: No return value/nfunction/nBANETO_DefineCustomTravelVector/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "ClearSpellSettingsById [classic|retail]",
    "\nDescription: Clears the settings associated with a specific spell by its ID.",
    "undefined--@arg id: ID of the spell./n--@return: No return value/nfunction/nBANETO_ClearSpellSettingsById/n(/n)/n"
  ],
  [
    "GetUserSettingSpellEnemyHp [classic|retail]",
    "\nDescription: Retrieves the user settings for enemy HP for a specific spell.",
    "undefined--@arg spellid: ID of the spell./n--@return: User setting value for enemy HP./nfunction/nBANETO_GetUserSettingSpellEnemyHp/n(/n)/n"
  ],
  [
    "GetUserSettingSpellYourMp [classic|retail]",
    "\nDescription: Retrieves the user settings for the player's MP for a specific spell.",
    "undefined--@arg spellid: ID of the spell./n--@return: User setting value for player's MP./nfunction/nBANETO_GetUserSettingSpellYourMp/n(/n)/n"
  ],
  [
    "IsBgPortReady [classic]",
    "\nDescription: Checks if the Battle Ground (BG) port is ready.",
    "undefined--@return: Boolean indicating if the BG port is ready./nfunction/nBANETO_IsBgPortReady/n(/n)/n"
  ],
  [
    "AcceptBgPorts [classic]",
    "\nDescription: Accepts the BG port if it's ready.",
    "undefined--@return: No return value/nfunction/nBANETO_AcceptBgPorts/n(/n)/n"
  ],
  [
    "GetUserSettingSpellEnemyCount [classic|retail]",
    "\nDescription: Retrieves the user settings for the enemy count for a specific spell.",
    "undefined--@arg spellid: ID of the spell./n--@return: User setting value for enemy count./nfunction/nBANETO_GetUserSettingSpellEnemyCount/n(/n)/n"
  ],
  [
    "IsSpellBlockedBySettings [classic|retail]",
    "\nDescription: Checks if a spell is blocked by the settings.",
    "undefined--@arg spellid: ID of the spell./n--@return: Boolean indicating if the spell is blocked by the settings./nfunction/nBANETO_IsSpellBlockedBySettings/n(/n)/n"
  ],
  [
    "SetSpellSetting [classic|retail]",
    "\nDescription: Sets the settings for a spell.",
    "undefined--@arg id: ID of the spell./n--@arg hp: Setting value for HP./n--@arg mp: Setting value for MP./n--@arg count: Setting value for enemy count./n--@arg wanted: Boolean indicating if the spell is wanted./n--@return: No return value/nfunction/nBANETO_SetSpellSetting/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "MailState [classic]",
    "\nDescription: Executes the mail code logic in MAIL state.",
    "undefined--@return: No return value/nfunction/nBANETO_MailState/n(/n)/n"
  ],
  [
    "RepairAllItems [classic|retail]",
    "\nDescription: Repairs all items of the character.",
    "undefined--@return: No return value/nfunction/nBANETO_RepairAllItems/n(/n)/n"
  ],
  [
    "QuestTurninLogic [classic|retail]",
    "\nDescription: Logic for turning in quests.",
    "undefined--@return: No return value/nfunction/nBANETO_QuestTurninLogic/n(/n)/n"
  ],
  [
    "QuestAcceptLogic [classic|retail]",
    "\nDescription: Logic for accepting quests.",
    "undefined--@return: No return value/nfunction/nBANETO_QuestAcceptLogic/n(/n)/n"
  ],
  [
    "SellItems [classic|retail]",
    "\nDescription: Sells items of the character.",
    "undefined--@arg forcedsell: Set to true if you want to force sell, leave empty if baneto expects selling./n--@return: No return value/nfunction/nBANETO_SellItems/n(/n)/n"
  ],
  [
    "IsLearnSpellWanted [classic]",
    "\nDescription: Checks if the learning of a certain spell is wanted.",
    "undefined--@arg spellname: Name of the spell./n--@return: Boolean indicating if the learning of the spell is wanted./nfunction/nBANETO_IsLearnSpellWanted/n(/n)/n"
  ],
  [
    "LearnSpells [classic|retail]",
    "\nDescription: Triggers the character to learn spells.",
    "undefined--@return: No return value/nfunction/nBANETO_LearnSpells/n(/n)/n"
  ],
  [
    "LearnProfSpells [classic|retail]",
    "\nDescription: Triggers the character to learn profession spells.",
    "undefined--@return: No return value/nfunction/nBANETO_LearnProfSpells/n(/n)/n"
  ],
  [
    "GetPossibleDisenchantCount [classic|retail]",
    "\nDescription: Gets the possible count of items that can be disenchanted.",
    "undefined--@return: The count of items that can be disenchanted./nfunction/nBANETO_GetPossibleDisenchantCount/n(/n)/n"
  ],
  [
    "DisenchantItems [classic|retail]",
    "\nDescription: Disenchants items.",
    "undefined--@return: No return value/nfunction/nBANETO_DisenchantItems/n(/n)/n"
  ],
  [
    "HasMoneyForDrinks [classic|retail]",
    "\nDescription: Checks if the player has sufficient money for drinks.",
    "undefined--@return: Boolean indicating if the player has enough money for drinks./nfunction/nBANETO_HasMoneyForDrinks/n(/n)/n"
  ],
  [
    "HasMoneyForAmmo [classic|retail]",
    "\nDescription: Checks if the player has sufficient money for ammunition.",
    "undefined--@return: Boolean indicating if the player has enough money for ammunition./nfunction/nBANETO_HasMoneyForAmmo/n(/n)/n"
  ],
  [
    "HasMoneyForFood [classic|retail]",
    "\nDescription: Checks if the player has sufficient money for food.",
    "undefined--@return: Boolean indicating if the player has enough money for food./nfunction/nBANETO_HasMoneyForFood/n(/n)/n"
  ],
  [
    "GossipInkeeperBind [classic|retail]",
    "\nDescription: Initiates gossip with an inkeeper to bind the character's hearthstone.",
    "undefined--@return: No return value/nfunction/nBANETO_GossipInkeeperBind/n(/n)/n"
  ],
  [
    "GossipInkeeper [classic|retail]",
    "\nDescription: Initiates gossip with an inkeeper.",
    "undefined--@return: No return value/nfunction/nBANETO_GossipInkeeper/n(/n)/n"
  ],
  [
    "GossipRepair [classic|retail]",
    "\nDescription: Initiates gossip with a repair NPC.",
    "undefined--@return: No return value/nfunction/nBANETO_GossipRepair/n(/n)/n"
  ],
  [
    "GossipFlightmaster [classic]",
    "\nDescription: Initiates gossip with a flight master.",
    "undefined--@return: No return value/nfunction/nBANETO_GossipFlightmaster/n(/n)/n"
  ],
  [
    "GossipTrainer [classic|retail]",
    "\nDescription: Initiates gossip with a trainer NPC.",
    "undefined--@return: No return value/nfunction/nBANETO_GossipTrainer/n(/n)/n"
  ],
  [
    "FindItemIdByName [classic|retail]",
    "\nDescription: Finds the ID of an item by its name.",
    "undefined--@arg name: Name of the item./n--@return: The ID of the item./nfunction/nBANETO_FindItemIdByName/n(/n)/n"
  ],
  [
    "BuyPetfood [classic|retail]",
    "\nDescription: Buys pet food.",
    "undefined--@return: No return value/nfunction/nBANETO_BuyPetfood/n(/n)/n"
  ],
  [
    "BuyMerchantItem [classic|retail]",
    "\nDescription: Buys an item from a merchant.",
    "undefined--@arg index: The index of the item at the merchant./n--@arg amount: The amount of the item to buy./n--@return: No return value/nfunction/nBANETO_BuyMerchantItem/n(/n,/n)/n"
  ],
  [
    "ResetForcedGoods [classic|retail]",
    "\nDescription: Resets the forced goods in the user's inventory.",
    "undefined--@return: No return value/nfunction/nBANETO_ResetForcedGoods/n(/n)/n"
  ],
  [
    "BuyGoods [classic|retail]",
    "\nDescription: Triggers the buying of goods for the player character.",
    "undefined--@return: No return value/nfunction/nBANETO_BuyGoods/n(/n)/n"
  ],
  [
    "BuyAmmo [classic|retail]",
    "\nDescription: Triggers the buying of ammunition for the player character.",
    "undefined--@return: No return value/nfunction/nBANETO_BuyAmmo/n(/n)/n"
  ],
  [
    "IsEatingDung [classic]",
    "\nDescription: Checks if a unit is eating dung.",
    "undefined--@arg unit: The unit to be checked./n--@return: Boolean indicating if the unit is eating dung./nfunction/nBANETO_IsEatingDung/n(/n)/n"
  ],
  [
    "IsDrinkingDung [classic]",
    "\nDescription: Checks if a unit is drinking dung.",
    "undefined--@arg unit: The unit to be checked./n--@return: Boolean indicating if the unit is drinking dung./nfunction/nBANETO_IsDrinkingDung/n(/n)/n"
  ],
  [
    "IsEating [classic|retail]",
    "\nDescription: Checks if the player character is eating.",
    "undefined--@return: Boolean indicating if the player is eating./nfunction/nBANETO_IsEating/n(/n)/n"
  ],
  [
    "IsDrinking [classic|retail]",
    "\nDescription: Checks if the player character is drinking.",
    "undefined--@return: Boolean indicating if the player is drinking./nfunction/nBANETO_IsDrinking/n(/n)/n"
  ],
  [
    "GetClosestNpcFromVendorDb [classic|retail]",
    "\nDescription: Gets the closest NPC from the vendor database.",
    "undefined--@arg type: The type of vendor./n--@return: The closest NPC of the specified type./nfunction/nBANETO_GetClosestNpcFromVendorDb/n(/n)/n"
  ],
  [
    "DefineProfileSpotStripper [classic]",
    "\nDescription: Defines the stripping profile for the player character.",
    "undefined--@arg amount: The amount to strip./n--@return: No return value/nfunction/nBANETO_DefineProfileSpotStripper/n(/n)/n"
  ],
  [
    "DefineProfileName [classic|retail]",
    "\nDescription: Defines the name of the profile for the player character.",
    "undefined--@arg string: The name of the profile./n--@return: No return value/nfunction/nBANETO_DefineProfileName/n(/n)/n"
  ],
  [
    "HasDeBuffWithTimeLeft [classic|retail]",
    "\nDescription: Checks if a given unit has a specific debuff with time left.",
    "undefined--@arg unit: The unit to check for debuffs./n--@arg spellid: The ID of the debuff spell to check./n--@return: Boolean indicating if the unit has the specified debuff with time remaining./nfunction/nBANETO_HasDeBuffWithTimeLeft/n(/n,/n)/n"
  ],
  [
    "GetSpellCooldownRemaining [classic|retail]",
    "\nDescription: Get the remaining cooldown of a given spell.",
    "undefined--@arg spellId: The ID of the spell to check./n--@return: The remaining cooldown time of the spell./nfunction/nBANETO_GetSpellCooldownRemaining/n(/n)/n"
  ],
  [
    "GetSpellCastTime [classic|retail]",
    "\nDescription: Get the cast time of a given spell.",
    "undefined--@arg spellId: The ID of the spell to check./n--@return: The cast time of the spell./nfunction/nBANETO_GetSpellCastTime/n(/n)/n"
  ],
  [
    "HasBuffWithTimeLeft [classic|retail]",
    "\nDescription: Checks if a given unit has a specific buff with time left.",
    "undefined--@arg unit: The unit to check for buffs./n--@arg spellid: The ID of the buff spell to check./n--@return: Boolean indicating if the unit has the specified buff with time remaining./nfunction/nBANETO_HasBuffWithTimeLeft/n(/n,/n)/n"
  ],
  [
    "GetUnitLostHealthAbsolut [classic|retail]",
    "\nDescription: Get the absolute value of lost health of a unit.",
    "undefined--@arg unit: The unit to check for lost health./n--@return: The absolute value of lost health of the unit./nfunction/nBANETO_GetUnitLostHealthAbsolut/n(/n)/n"
  ],
  [
    "GetUnitLostHealthPercent [classic|retail]",
    "\nDescription: Get the percentage of lost health of a unit.",
    "undefined--@arg unit: The unit to check for lost health./n--@return: The percentage of lost health of the unit./nfunction/nBANETO_GetUnitLostHealthPercent/n(/n)/n"
  ],
  [
    "GetProfileName [classic|retail]",
    "\nDescription: Returns the name of the current profile.",
    "undefined--@return: The name of the current profile./nfunction/nBANETO_GetProfileName/n(/n)/n"
  ],
  [
    "ExecuteCustomGrindPulse [classic|retail]",
    "\nDescription: Execute custom grind pulse logic.",
    "undefined--@return: (Add return value)/nfunction/nBANETO_ExecuteCustomGrindPulse/n(/n)/n"
  ],
  [
    "ExecuteCustomQuestPulse [classic|retail]",
    "\nDescription: Execute custom quest pulse logic.",
    "undefined--@return: (Add return value)/nfunction/nBANETO_ExecuteCustomQuestPulse/n(/n)/n"
  ],
  [
    "ClearProfileData [classic|retail]",
    "\nDescription: Clear profile data.",
    "undefined--@return: (Add return value)/nfunction/nBANETO_ClearProfileData/n(/n)/n"
  ],
  [
    "DefineDungeonMap [classic]",
    "\nDescription: Define a dungeon map by its id.",
    "undefined--@arg id: The id of the dungeon map./n--@return: (Add return value)/nfunction/nBANETO_DefineDungeonMap/n(/n)/n"
  ],
  [
    "ExecuteCustomPluginFile [classic|retail]",
    "\nDescription: Execute a custom plugin file.",
    "undefined--@arg name: The name of the plugin file./n--@return: (Add return value)/nfunction/nBANETO_ExecuteCustomPluginFile/n(/n)/n"
  ],
  [
    "CommunityFile [classic|retail]",
    "\nDescription: Get a community file.",
    "undefined--@arg project: The name of the project./n--@arg file: The name of the file./n--@return: (Add return value)/nfunction/nBANETO_CommunityFile/n(/n,/n)/n"
  ],
  [
    "IsPlayerBehindTarget [classic|retail]",
    "\nDescription: Check if the player is behind the target.",
    "undefined--@return: Boolean indicating if the player is behind the target./nfunction/nBANETO_IsPlayerBehindTarget/n(/n)/n"
  ],
  [
    "IsInsideCone [classic|retail]",
    "\nDescription: Check if a point is inside a cone.",
    "undefined--@arg f: The angle of the cone./n--@arg a: (Add description)/n--@return: Boolean indicating if the point is inside the cone./nfunction/nBANETO_IsInsideCone/n(/n,/n,/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "SetPluginTickTime [classic|retail]",
    "\nDescription: Set the tick time for plugins.",
    "undefined--@arg seconds: The new tick time in seconds./n--@return: (Add return value)/nfunction/nBANETO_SetPluginTickTime/n(/n)/n"
  ],
  [
    "RefreshPlugins [classic|retail]",
    "\nDescription: Refresh plugins.",
    "undefined--@return: (Add return value)/nfunction/nBANETO_RefreshPlugins/n(/n)/n"
  ],
  [
    "CreatePluginCheckbox [classic|retail]",
    "\nDescription: Create a checkbox for a plugin.",
    "undefined--@arg name: The name of the plugin./n--@return: (Add return value)/nfunction/nBANETO_CreatePluginCheckbox/n(/n)/n"
  ],
  [
    "LoadPluginJson [classic|retail]",
    "\nDescription: Load plugin data from JSON.",
    "undefined--@return: (Add return value)/nfunction/nBANETO_LoadPluginJson/n(/n)/n"
  ],
  [
    "ShowPlugins [classic|retail]",
    "\nDescription: Show plugins.",
    "undefined--@return: (Add return value)/nfunction/nBANETO_ShowPlugins/n(/n)/n"
  ],
  [
    "HidePlugins [classic|retail]",
    "\nDescription: Hide plugins.",
    "undefined--@return: (Add return value)/nfunction/nBANETO_HidePlugins/n(/n)/n"
  ],
  [
    "ExecutePlugins [classic|retail]",
    "\nDescription: Execute plugins.",
    "undefined--@return: (Add return value)/nfunction/nBANETO_ExecutePlugins/n(/n)/n"
  ],
  [
    "IsUnitOnMesh [classic|retail]",
    "\nDescription: Check if a unit is on a mesh.",
    "undefined--@arg unit: The unit to check./n--@return: Boolean indicating if the unit is on a mesh./nfunction/nBANETO_IsUnitOnMesh/n(/n)/n"
  ],
  [
    "HasWarlockSpellStone [classic]",
    "\nDescription: Check if the player has a Warlock Spell Stone.",
    "undefined--@return: Boolean indicating if the player has a Warlock Spell Stone./nfunction/nBANETO_HasWarlockSpellStone/n(/n)/n"
  ],
  [
    "HasWarlockSoulStone [classic|retail]",
    "\nDescription: Check if the player has a Warlock Soul Stone.",
    "undefined--@return: Boolean indicating if the player has a Warlock Soul Stone./nfunction/nBANETO_HasWarlockSoulStone/n(/n)/n"
  ],
  [
    "HasWarlockHealthStone [classic|retail]",
    "\nDescription: Check if the player has a Warlock Health Stone.",
    "undefined--@return: Boolean indicating if the player has a Warlock Health Stone./nfunction/nBANETO_HasWarlockHealthStone/n(/n)/n"
  ],
  [
    "ResetBanetoUi [classic|retail]",
    "\nDescription: Reset the Baneto UI.",
    "undefined--@return: (Add return value)/nfunction/nBANETO_ResetBanetoUi/n(/n)/n"
  ],
  [
    "SetUiPos [classic|retail]",
    "\nDescription: Set the UI position.",
    "undefined--@return: (Add return value)/nfunction/nBANETO_SetUiPos/n(/n,/n,/n,/n)/n"
  ],
  [
    "SetUiFrame [classic]",
    "\nDescription: Set the UI frame.",
    "undefined--@arg frame: The new frame for the UI./n--@return: (Add return value)/nfunction/nBANETO_SetUiFrame/n(/n)/n"
  ],
  [
    "GetUiPos [classic|retail]",
    "\nDescription: Get the UI position.",
    "undefined--@return: The coordinates of the UI position./nfunction/nBANETO_GetUiPos/n(/n)/n"
  ],
  [
    "HasMageManaStone [classic|retail]",
    "\nDescription: Check if the player has a Mage Mana Stone.",
    "undefined--@return: Boolean indicating if the player has a Mage Mana Stone./nfunction/nBANETO_HasMageManaStone/n(/n)/n"
  ],
  [
    "GetBestBobberItem [classic|retail]",
    "\nDescription: Get the best bobber item.",
    "undefined--@return: The best bobber item./nfunction/nBANETO_GetBestBobberItem/n(/n)/n"
  ],
  [
    "HasBobberItem [classic|retail]",
    "\nDescription: Check if the player has a bobber item.",
    "undefined--@return: Boolean indicating if the player has a bobber item./nfunction/nBANETO_HasBobberItem/n(/n)/n"
  ],
  [
    "HttpRequestCustomPushSmartphoneNots [classic|retail]",
    "\nDescription: Send a HTTP request with a custom payload for smartphone notifications.",
    "undefined--@arg payload: The payload for the request./n--@return: (Add return value)/nfunction/nHttpRequestCustomPushSmartphoneNots/n(/n)/n"
  ],
  [
    "UseTrinkets [classic|retail]",
    "\nDescription: Use trinkets.",
    "undefined--@return: (Add return value)/nfunction/nBANETO_UseTrinkets/n(/n)/n"
  ],
  [
    "SetToSkipPulseQuest [classic|retail]",
    "\nDescription: Skip the pulse of a specific quest.",
    "undefined--@return: (Add return value description)/nfunction/nBANETO_SetToSkipPulseQuest/n(/n)/n"
  ],
  [
    "SetToSkipTurnInQuest [classic|retail]",
    "\nDescription: Skip the turn_in process of a specific quest.",
    "undefined--@return: (Add return value description)/nfunction/nBANETO_SetToSkipTurnInQuest/n(/n)/n"
  ],
  [
    "AddClassTrainer [classic]",
    "\nDescription: Add a class trainer to a specific location in the game.",
    "undefined--@arg faction: The faction of the class trainer./n--@arg class: The class that the trainer can teach./n--@arg mapname: The name of the map where the trainer is located./n--@arg id: The ID of the trainer./n--@arg minLevel: The minimum level to interact with the trainer./n--@arg zoneId: The ID of the zone where the trainer is located./n--@return: (Add return value description)/nfunction/nBANETO_AddClassTrainer/n(/n,/n,/n,/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "AddAuctioneer [classic|retail]",
    "\nDescription: Add an auctioneer to a specific location in the game.",
    "undefined--@arg faction: The faction of the auctioneer./n--@arg mapname: The name of the map where the auctioneer is located./n--@arg id: The ID of the auctioneer./n--@arg minLevel: The minimum level to interact with the auctioneer./n--@arg zoneId: The ID of the zone where the auctioneer is located./n--@return: (Add return value description)/nfunction/nBANETO_AddAuctioneer/n(/n,/n,/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "AddFlightmaster [classic|retail]",
    "\nDescription: Add a flight master to a specific location in the game.",
    "undefined--@arg faction: The faction of the flight master./n--@arg mapname: The name of the map where the flight master is located./n--@arg id: The ID of the flight master./n--@arg minLevel: The minimum level to interact with the flight master./n--@arg zoneId: The ID of the zone where the flight master is located./n--@return: (Add return value description)/nfunction/nBANETO_AddFlightmaster/n(/n,/n,/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "AddProfTrainer [classic|retail]",
    "\nDescription: Add a profession trainer to a specific location in the game.",
    "undefined--@arg faction: The faction of the profession trainer./n--@arg profType: The type of profession that the trainer can teach./n--@arg mapname: The name of the map where the trainer is located./n--@arg id: The ID of the trainer./n--@arg minLevel: The minimum level to interact with the trainer./n--@arg zoneId: The ID of the zone where the trainer is located./n--@return: (Add return value description)/nfunction/nBANETO_AddProfTrainer/n(/n,/n,/n,/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "AddMailbox [classic|retail]",
    "\nDescription: Add a mailbox to a specific location in the game.",
    "undefined--@arg faction: The faction of the mailbox./n--@arg mapname: The name of the map where the mailbox is located./n--@arg minLevel: The minimum level to interact with the mailbox./n--@arg zoneId: The ID of the zone where the mailbox is located./n--@return: (Add return value description)/nfunction/nBANETO_AddMailbox/n(/n,/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "GetTable [classic|retail]",
    "\nDescription: Get the table of a specific type and faction.",
    "undefined--@arg tableType: The type of table to get./n--@arg faction: The faction of the table./n--@return: (Add return value description)/nfunction/nBANETO_GetTable/n(/n,/n)/n"
  ],
  [
    "AddAmmoBulletItem [classic]",
    "\nDescription: Add a bullet item with a specified item ID, minimum level and cost to the ammo table.",
    "undefined--@arg itemid: The item ID of the bullet./n--@arg minLevel: The minimum level to use the bullet./n--@arg costInCopper: The cost of the bullet in copper./n--@return: (Add return value description)/nfunction/nBANETO_AddAmmoBulletItem/n(/n,/n,/n)/n"
  ],
  [
    "AddAmmoArrowItem [classic]",
    "\nDescription: Add an arrow item with a specified item ID, minimum level and cost to the ammo table.",
    "undefined--@arg itemid: The item ID of the arrow./n--@arg minLevel: The minimum level to use the arrow./n--@arg costInCopper: The cost of the arrow in copper./n--@return: (Add return value description)/nfunction/nBANETO_AddAmmoArrowItem/n(/n,/n,/n)/n"
  ],
  [
    "AddDrinkItem [classic|retail]",
    "\nDescription: Add a drink item with a specified item ID, minimum level and cost to the consumables table.",
    "undefined--@arg itemid: The item ID of the drink./n--@arg minLevel: The minimum level to use the drink./n--@arg costInCopper: The cost of the drink in copper./n--@return: (Add return value description)/nfunction/nBANETO_AddDrinkItem/n(/n,/n,/n)/n"
  ],
  [
    "AddFoodItem [classic|retail]",
    "\nDescription: Add a food item with a specified item ID, minimum level and cost to the consumables table.",
    "undefined--@arg itemid: The item ID of the food./n--@arg minLevel: The minimum level to use the food./n--@arg costInCopper: The cost of the food in copper./n--@return: (Add return value description)/nfunction/nBANETO_AddFoodItem/n(/n,/n,/n)/n"
  ],
  [
    "SortItemTables [classic]",
    "\nDescription: Sort the item tables based on some pre_defined criteria.",
    "undefinedfunction/nBANETO_SortItemTables/n(/n)/n"
  ],
  [
    "AddVendor [classic|retail]",
    "\nDescription: Add a vendor into the game.",
    "undefined--@arg faction: string (Vendor's faction)/n--@arg vendorType: string (Vendor's type)/n--@arg mapname: string (Name of the map where vendor is located)/n--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/n--@arg id: number (Vendor's ID)/n--@arg minLevel: number (Minimum level required to interact with vendor)/n--@arg itemTable: table (Table of items vendor has)/n--@arg zoneId: number (ID of the zone where vendor is located)/nfunction/nBANETO_AddVendor/n(/n,/n,/n,/n,/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "MultidotWithSpellId [classic|retail]",
    "\nDescription: Apply multi_dot with a specific spell ID.",
    "undefined--@arg debuff: number (Debuff's spell ID)/nfunction/nBANETO_MultidotWithSpellId/n(/n)/n"
  ],
  [
    "LivingBombCheck [classic]",
    "\nDescription: Check the Living Bomb status based on the count.",
    "undefined--@arg count: number (The count of Living Bomb)/nfunction/nBANETO_LivingBombCheck/n(/n)/n"
  ],
  [
    "PushNotificationText [classic|retail]",
    "\nDescription: Push a notification with custom text.",
    "undefined--@arg customText: string (Text of the notification)/nfunction/nBANETO_PushNotificationText/n(/n)/n"
  ],
  [
    "PushNotification [classic|retail]",
    "\nDescription: Push a notification based on the notification type.",
    "undefined--@arg notificationType: string (Type of the notification)/nfunction/nBANETO_PushNotification/n(/n)/n"
  ],
  [
    "HasShieldEquipped [classic|retail]",
    "\nDescription: Check if the player has a shield equipped.",
    "undefined--@return: boolean (True if a shield is equipped, false otherwise)/nfunction/nBANETO_HasShieldEquipped/n(/n)/n"
  ],
  [
    "ShamanWeaponCheck [classic|retail]",
    "\nDescription: Check the player's weapon status as a Shaman.",
    "undefined--@return: boolean (True if a suitable weapon is equipped, false otherwise)/nfunction/nBANETO_ShamanWeaponCheck/n(/n)/n"
  ],
  [
    "SetPetDefensive [classic]",
    "\nDescription: Set the pet's status to defensive.",
    "undefinedfunction/nBANETO_SetPetDefensive/n(/n)/n"
  ],
  [
    "IsBuffStateNeeded [classic|retail]",
    "\nDescription: Check if the player needs to apply a buff.",
    "undefined--@return: boolean (True if a buff is needed, false otherwise)/nfunction/nBANETO_IsBuffStateNeeded/n(/n)/n"
  ],
  [
    "IsDisenchantNeeded [classic|retail]",
    "\nDescription: Check if an item needs to be disenchanted.",
    "undefined--@return: boolean (True if disenchanting is needed, false otherwise)/nfunction/nBANETO_IsDisenchantNeeded/n(/n)/n"
  ],
  [
    "FindDeadlyPoison [classic]",
    "\nDescription: Find the Deadly Poison in the player's inventory.",
    "undefined--@return: number (ID of the Deadly Poison if found, nil otherwise)/nfunction/nBANETO_FindDeadlyPoison/n(/n)/n"
  ],
  [
    "HasPoisonsInInventory [classic|retail]",
    "\nDescription: Check if the player has any poisons in their inventory.",
    "undefined--@return: boolean (True if poisons are found, false otherwise)/nfunction/nBANETO_HasPoisonsInInventory/n(/n)/n"
  ],
  [
    "GetHighestPoisonIdInInventory [classic|retail]",
    "\nDescription: Get the ID of the highest level poison in the player's inventory.",
    "undefined--@return: number (ID of the highest level poison, nil if none is found)/nfunction/nBANETO_GetHighestPoisonIdInInventory/n(/n)/n"
  ],
  [
    "DefineProfileContinent [classic|retail]",
    "\nDescription: Define the continent for the profile.",
    "undefined--@arg id: number (ID of the continent)/nfunction/nBANETO_DefineProfileContinent/n(/n)/n"
  ],
  [
    "DefinePath [classic|retail]",
    "\nDescription: Define a path with its type and coordinates.",
    "undefined--@arg type: string (Path type) _ Possible values:/n--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/nfunction/nBANETO_DefinePath/n(/n,/n,/n,/n)/n"
  ],
  [
    "DefineDungeonEntrance [classic]",
    "\nDescription: Define the coordinates of the dungeon entrance.",
    "undefined--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/nfunction/nBANETO_DefineDungeonEntrance/n(/n,/n,/n)/n"
  ],
  [
    "FindCurrencyIndex [classic]",
    "\nDescription: Find the index of a currency based on its trigger.",
    "undefined--@arg trigger: string (Trigger of the currency)/n--@return: number (Index of the currency, nil if not found)/nfunction/nBANETO_FindCurrencyIndex/n(/n)/n"
  ],
  [
    "DefineDungeonExit [classic]",
    "\nDescription: Define the coordinates of the dungeon exit.",
    "undefined--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/nfunction/nBANETO_DefineDungeonExit/n(/n,/n,/n)/n"
  ],
  [
    "DefineFightCenter [classic|retail]",
    "\nDescription: Define the center of a fighting area.",
    "undefined--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/n--@arg radius: number (Radius of the fighting area)/nfunction/nBANETO_DefineFightCenter/n(/n,/n,/n,/n)/n"
  ],
  [
    "DefineCenter [classic|retail]",
    "\nDescription: Define the center of an area.",
    "undefined--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/n--@arg radius: number (Radius of the area)/nfunction/nBANETO_DefineCenter/n(/n,/n,/n,/n)/n"
  ],
  [
    "ClearDefinedCenters [classic|retail]",
    "\nDescription: Clear all the defined centers.",
    "undefinedfunction/nBANETO_ClearDefinedCenters/n(/n)/n"
  ],
  [
    "GetDefinedCenters [classic|retail]",
    "\nDescription: Get all the defined centers.",
    "undefined--@return: table (List of all defined centers)/nfunction/nBANETO_GetDefinedCenters/n(/n)/n"
  ],
  [
    "DefineQuestVendor [classic|retail]",
    "\nDescription: Define the coordinates of a quest vendor.",
    "undefined--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/n--@arg id: number (Vendor's ID)/nfunction/nBANETO_DefineQuestVendor/n(/n,/n,/n,/n)/n"
  ],
  [
    "DefineSellVendor [classic|retail]",
    "\nDescription: Define the coordinates of a selling vendor.",
    "undefined--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/n--@arg id: number (Vendor's ID)/nfunction/nBANETO_DefineSellVendor/n(/n,/n,/n,/n)/n"
  ],
  [
    "DefineGoodsVendor [classic|retail]",
    "\nDescription: Define a goods vendor location.",
    "undefined--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/n--@arg id: number (Vendor ID)/nfunction/nBANETO_DefineGoodsVendor/n(/n,/n,/n,/n)/n"
  ],
  [
    "DefineRepairVendor [classic|retail]",
    "\nDescription: Define a repair vendor location.",
    "undefined--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/n--@arg id: number (Vendor ID)/nfunction/nBANETO_DefineRepairVendor/n(/n,/n,/n,/n)/n"
  ],
  [
    "DefineAmmoVendor [classic|retail]",
    "\nDescription: Define an ammo vendor location.",
    "undefined--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/n--@arg id: number (Vendor ID)/nfunction/nBANETO_DefineAmmoVendor/n(/n,/n,/n,/n)/n"
  ],
  [
    "GetDungeonObjectInteractTime [classic]",
    "\nDescription: Get the interaction time of a specific dungeon object.",
    "undefined--@arg object: string (Dungeon object name)/n--@return: number (Interaction time in seconds)/nfunction/nBANETO_GetDungeonObjectInteractTime/n(/n)/n"
  ],
  [
    "DefineDungeonObject [classic]",
    "\nDescription: Define a dungeon object with its interaction range and time.",
    "undefined--@arg id: number (Object ID)/n--@arg range: number (Interaction range)/n--@arg time: number (Interaction time)/nfunction/nBANETO_DefineDungeonObject/n(/n,/n,/n)/n"
  ],
  [
    "DefineDungeonVendor [classic|retail]",
    "\nDescription: Define a dungeon vendor location.",
    "undefined--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/n--@arg id: number (Vendor ID)/nfunction/nBANETO_DefineDungeonVendor/n(/n,/n,/n,/n)/n"
  ],
  [
    "DefineInnkeeper [classic|retail]",
    "\nDescription: Define an innkeeper's location.",
    "undefined--@arg x: number (X coordinate)/n--@arg y: number (Y coordinate)/n--@arg z: number (Z coordinate)/n--@arg id: number (Innkeeper ID)/nfunction/nBANETO_DefineInnkeeper/n(/n,/n,/n,/n)/n"
  ],
  [
    "DefineBlacklist [classic|retail]",
    "\nDescription: Define a blacklist zone.",
    "undefined--@arg x: number (X coordinate of center)/n--@arg y: number (Y coordinate of center)/n--@arg z: number (Z coordinate of center)/n--@arg radius: number (Radius of the blacklist zone)/nfunction/nBANETO_DefineBlacklist/n(/n,/n,/n,/n)/n"
  ],
  [
    "DefineGlobalBlacklistArea [classic|retail]",
    "\nDescription: Define a global blacklist zone.",
    "undefined--@arg x: number (X coordinate of center)/n--@arg y: number (Y coordinate of center)/n--@arg z: number (Z coordinate of center)/n--@arg radius: number (Radius of the blacklist zone)/nfunction/nBANETO_DefineGlobalBlacklistArea/n(/n,/n,/n,/n)/n"
  ],
  [
    "SetNextProfile [classic|retail]",
    "\nDescription: Set the next profile with given name and level.",
    "undefined--@arg name: string (Profile name)/n--@arg level: number (Profile level)/nfunction/nBANETO_SetNextProfile/n(/n,/n)/n"
  ],
  [
    "SetNextLocalProfile [classic|retail]",
    "\nDescription: Set the next local profile with given name and level.",
    "undefined--@arg name: string (Profile name)/n--@arg level: number (Profile level)/nfunction/nBANETO_SetNextLocalProfile/n(/n,/n)/n"
  ],
  [
    "SetNextLocalQuestProfile [classic|retail]",
    "\nDescription: Set the next local quest profile with given name.",
    "undefined--@arg name: string (Profile name)/nfunction/nBANETO_SetNextLocalQuestProfile/n(/n)/n"
  ],
  [
    "LoadLocalNextQuesterRoutine [classic|retail]",
    "\nDescription: Load the next local quest routine.",
    "undefinedfunction/nBANETO_LoadLocalNextQuesterRoutine/n(/n)/n"
  ],
  [
    "GetNextProfileGatheringLocal [classic]",
    "\nDescription: Get the next local gathering profile.",
    "undefined--@return: string (Profile name)/nfunction/nBANETO_GetNextProfileGatheringLocal/n(/n)/n"
  ],
  [
    "SetNextProfileGatheringLocal [classic]",
    "\nDescription: Set the next local gathering profile with given name, profession, and skill.",
    "undefined--@arg name: string (Profile name)/n--@arg profession: string (Profession name)/n--@arg skill: number (Skill level)/nfunction/nBANETO_SetNextProfileGatheringLocal/n(/n,/n,/n)/n"
  ],
  [
    "SetNextProfileGathering [classic|retail]",
    "\nDescription: Set the next gathering profile with given name, profession, and skill.",
    "undefined--@arg name: string (Profile name)/n--@arg profession: string (Profession name)/n--@arg skill: number (Skill level)/nfunction/nBANETO_SetNextProfileGathering/n(/n,/n,/n)/n"
  ],
  [
    "BlacklistID [classic|retail]",
    "\nDescription: Blacklist a specific ID.",
    "undefined--@arg id: number (ID to be blacklisted)/nfunction/nBlacklistID/n(/n)/n"
  ],
  [
    "BlacklistID [classic|retail]",
    "\nDescription: Adds a given ID to the blacklist.",
    "undefined--@arg id: number/nfunction/nBANETO_BlacklistID/n(/n)/n"
  ],
  [
    "ClearAllBlacklistIDs [classic|retail]",
    "\nDescription: Clears all IDs from the blacklist.",
    "undefinedfunction/nBANETO_ClearAllBlacklistIDs/n(/n)/n"
  ],
  [
    "DefineBlacklistIDGlobal [classic|retail]",
    "\nDescription: Defines a blacklist ID globally.",
    "undefined--@arg id: number/nfunction/nBANETO_DefineBlacklistIDGlobal/n(/n)/n"
  ],
  [
    "DefineProfileType [classic|retail]",
    "\nDescription: Defines the type of the current profile.",
    "undefined--@arg type: string/nfunction/nBANETO_DefineProfileType/n(/n)/n"
  ],
  [
    "DefineQuestStepType [classic|retail]",
    "\nDescription: Defines the type of the current quest step.",
    "undefined--@arg type: string/nfunction/nBANETO_DefineQuestStepType/n(/n)/n"
  ],
  [
    "DefineQuestId [classic|retail]",
    "\nDescription: Defines the ID of the current quest.",
    "undefined--@arg id: number/nfunction/nBANETO_DefineQuestId/n(/n)/n"
  ],
  [
    "DefineQuestTargetId [classic|retail]",
    "\nDescription: Defines the target ID of the current quest.",
    "undefined--@arg id: number/nfunction/nBANETO_DefineQuestTargetId/n(/n)/n"
  ],
  [
    "DefineQuestPickupNPC [classic|retail]",
    "\nDescription: Defines the NPC for picking up the current quest.",
    "undefined--@arg x: number/n--@arg y: number/n--@arg z: number/n--@arg id: number/nfunction/nBANETO_DefineQuestPickupNPC/n(/n,/n,/n,/n)/n"
  ],
  [
    "DefineQuestTurninNPC [classic|retail]",
    "\nDescription: Defines the NPC for turning in the current quest.",
    "undefined--@arg x: number/n--@arg y: number/n--@arg z: number/n--@arg id: number/nfunction/nBANETO_DefineQuestTurninNPC/n(/n,/n,/n,/n)/n"
  ],
  [
    "DefineGrindToLevelValue [classic|retail]",
    "\nDescription: Defines the grind value up to the provided level.",
    "undefined--@arg level: number/nfunction/nBANETO_DefineGrindToLevelValue/n(/n)/n"
  ],
  [
    "HasAllRequiredQuests [classic|retail]",
    "\nDescription: Checks if all required quests have been obtained.",
    "undefined--@return: boolean/nfunction/nBANETO_HasAllRequiredQuests/n(/n)/n"
  ],
  [
    "HasAllRequiredQuestsFinished [classic|retail]",
    "\nDescription: Checks if all required quests have been finished.",
    "undefined--@return: boolean/nfunction/nBANETO_HasAllRequiredQuestsFinished/n(/n)/n"
  ],
  [
    "HasQuestCompleted [classic|retail]",
    "\nDescription: Checks if the specified quest has been completed.",
    "undefined--@arg questid: number/n--@return: boolean/nfunction/nBANETO_HasQuestCompleted/n(/n)/n"
  ],
  [
    "AreAllRequiredQuestCompleted [classic|retail]",
    "\nDescription: Checks if all required quests have been completed.",
    "undefined--@return: boolean/nfunction/nBANETO_AreAllRequiredQuestCompleted/n(/n)/n"
  ],
  [
    "GetNextQuestStep [classic|retail]",
    "\nDescription: Gets the next quest step.",
    "undefined--@return: table or nil/nfunction/nBANETO_GetNextQuestStep/n(/n)/n"
  ],
  [
    "LoadLibraryQuest [classic|retail]",
    "\nDescription: Loads a specified routine and step from the library quest.",
    "undefined--@arg routine: string/n--@arg step: number/nfunction/nBANETO_LoadLibraryQuest/n(/n,/n)/n"
  ],
  [
    "AbandonQuest [classic|retail]",
    "\nDescription: Abandons a specified quest.",
    "undefined--@arg Questid: number/nfunction/nBANETO_AbandonQuest/n(/n)/n"
  ],
  [
    "AbandonAllQuests [classic|retail]",
    "\nDescription: Abandons all active quests.",
    "undefinedfunction/nBANETO_AbandonAllQuests/n(/n)/n"
  ],
  [
    "HasQuest [classic|retail]",
    "\nDescription: Checks if the player has a specified quest.",
    "undefined--@arg Questid: number/n--@return: boolean/nfunction/nBANETO_HasQuest/n(/n)/n"
  ],
  [
    "GetQuestIndexById [classic|retail]",
    "\nDescription: Gets the index of the specified quest by its ID.",
    "undefined--@arg Questid: number/n--@return: number or nil/nfunction/nBANETO_GetQuestIndexById/n(/n)/n"
  ],
  [
    "GetNextQuestPickupData [classic|retail]",
    "\nDescription: Gets the next quest pick_up data.",
    "undefined--@return: table or nil/nfunction/nBANETO_GetNextQuestPickupData/n(/n)/n"
  ],
  [
    "GetNextQuestTurninData [classic|retail]",
    "\nDescription: Gets the next quest turn_in data.",
    "undefined--@return: table or nil/nfunction/nBANETO_GetNextQuestTurninData/n(/n)/n"
  ],
  [
    "DefineProfileTravelVector [classic|retail]",
    "\nDescription: Defines a travel vector for the profile.",
    "undefined--@arg x: number/n--@arg y: number/n--@arg z: number/nfunction/nBANETO_DefineProfileTravelVector/n(/n,/n,/n)/n"
  ],
  [
    "GetDefinedVendor [classic|retail]",
    "\nDescription: Retrieves the vendor information for the specified type.",
    "undefined--@arg type: string/n--@return: table or nil/nfunction/nBANETO_GetDefinedVendor/n(/n)/n"
  ],
  [
    "VisionTriggers [classic|retail]",
    "\nDescription: Triggers a specific vision mechanism, based on the given type.",
    "undefined--@arg type: string/nfunction/nBANETO_VisionTriggers/n(/n)/n"
  ],
  [
    "LoadLocalProfile [classic|retail]",
    "\nDescription: Loads a local profile in the BANETO system.",
    "undefined--@arg profilename: The name of the profile to load./n--@return: No return value./nfunction/nBANETO_LoadLocalProfile/n(/n)/n"
  ],
  [
    "LoadProfile [classic|retail]",
    "\nDescription: Loads a profile in the BANETO system.",
    "undefined--@arg profilename: The name of the profile to load./n--@return: No return value./nfunction/nBANETO_LoadProfile/n(/n)/n"
  ],
  [
    "LoadWaldoWarrior [classic]",
    "\nDescription: Loads the Waldo Warrior profile in the BANETO system.",
    "undefined--@return: No return value./nfunction/nBANETO_LoadWaldoWarrior/n(/n)/n"
  ],
  [
    "ActiveRotation [classic]",
    "\nDescription: Activates the current rotation in the BANETO system.",
    "undefined--@return: No return value./nfunction/nActiveRotation/n(/n)/n"
  ],
  [
    "DefineOrderbookEntry [classic]",
    "\nDescription: Defines an entry in the BANETO system's order book.",
    "undefined--@arg itemname: The name of the item./n--@arg unitprice: The price per unit of the item./n--@arg unitmax: The maximum number of units./n--@return: No return value./nfunction/nBANETO_DefineOrderbookEntry/n(/n,/n,/n)/n"
  ],
  [
    "LoadQuestProfile [classic|retail]",
    "\nDescription: Loads a quest profile in the BANETO system.",
    "undefined--@arg profilename: The name of the quest profile to load./n--@return: No return value./nfunction/nBANETO_LoadQuestProfile/n(/n)/n"
  ],
  [
    "BuildProfileListGathering [classic|retail]",
    "\nDescription: Builds a list of gathering profiles in the BANETO system.",
    "undefined--@return: A list of gathering profiles./nfunction/nBANETO_BuildProfileListGathering/n(/n)/n"
  ],
  [
    "GetCraftListTable [classic]",
    "\nDescription: Retrieves a table of craft list in the BANETO system.",
    "undefined--@return: A table of craft list./nfunction/nBANETO_GetCraftListTable/n(/n)/n"
  ],
  [
    "LoadCraftList [classic]",
    "\nDescription: Loads a craft list in the BANETO system.",
    "undefined--@arg list: The craft list to load./n--@return: No return value./nfunction/nBANETO_LoadCraftList/n(/n)/n"
  ],
  [
    "SaveCraftingListFromEditor [classic]",
    "\nDescription: Saves the crafting list from the editor in the BANETO system.",
    "undefined--@return: No return value./nfunction/nBANETO_SaveCraftingListFromEditor/n(/n)/n"
  ],
  [
    "BuildProfileListCrafting [classic|retail]",
    "\nDescription: Builds a list of crafting profiles in the BANETO system.",
    "undefined--@return: A list of crafting profiles./nfunction/nBANETO_BuildProfileListCrafting/n(/n)/n"
  ],
  [
    "BuildProfileListQuesting [classic|retail]",
    "\nDescription: Builds a list of questing profiles in the BANETO system.",
    "undefined--@return: A list of questing profiles./nfunction/nBANETO_BuildProfileListQuesting/n(/n)/n"
  ],
  [
    "BuildProfileListDungeons [classic|retail]",
    "\nDescription: Builds a list of dungeon profiles in the BANETO system.",
    "undefined--@return: A list of dungeon profiles./nfunction/nBANETO_BuildProfileListDungeons/n(/n)/n"
  ],
  [
    "BuildProfileListTraveling [classic|retail]",
    "\nDescription: Builds a list of traveling profiles in the BANETO system.",
    "undefined--@return: A list of traveling profiles./nfunction/nBANETO_BuildProfileListTraveling/n(/n)/n"
  ],
  [
    "BuildProfileListBattlegrounds [classic|retail]",
    "\nDescription: Builds a list of battleground profiles in the BANETO system.",
    "undefined--@return: A list of battleground profiles./nfunction/nBANETO_BuildProfileListBattlegrounds/n(/n)/n"
  ],
  [
    "BuildProfileListLocalQuestProfiles [classic|retail]",
    "\nDescription: Builds a list of local quest profiles in the BANETO system.",
    "undefined--@return: A list of local quest profiles./nfunction/nBANETO_BuildProfileListLocalQuestProfiles/n(/n)/n"
  ],
  [
    "GetLocalProfiles [classic]",
    "\nDescription: Retrieves a list of local profiles in the BANETO system.",
    "undefined--@return: A list of local profiles./nfunction/nBANETO_GetLocalProfiles/n(/n)/n"
  ],
  [
    "ListDirs [classic]",
    "\nDescription: Lists the directories at a specified path.",
    "undefined--@arg path: The path to list directories from./n--@return: A list of directories at the specified path./nfunction/nBANETO_ListDirs/n(/n)/n"
  ],
  [
    "ListFiles [classic]",
    "\nDescription: Lists the files at a specified path.",
    "undefined--@arg path: The path to list files from./n--@return: A list of files at the specified path./nfunction/nBANETO_ListFiles/n(/n)/n"
  ],
  [
    "BuildProfileListLocalProfilesWithSubfolders [classic|retail]",
    "\nDescription: Builds a list of local profiles with subfolders in the BANETO system.",
    "undefined--@return: A list of local profiles with subfolders./nfunction/nBANETO_BuildProfileListLocalProfilesWithSubfolders/n(/n)/n"
  ],
  [
    "BuildProfileListLocalProfiles [classic|retail]",
    "\nDescription: Builds a list of local profiles in the BANETO system.",
    "undefined--@return: A list of local profiles./nfunction/nBANETO_BuildProfileListLocalProfiles/n(/n)/n"
  ],
  [
    "BuildProfileListGoldfarming [classic|retail]",
    "\nDescription: Builds a list of gold farming profiles in the BANETO system.",
    "undefined--@return: A list of gold farming profiles./nfunction/nBANETO_BuildProfileListGoldfarming/n(/n)/n"
  ],
  [
    "BuildProfileListGrinding [classic|retail]",
    "\nDescription: Builds a list of grinding profiles in the BANETO system.",
    "undefined--@return: A list of grinding profiles./nfunction/nBANETO_BuildProfileListGrinding/n(/n)/n"
  ],
  [
    "LoadProfileDescription [classic|retail]",
    "\nDescription: Loads the description of a specified profile in the BANETO system.",
    "undefined--@arg profilusNamus: The name of the profile to load the description for./n--@return: The description of the specified profile./nfunction/nBANETO_LoadProfileDescription/n(/n)/n"
  ],
  [
    "BuildProfileListEternal [classic|retail]",
    "\nDescription: Builds a list of eternal profiles in the BANETO system.",
    "undefined--@return: A list of eternal profiles./nfunction/nBANETO_BuildProfileListEternal/n(/n)/n"
  ],
  [
    "BuildProfileListCryptoHorde [classic]",
    "\nDescription: Builds a list of Crypto Horde profiles in the BANETO system.",
    "undefined--@return: A list of Crypto Horde profiles./nfunction/nBANETO_BuildProfileListCryptoHorde/n(/n)/n"
  ],
  [
    "BuildProfileListCryptoAlliance [classic]",
    "\nDescription: Builds a list of Crypto Alliance profiles in the BANETO system.",
    "undefined--@return: A list of Crypto Alliance profiles./nfunction/nBANETO_BuildProfileListCryptoAlliance/n(/n)/n"
  ],
  [
    "BuildProfileListCryptoGold [classic]",
    "\nDescription: Builds a list of Crypto Gold profiles in the BANETO system.",
    "undefined--@return: A list of Crypto Gold profiles./nfunction/nBANETO_BuildProfileListCryptoGold/n(/n)/n"
  ],
  [
    "SetState [classic|retail]",
    "\nDescription: Sets the state of the BANETO system.",
    "undefined--@arg state: The state to set./n--@return: No return value./nfunction/nBANETO_SetState/n(/n)/n"
  ],
  [
    "IsProfileLoaded [classic|retail]",
    "\nDescription: Checks whether a profile is loaded in the BANETO system.",
    "undefined--@return: True if a profile is loaded, false otherwise./nfunction/nBANETO_IsProfileLoaded/n(/n)/n"
  ],
  [
    "SnipeAh [classic]",
    "\nDescription: Performs a snipe operation on the auction house in the BANETO system.",
    "undefined--@return: No return value./nfunction/nBANETO_SnipeAh/n(/n)/n"
  ],
  [
    "BuyAhItem [classic]",
    "\nDescription: Buys an item from the auction house in the BANETO system.",
    "undefined--@arg name: The name of the item./n--@arg index: The index of the item./n--@arg price: The price of the item./n--@return: No return value./nfunction/nBANETO_BuyAhItem/n(/n,/n,/n)/n"
  ],
  [
    "IsRepairNeeded [classic|retail]",
    "\nDescription: Checks whether repair is needed in the BANETO system.",
    "undefined--@return: True if repair is needed, false otherwise./nfunction/nBANETO_IsRepairNeeded/n(/n)/n"
  ],
  [
    "GetArmorPercentage [classic|retail]",
    "\nDescription: Retrieves the current armor percentage in the BANETO system.",
    "undefined--@return: The current armor percentage as a number./nfunction/nBANETO_GetArmorPercentage/n(/n)/n"
  ],
  [
    "UnlockedTargetReaction [classic|retail]",
    "\nDescription: Gets the reaction of the specified unlocked target.",
    "undefined--@arg unit: The unit identifier string./n--@return: The reaction of the unit./nfunction/nUnlockedTargetReaction/n(/n)/n"
  ],
  [
    "UnlockedUnitIsTrivial [classic|retail]",
    "\nDescription: Checks whether the specified unlocked unit is trivial.",
    "undefined--@arg unit: The unit identifier string./n--@return: True if the unit is trivial, false otherwise./nfunction/nUnlockedUnitIsTrivial/n(/n)/n"
  ],
  [
    "UnlockedTargetHealth [classic|retail]",
    "\nDescription: Gets the health of the specified unlocked target.",
    "undefined--@arg unit: The unit identifier string./n--@return: The health of the unit./nfunction/nUnlockedTargetHealth/n(/n)/n"
  ],
  [
    "UnlockedTargetCreatureTypeId [classic|retail]",
    "\nDescription: Gets the creature type ID of the specified unlocked target.",
    "undefined--@arg unit: The unit identifier string./n--@return: The creature type ID of the unit./nfunction/nUnlockedTargetCreatureTypeId/n(/n)/n"
  ],
  [
    "SecurityEmote [classic|retail]",
    "\nDescription: Performs a security emote.",
    "undefinedfunction/nBANETO_SecurityEmote/n(/n)/n"
  ],
  [
    "UnlockedTargetCreatureType [classic|retail]",
    "\nDescription: Gets the creature type of the specified unlocked target.",
    "undefined--@arg unit: The unit identifier string./n--@return: The creature type of the unit./nfunction/nUnlockedTargetCreatureType/n(/n)/n"
  ],
  [
    "UnlockedTargetClassification [classic|retail]",
    "\nDescription: Gets the classification of the specified unlocked target.",
    "undefined--@arg unit: The unit identifier string./n--@return: The classification of the unit./nfunction/nUnlockedTargetClassification/n(/n)/n"
  ],
  [
    "UnlockedTargetUnit [classic|retail]",
    "\nDescription: Gets the unit of the specified unlocked target.",
    "undefined--@arg unit: The unit identifier string./n--@return: The unit of the unit./nfunction/nUnlockedTargetUnit/n(/n)/n"
  ],
  [
    "TaxiInitFunc [classic|retail]",
    "\nDescription: Initializes the BANETO taxi system.",
    "undefined--@return: No return value./nfunction/nBANETO_TaxiInitFunc/n(/n)/n"
  ],
  [
    "GetNodenameByFlightmasterId [classic|retail]",
    "\nDescription: Gets the node name associated with a specified flightmaster ID in the BANETO system.",
    "undefined--@arg id: The ID of the flightmaster./n--@return: The node name associated with the flightmaster ID./nfunction/nBANETO_GetNodenameByFlightmasterId/n(/n)/n"
  ],
  [
    "UseTaxiNode [classic|retail]",
    "\nDescription: Uses a specified taxi node in the BANETO system.",
    "undefined--@arg destinationNodeName: The name of the destination taxi node./n--@return: No return value./nfunction/nBANETO_UseTaxiNode/n(/n)/n"
  ],
  [
    "UseRacials [classic|retail]",
    "\nDescription: Uses racial abilities in the BANETO system.",
    "undefined--@return: No return value./nfunction/nBANETO_UseRacials/n(/n)/n"
  ],
  [
    "IsUnitDeadOrGhost [classic|retail]",
    "\nDescription: Checks if a specified unit is dead or a ghost in the BANETO system.",
    "undefined--@arg unit: The unit identifier string./n--@return: True if the unit is dead or a ghost, false otherwise./nfunction/nBANETO_IsUnitDeadOrGhost/n(/n)/n"
  ],
  [
    "IsDeadOrGhost [classic|retail]",
    "\nDescription: Checks if the player character is dead or a ghost in the BANETO system.",
    "undefined--@return: True if the player character is dead or a ghost, false otherwise./nfunction/nBANETO_IsDeadOrGhost/n(/n)/n"
  ],
  [
    "HighestDruidForm [classic|retail]",
    "\nDescription: Gets the highest druid form available to the player character in the BANETO system.",
    "undefined--@return: The highest druid form available to the player character./nfunction/nBANETO_HighestDruidForm/n(/n)/n"
  ],
  [
    "PlayerPosition [classic|retail]",
    "\nDescription: Gets the player character's position in the BANETO system.",
    "undefined--@arg x: The X coordinate./n--@arg y: The Y coordinate./n--@arg z: The Z coordinate./n--@arg distance: The distance./n--@return: The player character's position./nfunction/nBANETO_PlayerPosition/n(/n,/n,/n,/n)/n"
  ],
  [
    "BANET_LoadKaraTest [classic]",
    "\nDescription: Loads the Kara test in the BANETO system.",
    "undefined--@return: No return value./nfunction/nBANET_LoadKaraTest/n(/n)/n"
  ],
  [
    "FightBlockKa [classic]",
    "\nDescription: Blocks the fight in the BANETO system for the Ka test.",
    "undefined--@return: No return value./nfunction/nBANETO_FightBlockKa/n(/n)/n"
  ],
  [
    "PullBehaviorKa [classic]",
    "\nDescription: Executes the pull behavior in the BANETO system for the Ka test.",
    "undefined--@return: No return value./nfunction/nBANETO_PullBehaviorKa/n(/n)/n"
  ],
  [
    "CheckSpotKa [classic]",
    "\nDescription: Checks the spot in the BANETO system for the Ka test.",
    "undefined--@return: No return value./nfunction/nBANETO_CheckSpotKa/n(/n)/n"
  ],
  [
    "LoadRotaOnlyMode [classic|retail]",
    "\nDescription: Loads the rota_only mode in the BANETO system.",
    "undefined--@return: No return value./nfunction/nBANETO_LoadRotaOnlyMode/n(/n)/n"
  ],
  [
    "Load1ClickFarm [classic|retail]",
    "\nDescription: Loads the 1_click farm mode in the BANETO system.",
    "undefined--@return: No return value./nfunction/nBANETO_Load1ClickFarm/n(/n)/n"
  ],
  [
    "UpdateVendors60Seconds [classic|retail]",
    "\nDescription: Updates vendors every 60 seconds in the BANETO system.",
    "undefined--@return: No return value./nfunction/nBANETO_UpdateVendors60Seconds/n(/n)/n"
  ],
  [
    "CheckVendors [classic|retail]",
    "\nDescription: Checks vendors in the BANETO system.",
    "undefined--@return: No return value./nfunction/nBANETO_CheckVendors/n(/n)/n"
  ],
  [
    "GetDistance3D [classic|retail]",
    "\nDescription: Gets the 3D distance between two sets of coordinates.",
    "undefined--@arg X: The X coordinate of the first point./n--@arg Y: The Y coordinate of the first point./n--@arg Z: The Z coordinate of the first point./n--@arg XX: The X coordinate of the second point./n--@arg YY: The Y coordinate of the second point./n--@arg ZZ: The Z coordinate of the second point./n--@return: The 3D distance between the two sets of coordinates./nfunction/nBANETO_GetDistance3D/n(/n,/n,/n,/n,/n,/n)/n"
  ],
  [
    "GetClosestNpc [classic|retail]",
    "\nDescription: Gets the closest NPC of a certain type in the BANETO system.",
    "undefined--@arg npctype: The type of the NPC./n--@return: The closest NPC of the specified type./nfunction/nBANETO_GetClosestNpc/n(/n)/n"
  ],
  [
    "IsMiningNode [classic|retail]",
    "\nDescription: Checks whether a specified ID is a mining node in the BANETO system.",
    "undefined--@arg id: The ID of the node./n--@return: True if the ID is a mining node, false otherwise./nfunction/nBANETO_IsMiningNode/n(/n)/n"
  ],
  [
    "iswotlkwow [classic|retail]",
    "\nDescription: Checks whether the current game version is World of Warcraft: Wrath of the Lich King.",
    "undefined--@return: True if the current game version is World of Warcraft: Wrath of the Lich King, false otherwise./nfunction/niswotlkwow/n(/n)/n"
  ],
  [
    "isClassicwow [classic|retail]",
    "\nDescription: Checks whether the current game version is World of Warcraft Classic.",
    "undefined--@return: True if the current game version is World of Warcraft Classic, false otherwise./nfunction/nisClassicwow/n(/n)/n"
  ],
  [
    "GeneratePathBamboFlying2 [classic|retail]",
    "\nDescription: Generates a path for the Bambo flying system.",
    "undefined--@arg x: The X coordinate of the destination./n--@arg y: The Y coordinate of the destination./n--@arg z: The Z coordinate of the destination./n--@return: The generated path./nfunction/nGeneratePathBamboFlying2/n(/n,/n,/n)/n"
  ],
  [
    "GenerateMatrix [classic|retail]",
    "\nDescription: Generates a matrix of points around a specified point.",
    "undefined--@arg x: The X coordinate of the center point./n--@arg y: The Y coordinate of the center point./n--@arg z: The Z coordinate of the center point./n--@arg buffer: The distance from the center point to the edge of the matrix./n--@arg distanceBetween: The distance between points in the matrix./n--@return: The generated matrix./nfunction/nGenerateMatrix/n(/n,/n,/n,/n,/n)/n"
  ],
  [
    "UnitCastingInfo [classic]",
    "\nDescription: Retrieves casting information for a specified unit.",
    "undefined--@arg lib: The library from which to retrieve the casting information./n--@arg unit: The unit for which to retrieve casting information./n--@return: The casting information for the unit./nfunction/nUnitCastingInfo/n(/n,/n)/n"
  ],
  [
    "UnitChannelInfo [classic|retail]",
    "\nDescription: Retrieves channeling information for a specified unit.",
    "undefined--@arg lib: The library from which to retrieve the channeling information./n--@arg unit: The unit for which to retrieve channeling information./n--@return: The channeling information for the unit./nfunction/nUnitChannelInfo/n(/n,/n)/n"
  ],
  [
    "GetAllPlayerTalents [classic|retail]",
    "\nDescription: Gets all talents of player.",
    "undefined--@return: Table of player talents./nfunction/nBANETO_GetAllPlayerTalents/n(/n)/n"
  ],
  [
    "PlayerHasTalent [classic|retail]",
    "\nDescription: Checks whether player has a talent.",
    "undefined--@arg n: string: Name of the talent./n--@return: boolean/nfunction/nBANETO_PlayerHasTalent/n(/n)/n"
  ],
  [
    "HideAllSubFrames [classic|retail]",
    "\nDescription: Hides all Baneto subframes.",
    "undefined--@return: No return value./nfunction/nBANETO_HideAllSubFrames/n(/n)/n"
  ],
  [
    "HideAllSubFramesLibrary [classic|retail]",
    "\nDescription: Hides all Baneto subframes in the library.",
    "undefined--@return: No return value./nfunction/nBANETO_HideAllSubFramesLibrary/n(/n)/n"
  ],
  [
    "CollapseUi [classic|retail]",
    "\nDescription: Collapses the Baneto user interface.",
    "undefined--@return: No return value./nfunction/nBANETO_CollapseUi/n(/n)/n"
  ],
  [
    "ShowUi [classic|retail]",
    "\nDescription: Displays the Baneto user interface.",
    "undefined--@return: No return value./nfunction/nBANETO_ShowUi/n(/n)/n"
  ],
  [
    "HideAllMainFrames [classic|retail]",
    "\nDescription: Hides all Baneto main frames.",
    "undefined--@return: No return value./nfunction/nBANETO_HideAllMainFrames/n(/n)/n"
  ],
  [
    "UseInvSlotItem [classic|retail]",
    "\nDescription: Uses an item from a given inventory slot.",
    "undefined--@arg slot: number/nfunction/nBANETO_UseInvSlotItem/n(/n)/n"
  ],
  [
    "StateHandler [classic|retail]",
    "\nDescription: Handles the state of a Baneto component. This typically is not useful for you.",
    "undefined--@arg self: The Baneto component to handle the state for./n--@return: No return value./nfunction/nBANETO_StateHandler/n(/n)/n"
  ],
  [
    "HowManyBagsEquipped [classic|retail]",
    "\nDescription: Checks how many bags are currently equipped in Baneto.",
    "undefined--@return: The number of equipped bags./nfunction/nBANETO_HowManyBagsEquipped/n(/n)/n"
  ],
  [
    "StateExecute [classic|retail]",
    "\nDescription: Executes the current state in Baneto.",
    "undefined--@return: No return value./nfunction/nBANETO_StateExecute/n(/n)/n"
  ],
  [
    "RemoveEntryFromGlobalHealIdWhitelist [classic|retail]",
    "\nDescription: Removes an ID from the global heal whitelist.",
    "undefined--@arg id: number/n--@return: void/nfunction/nBANETO_RemoveEntryFromGlobalHealIdWhitelist/n(/n)/n"
  ],
  [
    "RemoveEntryFromGlobalBUFFIdWhitelist [classic|retail]",
    "\nDescription: Removes an ID from the global buff whitelist.",
    "undefined--@arg id: number/n--@return: void/nfunction/nBANETO_RemoveEntryFromGlobalBUFFIdWhitelist/n(/n)/n"
  ],
  [
    "RemoveEntryFromGlobalSpellIdWhitelist [classic|retail]",
    "\nDescription: Removes an ID from the global spell whitelist.",
    "undefined--@arg id: number/n--@return: void/nfunction/nBANETO_RemoveEntryFromGlobalSpellIdWhitelist/n(/n)/n"
  ],
  [
    "RemoveEntryFromGlobalSpellIdBlacklist [classic|retail]",
    "\nDescription: Removes an ID from the global spell blacklist.",
    "undefined--@arg id: number/n--@return: void/nfunction/nBANETO_RemoveEntryFromGlobalSpellIdBlacklist/n(/n)/n"
  ],
  [
    "ShamanWeaponCheckOffHand [classic|retail]",
    "\nDescription: Checks the off_hand weapon for a Shaman.",
    "undefined--@return: boolean/nfunction/nBANETO_ShamanWeaponCheckOffHand/n(/n)/n"
  ],
  [
    "ShamanWeaponCheckMainHand [classic|retail]",
    "\nDescription: Checks the main_hand weapon for a Shaman.",
    "undefined--@return: boolean/nfunction/nBANETO_ShamanWeaponCheckMainHand/n(/n)/n"
  ],
  [
    "GetPlayerAroundUs [classic|retail]",
    "\nDescription: Gets the player around us.",
    "undefined--@return: a player object/nfunction/nBANETO_GetPlayerAroundUs/n(/n)/n"
  ],
  [
    "requestNoroFile [retail]",
    "\nDescription: Requests the Noro file.",
    "undefined--@return: No return value./nfunction/nrequestNoroFile/n(/n)/n"
  ],
  [
    "IsRetailCryptoCustomer [retail]",
    "\nDescription: Checks if a product is bought from a retail crypto customer.",
    "undefined--@arg product: The product to check./n--@return: True if the product is bought from a retail crypto customer, false otherwise./nfunction/nBANETO_IsRetailCryptoCustomer/n(/n)/n"
  ],
  [
    "JoinBattlefield [retail]",
    "\nDescription: Joins a battlefield at the specified index.",
    "undefined--@arg index: The index of the battlefield to join./n--@return: No return value./nfunction/nBANETO_JoinBattlefield/n(/n)/n"
  ],
  [
    "IsInsideRbg [retail]",
    "\nDescription: Checks if the player is inside a rated battleground (RBG).",
    "undefined--@return: True if the player is inside an RBG, false otherwise./nfunction/nBANETO_IsInsideRbg/n(/n)/n"
  ],
  [
    "IsAtLeast1RbgAllowed [retail]",
    "\nDescription: Checks if at least one rated battleground (RBG) is allowed.",
    "undefined--@return: boolean/nfunction/nBANETO_IsAtLeast1RbgAllowed/n(/n)/n"
  ],
  [
    "InitDragonRidingValues [retail]",
    "\nDescription: Initializes values related to dragon riding.",
    "undefined--@return: void/nfunction/nBANETO_InitDragonRidingValues/n(/n)/n"
  ],
  [
    "TestDcA [retail]",
    "\nDescription: Executes a DC test A.",
    "undefined--@return: boolean/nfunction/nBANETO_TestDcA/n(/n)/n"
  ],
  [
    "IsLastProfileWqm [retail]",
    "\nDescription: Checks if the last used profile was WQM.",
    "undefined--@return: boolean/nfunction/nBANETO_IsLastProfileWqm/n(/n)/n"
  ],
  [
    "AddItemToStoreList [retail]",
    "\nDescription: Adds an item to the store list.",
    "undefined--@arg itemname: string/n--@return: void/nfunction/nBANETO_AddItemToStoreList/n(/n)/n"
  ],
  [
    "IsEntryInGlobalHealWhitelist [retail]",
    "\nDescription: Checks if an ID is in the global heal whitelist.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsEntryInGlobalHealWhitelist/n(/n)/n"
  ],
  [
    "IsEntryInGlobalBUFFWhitelist [retail]",
    "\nDescription: Checks if an ID is in the global buff whitelist.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsEntryInGlobalBUFFWhitelist/n(/n)/n"
  ],
  [
    "IsEntryInGlobalSpellWhitelist [retail]",
    "\nDescription: Checks if an ID is in the global spell whitelist.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsEntryInGlobalSpellWhitelist/n(/n)/n"
  ],
  [
    "IsEntryInGlobalSpellBlacklist [retail]",
    "\nDescription: Checks if an ID is in the global spell blacklist.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsEntryInGlobalSpellBlacklist/n(/n)/n"
  ],
  [
    "RemoveItemFromStoreList [retail]",
    "\nDescription: Removes an item from the store list.",
    "undefined--@arg itemname: string/n--@return: void/nfunction/nBANETO_RemoveItemFromStoreList/n(/n)/n"
  ],
  [
    "VisualizeGlobalSpellIdBlacklist [retail]",
    "\nDescription: Visualizes the global spell blacklist.",
    "undefined--@return: table/nfunction/nBANETO_VisualizeGlobalSpellIdBlacklist/n(/n)/n"
  ],
  [
    "VisualizeGlobalHealIdWhitelist [retail]",
    "\nDescription: Visualizes the global heal whitelist.",
    "undefined--@return: table/nfunction/nBANETO_VisualizeGlobalHealIdWhitelist/n(/n)/n"
  ],
  [
    "VisualizeGlobalBUFFIdWhitelist [retail]",
    "\nDescription: Visualizes the global buff whitelist.",
    "undefined--@return: table/nfunction/nBANETO_VisualizeGlobalBUFFIdWhitelist/n(/n)/n"
  ],
  [
    "VisualizeGlobalSpellIdWhitelist [retail]",
    "\nDescription: Visualizes the global spell whitelist.",
    "undefined--@return: table/nfunction/nBANETO_VisualizeGlobalSpellIdWhitelist/n(/n)/n"
  ],
  [
    "VisualizeSherlockList [retail]",
    "\nDescription: Visualizes the Sherlock list.",
    "undefined--@return: table/nfunction/nBANETO_VisualizeSherlockList/n(/n)/n"
  ],
  [
    "VisualizeStoreList [retail]",
    "\nDescription: Visualizes the store list.",
    "undefined--@return: table/nfunction/nBANETO_VisualizeStoreList/n(/n)/n"
  ],
  [
    "HasMammooth [retail]",
    "\nDescription: Checks if the specified ID has a Mammoth.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_HasMammooth/n(/n)/n"
  ],
  [
    "HasAnyMammooth [retail]",
    "\nDescription: Checks if the player has any type of Mammoth.",
    "undefined--@return: boolean/nfunction/nBANETO_HasAnyMammooth/n(/n)/n"
  ],
  [
    "SurvivalHunterRetailNewAoETarget [retail]",
    "\nDescription: Chooses a new AOE target for the Survival Hunter in retail WoW.",
    "undefined--@return: Unit/nfunction/nBANETO_SurvivalHunterRetailNewAoETarget/n(/n)/n"
  ],
  [
    "CreenToWorldCursorPos [retail]",
    "\nDescription: Gets the cursor's current world position.",
    "undefined--@return: Vector3/nfunction/nBANETO_CreenToWorldCursorPos/n(/n)/n"
  ],
  [
    "IsGuidContainedInGuidSkinnedlist [retail]",
    "\nDescription: Checks if a GUID is in the GUID skinned list.",
    "undefined--@arg guid: string/n--@return: boolean/nfunction/nBANETO_IsGuidContainedInGuidSkinnedlist/n(/n)/n"
  ],
  [
    "AddMobToGuidSkinnedlist [retail]",
    "\nDescription: Adds a mob to the GUID skinned list.",
    "undefined--@arg unit: Unit/n--@return: void/nfunction/nBANETO_AddMobToGuidSkinnedlist/n(/n)/n"
  ],
  [
    "WhyNotSkin [retail]",
    "\nDescription: Checks why a specific unit cannot be skinned.",
    "undefined--@arg unit: Unit/n--@return: string/nfunction/nBANETO_WhyNotSkin/n(/n)/n"
  ],
  [
    "LoadPluginYtthack [retail]",
    "\nDescription: Loads the Ytthack plugin.",
    "undefined--@return: boolean/nfunction/nBANETO_LoadPluginYtthack/n(/n)/n"
  ],
  [
    "RETAIL_LVL_ROTATION [retail]",
    "\nDescription: Executes the retail leveling rotation.",
    "undefined--@return: void/nfunction/nBANETO_RETAIL_LVL_ROTATION/n(/n)/n"
  ],
  [
    "TraceLineForBlacklisterDebug [retail]",
    "\nDescription: Debug utility that traces lines for the Blacklister.",
    "undefined--@return: void/nfunction/nBANETO_TraceLineForBlacklisterDebug/n(/n)/n"
  ],
  [
    "DfLures [retail]",
    "\nDescription: function _G.related to handling Df lures in the game.",
    "undefined--@return: unknown/nfunction/nBANETO_DfLures/n(/n)/n"
  ],
  [
    "DelayLavaEscape [retail]",
    "\nDescription: Delays the escape from lava by a certain amount of seconds.",
    "undefined--@arg seconds: number/n--@return: void/nfunction/nBANETO_DelayLavaEscape/n(/n)/n"
  ],
  [
    "FindLavaEscapeVector [retail]",
    "\nDescription: Finds an escape vector when the player is in lava.",
    "undefined--@return: Vector3/nfunction/nBANETO_FindLavaEscapeVector/n(/n)/n"
  ],
  [
    "SCAN_GLYPHS [retail]",
    "\nDescription: Scans the player's current glyphs.",
    "undefined--@return: table/nfunction/nBANETO_SCAN_GLYPHS/n(/n)/n"
  ],
  [
    "WMB_BobberTest [retail]",
    "\nDescription: Tests the bobber for the WMB fishing bot.",
    "undefined--@return: boolean/nfunction/nBANETO_WMB_BobberTest/n(/n)/n"
  ],
  [
    "RetailMultipullEnoughTargets [retail]",
    "\nDescription: Determines if there are enough targets for retail multipull.",
    "undefined--@return: boolean/nfunction/nBANETO_RetailMultipullEnoughTargets/n(/n)/n"
  ],
  [
    "ClickBetweenMeAndTarget [retail]",
    "\nDescription: Simulates a click between the player and their target at a specified distance.",
    "undefined--@arg distance: number/n--@return: void/nfunction/nBANETO_ClickBetweenMeAndTarget/n(/n)/n"
  ],
  [
    "GetTotalStashableItemCount [retail]",
    "\nDescription: Returns the total count of items that can be stashed.",
    "undefined--@return: number/nfunction/nBANETO_GetTotalStashableItemCount/n(/n)/n"
  ],
  [
    "GetNextStashableItemId [retail]",
    "\nDescription: Returns the ID of the next stashable item.",
    "undefined--@return: number/nfunction/nBANETO_GetNextStashableItemId/n(/n)/n"
  ],
  [
    "IsStashingNeeded [retail]",
    "\nDescription: Determines if stashing is needed.",
    "undefined--@return: boolean/nfunction/nBANETO_IsStashingNeeded/n(/n)/n"
  ],
  [
    "StashItemsInGuildChest [retail]",
    "\nDescription: Stashes items in the guild chest.",
    "undefined--@return: void/nfunction/nBANETO_StashItemsInGuildChest/n(/n)/n"
  ],
  [
    "IsSomeoneTargetingUsOz [retail]",
    "\nDescription: Checks if someone is targeting the player in Oz.",
    "undefined--@return: boolean/nfunction/nBANETO_IsSomeoneTargetingUsOz/n(/n)/n"
  ],
  [
    "IsSherlockKnown [retail]",
    "\nDescription: Checks if the player knows a particular Sherlock.",
    "undefined--@arg sherlock: string/n--@return: boolean/nfunction/nBANETO_IsSherlockKnown/n(/n)/n"
  ],
  [
    "GetItemLocInBags [retail]",
    "\nDescription: Returns the location of an item in the player's bags, if there are more than a minimum amount.",
    "undefined--@arg itemId: number/n--@arg minAmount: number/n--@return: table/nfunction/nBANETO_GetItemLocInBags/n(/n,/n)/n"
  ],
  [
    "ShouldSalvage [retail]",
    "\nDescription: Determines if salvaging should be done.",
    "undefined--@return: boolean/nfunction/nBANETO_ShouldSalvage/n(/n)/n"
  ],
  [
    "DfSalvage [retail]",
    "\nDescription: Performs Df salvaging for a specified spell.",
    "undefined--@arg spell: string/n--@return: boolean/nfunction/nBANETO_DfSalvage/n(/n)/n"
  ],
  [
    "RetailMountRangeCheck [retail]",
    "\nDescription: Checks the range for mounting in retail WoW.",
    "undefined--@return: boolean/nfunction/nBANETO_RetailMountRangeCheck/n(/n)/n"
  ],
  [
    "FlyingRaycastDragonriding [retail]",
    "\nDescription: Performs a raycast while dragon riding.",
    "undefined--@return: boolean/nfunction/nBANETO_FlyingRaycastDragonriding/n(/n)/n"
  ],
  [
    "GetFlyingStuckCount [retail]",
    "\nDescription: Returns the count of times the player has been stuck while flying.",
    "undefined--@return: number/nfunction/nBANETO_GetFlyingStuckCount/n(/n)/n"
  ],
  [
    "BestFriendDeleter [retail]",
    "\nDescription: Deletes best friends from the player's friend list.",
    "undefined--@return: void/nfunction/nBANETO_BestFriendDeleter/n(/n)/n"
  ],
  [
    "PitchUpStart [retail]",
    "\nDescription: Starts pitching up.",
    "undefined--@return: void/nfunction/nBANETO_PitchUpStart/n(/n)/n"
  ],
  [
    "PitchUpStop [retail]",
    "\nDescription: Stops pitching up.",
    "undefined--@return: void/nfunction/nBANETO_PitchUpStop/n(/n)/n"
  ],
  [
    "PitchDownStart [retail]",
    "\nDescription: Starts pitching down.",
    "undefined--@return: void/nfunction/nBANETO_PitchDownStart/n(/n)/n"
  ],
  [
    "PitchDownStop [retail]",
    "\nDescription: Stops pitching down.",
    "undefined--@return: void/nfunction/nBANETO_PitchDownStop/n(/n)/n"
  ],
  [
    "AerialHalt [retail]",
    "\nDescription: Halts the player in the air.",
    "undefined--@return: void/nfunction/nBANETO_AerialHalt/n(/n)/n"
  ],
  [
    "DragonWings [retail]",
    "\nDescription: Activates or deactivates dragon wings based on the input value.",
    "undefined--@arg isUpdward: boolean/n--@return: void/nfunction/nBANETO_DragonWings/n(/n)/n"
  ],
  [
    "GetDragonridingSpeed [retail]",
    "\nDescription: Gets the speed of the player while dragon riding.",
    "undefined--@return: number/nfunction/nBANETO_GetDragonridingSpeed/n(/n)/n"
  ],
  [
    "AddGlyph [retail]",
    "\nDescription: Adds a glyph with a given ID.",
    "undefined--@arg id: number/nfunction/nBANETO_AddGlyph/n(/n)/n"
  ],
  [
    "ResetSmoothturnWantedAngle [retail]",
    "\nDescription: Resets the wanted angle for smooth turning.",
    "undefinedfunction/nBANETO_ResetSmoothturnWantedAngle/n(/n)/n"
  ],
  [
    "DragonAscendsReset [retail]",
    "\nDescription: Resets the dragon ascends state.",
    "undefinedfunction/nBANETO_DragonAscendsReset/n(/n)/n"
  ],
  [
    "reaperNilMovement [retail]",
    "\nDescription: Stops the reaper's movement.",
    "undefinedfunction/nreaperNilMovement/n(/n)/n"
  ],
  [
    "IsDragonRiding [retail]",
    "\nDescription: Checks if the player is currently dragon riding.",
    "undefined--@return: boolean/nfunction/nBANETO_IsDragonRiding/n(/n)/n"
  ],
  [
    "GetRechargePercent [retail]",
    "\nDescription: Gets the recharge percent of the player's ability.",
    "undefined--@return: number/nfunction/nBANETO_GetRechargePercent/n(/n)/n"
  ],
  [
    "GetMaxVigor [retail]",
    "\nDescription: Gets the maximum vigor of the player.",
    "undefined--@return: number/nfunction/nBANETO_GetMaxVigor/n(/n)/n"
  ],
  [
    "GetCurrentVigor [retail]",
    "\nDescription: Gets the current vigor of the player.",
    "undefined--@return: number/nfunction/nBANETO_GetCurrentVigor/n(/n)/n"
  ],
  [
    "MeshToOffmesh [retail]",
    "\nDescription: Converts a mesh to an off_mesh connection at a given vector.",
    "undefined--@arg x: number/n--@arg y: number/n--@arg z: number/nfunction/nBANETO_MeshToOffmesh/n(/n,/n,/n)/n"
  ],
  [
    "SelectNextMoonfireTarget [retail]",
    "\nDescription: Selects the next target for Moonfire.",
    "undefinedfunction/nBANETO_SelectNextMoonfireTarget/n(/n)/n"
  ],
  [
    "SelectNextMultidotTargetRetailPriest [retail]",
    "\nDescription: Selects the next target for multi_dotting as a retail Priest.",
    "undefinedfunction/nBANETO_SelectNextMultidotTargetRetailPriest/n(/n)/n"
  ],
  [
    "GetNumElitesAroundUnit [retail]",
    "\nDescription: Gets the number of elite units around a given unit within a given radius.",
    "undefined--@arg unit: string/n--@arg radius: number/n--@return: number/nfunction/nGetNumElitesAroundUnit/n(/n,/n)/n"
  ],
  [
    "RetargetLowestHealthEnemyInBg [retail]",
    "\nDescription: Retargets the enemy with the lowest health in a battleground.",
    "undefinedfunction/nBANETO_RetargetLowestHealthEnemyInBg/n(/n)/n"
  ],
  [
    "BamboLoadProfile [retail]",
    "\nDescription: Loads a Bambo profile.",
    "undefinedfunction/nBANETO_BamboLoadProfile/n(/n)/n"
  ],
  [
    "PrintLootDebug [retail]",
    "\nDescription: Prints a loot debug message.",
    "undefined--@arg message: string/nfunction/nBANETO_PrintLootDebug/n(/n)/n"
  ],
  [
    "CountDebuffsRestoDf [retail]",
    "\nDescription: Counts the number of a given debuff on a given unit within a given range.",
    "undefined--@arg unit: string/n--@arg debuff: string/n--@arg range: number/n--@return: number/nfunction/nBANETO_CountDebuffsRestoDf/n(/n,/n,/n)/n"
  ],
  [
    "HttpRequestCustomOzPlugin [retail]",
    "\nDescription: Sends a custom HTTP request to a given URL.",
    "undefined--@arg url: string/nfunction/nHttpRequestCustomOzPlugin/n(/n)/n"
  ],
  [
    "GetBestSeedInBags [retail]",
    "\nDescription: Gets the best seed in the player's bags.",
    "undefined--@return: string/nfunction/nBANETO_GetBestSeedInBags/n(/n)/n"
  ],
  [
    "TestCoffeAuth [retail]",
    "\nDescription: Tests the CoffeAuth system.",
    "undefinedfunction/nTestCoffeAuth/n(/n)/n"
  ],
  [
    "DebugVehicleActions [retail]",
    "\nDescription: Debugs vehicle actions.",
    "undefinedfunction/nBANETO_DebugVehicleActions/n(/n)/n"
  ],
  [
    "CastSpellById [retail]",
    "\nDescription: Casts a spell by its ID.",
    "undefined--@arg spellid: number/nfunction/nBANETO_CastSpellById/n(/n)/n"
  ],
  [
    "Shuffle_DoWeHaveAllItems [retail]",
    "\nDescription: Checks if the player has all items required for a shuffle.",
    "undefined--@return: boolean/nfunction/nBANETO_Shuffle_DoWeHaveAllItems/n(/n)/n"
  ],
  [
    "Shuffle_GrabBankMats [retail]",
    "\nDescription: Retrieves materials from the bank for a shuffle.",
    "undefinedfunction/nBANETO_Shuffle_GrabBankMats/n(/n)/n"
  ],
  [
    "TestAhQuery [retail]",
    "\nDescription: Tests an Auction House query with a given value.",
    "undefined--@arg value: string/n--@return: boolean/nfunction/nBANETO_TestAhQuery/n(/n)/n"
  ],
  [
    "SendAhQuery2 [retail]",
    "\nDescription: Sends a second type of Auction House query.",
    "undefinedfunction/nBANETO_SendAhQuery2/n(/n)/n"
  ],
  [
    "SendAhQuery3 [retail]",
    "\nDescription: Sends a third type of Auction House query.",
    "undefinedfunction/nBANETO_SendAhQuery3/n(/n)/n"
  ],
  [
    "Shuffle_BuyAhMats [retail]",
    "\nDescription: Buys materials from the Auction House for a shuffle.",
    "undefinedfunction/nBANETO_Shuffle_BuyAhMats/n(/n)/n"
  ],
  [
    "Shuffle_BuyVendorItem [retail]",
    "\nDescription: Buys a vendor item for a shuffle.",
    "undefined--@arg name: string/nfunction/nBANETO_Shuffle_BuyVendorItem/n(/n)/n"
  ],
  [
    "Shuffle_BuyVendorMats [retail]",
    "\nDescription: Buys vendor materials for a shuffle.",
    "undefinedfunction/nBANETO_Shuffle_BuyVendorMats/n(/n)/n"
  ],
  [
    "BANET_Shuffle_ClearMailbox [retail]",
    "\nDescription: Clears the mailbox after a shuffle.",
    "undefinedfunction/nBANET_Shuffle_ClearMailbox/n(/n)/n"
  ],
  [
    "Shuffle_CraftEndproduct [retail]",
    "\nDescription: Crafts the end product of a shuffle.",
    "undefinedfunction/nBANETO_Shuffle_CraftEndproduct/n(/n)/n"
  ],
  [
    "Shuffle_RESET [retail]",
    "\nDescription: Resets the shuffle process.",
    "undefinedfunction/nBANETO_Shuffle_RESET/n(/n)/n"
  ],
  [
    "EnterShuffleState [retail]",
    "\nDescription: Enters the shuffle state.",
    "undefinedfunction/nBANETO_EnterShuffleState/n(/n)/n"
  ],
  [
    "ScanIceCracks [retail]",
    "\nDescription: Scans for ice cracks for ice fishing.",
    "undefinedfunction/nBANETO_ScanIceCracks/n(/n)/n"
  ],
  [
    "ScanIceHoles [retail]",
    "\nDescription: Scans for ice holes for ice fishing.",
    "undefinedfunction/nBANETO_ScanIceHoles/n(/n)/n"
  ],
  [
    "IceFishingState [retail]",
    "\nDescription: Executess the ice fishing state behavior.",
    "undefinedfunction/nBANETO_IceFishingState/n(/n)/n"
  ],
  [
    "IceFishing [retail]",
    "\nDescription: Performs ice fishing.",
    "undefinedfunction/nBANETO_IceFishing/n(/n)/n"
  ],
  [
    "IsItemInStoreList [retail]",
    "\nDescription: Checks if an item is in the store list.",
    "undefined--@arg itemname: string/n--@return: boolean/nfunction/nBANETO_IsItemInStoreList/n(/n)/n"
  ],
  [
    "IsHsBoundToInnkeeperId [retail]",
    "\nDescription: Checks if the Hearthstone is bound to a specific innkeeper.",
    "undefined--@arg id: number/n--@return: boolean/nfunction/nBANETO_IsHsBoundToInnkeeperId/n(/n)/n"
  ],
  [
    "RETAIL_HEALER_ROTATION [retail]",
    "\nDescription: Executes the retail healer rotation.",
    "undefinedfunction/nBANETO_RETAIL_HEALER_ROTATION/n(/n)/n"
  ],
  [
    "InactiveRotation [retail]",
    "\nDescription: Executes the rotation for retail.",
    "undefinedfunction/nInactiveRotation/n(/n)/n"
  ],
  [
    "MultidottingRetail [retail]",
    "\nDescription: Performs multi_dotting in retail with a given routine.",
    "undefined--@arg routine: string/nfunction/nBANETO_MultidottingRetail/n(/n)/n"
  ],
  [
    "ProtectedAhShuffle [retail]",
    "\nDescription: Performs a protected Auction House shuffle.",
    "undefinedfunction/nBANETO_ProtectedAhShuffle/n(/n)/n"
  ],
  [
    "PortGy [retail]",
    "\nDescription: Teleports the player to the graveyard.",
    "undefinedfunction/nBANETO_PortGy/n(/n)/n"
  ],
  [
    "AreWeInLowerOribos [retail]",
    "\nDescription: Checks if the player is currently in the lower level of Oribos.",
    "undefined--@return: boolean/nfunction/nBANETO_AreWeInLowerOribos/n(/n)/n"
  ],
  [
    "IsVectorInLowerOribos [retail]",
    "\nDescription: Checks if a given vector is in the lower level of Oribos.",
    "undefined--@arg x: number/n--@arg y: number/n--@arg z: number/n--@return: boolean/nfunction/nBANETO_IsVectorInLowerOribos/n(/n,/n,/n)/n"
  ],
  [
    "IsDestinationInLowerOribos [retail]",
    "\nDescription: Checks if the player's current destination is in the lower level of Oribos.",
    "undefined--@return: boolean/nfunction/nBANETO_IsDestinationInLowerOribos/n(/n)/n"
  ],
  [
    "AreWeInUpperOribos [retail]",
    "\nDescription: Checks if the player is currently in the upper level of Oribos.",
    "undefined--@return: boolean/nfunction/nBANETO_AreWeInUpperOribos/n(/n)/n"
  ],
  [
    "IsVectorInUpperOribos [retail]",
    "\nDescription: Checks if a given vector is in the upper level of Oribos.",
    "undefined--@arg x: number/n--@arg y: number/n--@arg z: number/n--@return: boolean/nfunction/nBANETO_IsVectorInUpperOribos/n(/n,/n,/n)/n"
  ],
  [
    "IsDestinationInUpperOribos [retail]",
    "\nDescription: Checks if the player's current destination is in the upper level of Oribos.",
    "undefined--@return: boolean/nfunction/nBANETO_IsDestinationInUpperOribos/n(/n)/n"
  ]
]
